
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d68  08005d68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d70  08005d70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000070  08005de8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005de8  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d196  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b86  00000000  00000000  0002d22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002edb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002f940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c84  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e59f  00000000  00000000  00041094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000672c8  00000000  00000000  0004f633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b68fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d68  00000000  00000000  000b694c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005988 	.word	0x08005988

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005988 	.word	0x08005988

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <charToHex>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

unsigned int charToHex(char val){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	701a      	strb	r2, [r3, #0]
	if (val == '0'){
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b30      	cmp	r3, #48	; 0x30
 80004ce:	d101      	bne.n	80004d4 <charToHex+0x18>
		return 0x0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	e054      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '1'){
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b31      	cmp	r3, #49	; 0x31
 80004da:	d101      	bne.n	80004e0 <charToHex+0x24>
		return 0x1;
 80004dc:	2301      	movs	r3, #1
 80004de:	e04e      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '2'){
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b32      	cmp	r3, #50	; 0x32
 80004e6:	d101      	bne.n	80004ec <charToHex+0x30>
		return 0x2;
 80004e8:	2302      	movs	r3, #2
 80004ea:	e048      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '3'){
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b33      	cmp	r3, #51	; 0x33
 80004f2:	d101      	bne.n	80004f8 <charToHex+0x3c>
		return 0x3;
 80004f4:	2303      	movs	r3, #3
 80004f6:	e042      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '4'){
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b34      	cmp	r3, #52	; 0x34
 80004fe:	d101      	bne.n	8000504 <charToHex+0x48>
		return 0x4;
 8000500:	2304      	movs	r3, #4
 8000502:	e03c      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '5'){
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b35      	cmp	r3, #53	; 0x35
 800050a:	d101      	bne.n	8000510 <charToHex+0x54>
		return 0x5;
 800050c:	2305      	movs	r3, #5
 800050e:	e036      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '6'){
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b36      	cmp	r3, #54	; 0x36
 8000516:	d101      	bne.n	800051c <charToHex+0x60>
		return 0x6;
 8000518:	2306      	movs	r3, #6
 800051a:	e030      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '7'){
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b37      	cmp	r3, #55	; 0x37
 8000522:	d101      	bne.n	8000528 <charToHex+0x6c>
		return 0x7;
 8000524:	2307      	movs	r3, #7
 8000526:	e02a      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '8'){
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b38      	cmp	r3, #56	; 0x38
 800052e:	d101      	bne.n	8000534 <charToHex+0x78>
		return 0x8;
 8000530:	2308      	movs	r3, #8
 8000532:	e024      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == '9'){
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b39      	cmp	r3, #57	; 0x39
 800053a:	d101      	bne.n	8000540 <charToHex+0x84>
		return 0x9;
 800053c:	2309      	movs	r3, #9
 800053e:	e01e      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == 'A'){
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b41      	cmp	r3, #65	; 0x41
 8000546:	d101      	bne.n	800054c <charToHex+0x90>
		return 0xA;
 8000548:	230a      	movs	r3, #10
 800054a:	e018      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == 'B'){
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b42      	cmp	r3, #66	; 0x42
 8000552:	d101      	bne.n	8000558 <charToHex+0x9c>
		return 0xB;
 8000554:	230b      	movs	r3, #11
 8000556:	e012      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == 'C'){
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b43      	cmp	r3, #67	; 0x43
 800055e:	d101      	bne.n	8000564 <charToHex+0xa8>
		return 0xC;
 8000560:	230c      	movs	r3, #12
 8000562:	e00c      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == 'D'){
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b44      	cmp	r3, #68	; 0x44
 800056a:	d101      	bne.n	8000570 <charToHex+0xb4>
		return 0xD;
 800056c:	230d      	movs	r3, #13
 800056e:	e006      	b.n	800057e <charToHex+0xc2>
	}
	else if (val == 'E'){
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b45      	cmp	r3, #69	; 0x45
 8000576:	d101      	bne.n	800057c <charToHex+0xc0>
		return 0xE;
 8000578:	230e      	movs	r3, #14
 800057a:	e000      	b.n	800057e <charToHex+0xc2>
	}
	else{
		return 0xF;
 800057c:	230f      	movs	r3, #15
	}
}
 800057e:	0018      	movs	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <printToMonitor>:
/*=================================================================================================*/
HAL_StatusTypeDef printToMonitor(uint8_t *data, uint8_t size){
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	b089      	sub	sp, #36	; 0x24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	000a      	movs	r2, r1
 8000592:	1cfb      	adds	r3, r7, #3
 8000594:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint8_t printError[16] = "Error Printing";
 8000596:	260c      	movs	r6, #12
 8000598:	19b9      	adds	r1, r7, r6
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <printToMonitor+0x74>)
 800059c:	000b      	movs	r3, r1
 800059e:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005a0:	c331      	stmia	r3!, {r0, r4, r5}
 80005a2:	8810      	ldrh	r0, [r2, #0]
 80005a4:	8018      	strh	r0, [r3, #0]
 80005a6:	7892      	ldrb	r2, [r2, #2]
 80005a8:	709a      	strb	r2, [r3, #2]
 80005aa:	230f      	movs	r3, #15
 80005ac:	2200      	movs	r2, #0
 80005ae:	54ca      	strb	r2, [r1, r3]

	ret = HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 80005b0:	1cfb      	adds	r3, r7, #3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	251f      	movs	r5, #31
 80005b8:	197c      	adds	r4, r7, r5
 80005ba:	2301      	movs	r3, #1
 80005bc:	425b      	negs	r3, r3
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <printToMonitor+0x78>)
 80005c2:	f003 ffa5 	bl	8004510 <HAL_UART_Transmit>
 80005c6:	0003      	movs	r3, r0
 80005c8:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK){
 80005ca:	197b      	adds	r3, r7, r5
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d00c      	beq.n	80005ec <printToMonitor+0x64>
		ret = HAL_UART_Transmit(&huart2, printError, sizeof(printError)-1, HAL_MAX_DELAY);
 80005d2:	197c      	adds	r4, r7, r5
 80005d4:	2301      	movs	r3, #1
 80005d6:	425b      	negs	r3, r3
 80005d8:	19b9      	adds	r1, r7, r6
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <printToMonitor+0x78>)
 80005dc:	220f      	movs	r2, #15
 80005de:	f003 ff97 	bl	8004510 <HAL_UART_Transmit>
 80005e2:	0003      	movs	r3, r0
 80005e4:	7023      	strb	r3, [r4, #0]
		return ret;
 80005e6:	197b      	adds	r3, r7, r5
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	e002      	b.n	80005f2 <printToMonitor+0x6a>
	}

	return ret;
 80005ec:	231f      	movs	r3, #31
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	781b      	ldrb	r3, [r3, #0]
}
 80005f2:	0018      	movs	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b009      	add	sp, #36	; 0x24
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	080059a0 	.word	0x080059a0
 8000600:	2000015c 	.word	0x2000015c

08000604 <sensor_init>:
/*=================================================================================================*/
HAL_StatusTypeDef sensor_init(){
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b085      	sub	sp, #20
 8000608:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef ret;

	int8_t configData[3];

	configData[0]=0x04; //command code
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2204      	movs	r2, #4
 800060e:	701a      	strb	r2, [r3, #0]
	configData[1]=0x00;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	705a      	strb	r2, [r3, #1]
	configData[2]=0x03;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2203      	movs	r2, #3
 800061a:	709a      	strb	r2, [r3, #2]

	ret = HAL_I2C_Master_Transmit(&hi2c1, SENSORADDRESS<<1, (uint8_t *)&configData, 3, 2000);
 800061c:	1dfc      	adds	r4, r7, #7
 800061e:	1d3a      	adds	r2, r7, #4
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <sensor_init+0x84>)
 8000622:	23fa      	movs	r3, #250	; 0xfa
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2303      	movs	r3, #3
 800062a:	21c0      	movs	r1, #192	; 0xc0
 800062c:	f001 fc20 	bl	8001e70 <HAL_I2C_Master_Transmit>
 8000630:	0003      	movs	r3, r0
 8000632:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <sensor_init+0x3e>
	{
		return ret;
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	e01d      	b.n	800067e <sensor_init+0x7a>
	}

	configData[0] = 0x03; //command code
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2203      	movs	r2, #3
 8000646:	701a      	strb	r2, [r3, #0]
	configData[1] = 0x40;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2240      	movs	r2, #64	; 0x40
 800064c:	705a      	strb	r2, [r3, #1]
	configData[2] = 0x08;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2208      	movs	r2, #8
 8000652:	709a      	strb	r2, [r3, #2]

	ret = HAL_I2C_Master_Transmit(&hi2c1, SENSORADDRESS<<1, (uint8_t *)&configData, 3, 2000);
 8000654:	1dfc      	adds	r4, r7, #7
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <sensor_init+0x84>)
 800065a:	23fa      	movs	r3, #250	; 0xfa
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2303      	movs	r3, #3
 8000662:	21c0      	movs	r1, #192	; 0xc0
 8000664:	f001 fc04 	bl	8001e70 <HAL_I2C_Master_Transmit>
 8000668:	0003      	movs	r3, r0
 800066a:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <sensor_init+0x76>
	{
		return ret;
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	e001      	b.n	800067e <sensor_init+0x7a>
	}

	return ret;
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
}
 800067e:	0018      	movs	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	b003      	add	sp, #12
 8000684:	bd90      	pop	{r4, r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	2000008c 	.word	0x2000008c

0800068c <getSensorValue>:
/*=================================================================================================*/
HAL_StatusTypeDef getSensorValue(uint8_t *data){
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af04      	add	r7, sp, #16
 8000692:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret;
	uint8_t sensorDataBuffer[2];

	ret = HAL_I2C_Mem_Read(&hi2c1,SENSORADDRESS<<1,0x08,1,(uint8_t *)&sensorDataBuffer,2,HAL_MAX_DELAY);
 8000694:	250f      	movs	r5, #15
 8000696:	197c      	adds	r4, r7, r5
 8000698:	4842      	ldr	r0, [pc, #264]	; (80007a4 <getSensorValue+0x118>)
 800069a:	2301      	movs	r3, #1
 800069c:	425b      	negs	r3, r3
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	2302      	movs	r3, #2
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	230c      	movs	r3, #12
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2301      	movs	r3, #1
 80006ac:	2208      	movs	r2, #8
 80006ae:	21c0      	movs	r1, #192	; 0xc0
 80006b0:	f001 fdee 	bl	8002290 <HAL_I2C_Mem_Read>
 80006b4:	0003      	movs	r3, r0
 80006b6:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
 80006b8:	197b      	adds	r3, r7, r5
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <getSensorValue+0x3a>
		{
			return ret;
 80006c0:	197b      	adds	r3, r7, r5
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	e069      	b.n	800079a <getSensorValue+0x10e>
		}

	if (sensorDataBuffer[0]<6){
 80006c6:	230c      	movs	r3, #12
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b05      	cmp	r3, #5
 80006ce:	d803      	bhi.n	80006d8 <getSensorValue+0x4c>
		*data=0x39;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2239      	movs	r2, #57	; 0x39
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e05d      	b.n	8000794 <getSensorValue+0x108>
	}else if(sensorDataBuffer[0]<9 && sensorDataBuffer[1] == 0){
 80006d8:	220c      	movs	r2, #12
 80006da:	18bb      	adds	r3, r7, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b08      	cmp	r3, #8
 80006e0:	d807      	bhi.n	80006f2 <getSensorValue+0x66>
 80006e2:	18bb      	adds	r3, r7, r2
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d103      	bne.n	80006f2 <getSensorValue+0x66>
		*data=0x38;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2238      	movs	r2, #56	; 0x38
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e050      	b.n	8000794 <getSensorValue+0x108>
	}else if(sensorDataBuffer[0]<35 && sensorDataBuffer[1] == 0){
 80006f2:	220c      	movs	r2, #12
 80006f4:	18bb      	adds	r3, r7, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b22      	cmp	r3, #34	; 0x22
 80006fa:	d807      	bhi.n	800070c <getSensorValue+0x80>
 80006fc:	18bb      	adds	r3, r7, r2
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d103      	bne.n	800070c <getSensorValue+0x80>
		*data=0x37;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2237      	movs	r2, #55	; 0x37
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e043      	b.n	8000794 <getSensorValue+0x108>
	}else if(sensorDataBuffer[0]<65 && sensorDataBuffer[1] == 0){
 800070c:	220c      	movs	r2, #12
 800070e:	18bb      	adds	r3, r7, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b40      	cmp	r3, #64	; 0x40
 8000714:	d807      	bhi.n	8000726 <getSensorValue+0x9a>
 8000716:	18bb      	adds	r3, r7, r2
 8000718:	785b      	ldrb	r3, [r3, #1]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d103      	bne.n	8000726 <getSensorValue+0x9a>
		*data = 0x36;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2236      	movs	r2, #54	; 0x36
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e036      	b.n	8000794 <getSensorValue+0x108>
	}else if(sensorDataBuffer[0]<90 && sensorDataBuffer[1] == 0){
 8000726:	220c      	movs	r2, #12
 8000728:	18bb      	adds	r3, r7, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b59      	cmp	r3, #89	; 0x59
 800072e:	d807      	bhi.n	8000740 <getSensorValue+0xb4>
 8000730:	18bb      	adds	r3, r7, r2
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d103      	bne.n	8000740 <getSensorValue+0xb4>
		*data = 0x35;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2235      	movs	r2, #53	; 0x35
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	e029      	b.n	8000794 <getSensorValue+0x108>
	}else if(sensorDataBuffer[0]<125 && sensorDataBuffer[1] == 0){
 8000740:	220c      	movs	r2, #12
 8000742:	18bb      	adds	r3, r7, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b7c      	cmp	r3, #124	; 0x7c
 8000748:	d807      	bhi.n	800075a <getSensorValue+0xce>
 800074a:	18bb      	adds	r3, r7, r2
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <getSensorValue+0xce>
		*data = 0x34;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2234      	movs	r2, #52	; 0x34
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e01c      	b.n	8000794 <getSensorValue+0x108>
	}else if(sensorDataBuffer[0]<175 && sensorDataBuffer[1] == 0){
 800075a:	220c      	movs	r2, #12
 800075c:	18bb      	adds	r3, r7, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2bae      	cmp	r3, #174	; 0xae
 8000762:	d807      	bhi.n	8000774 <getSensorValue+0xe8>
 8000764:	18bb      	adds	r3, r7, r2
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d103      	bne.n	8000774 <getSensorValue+0xe8>
		*data = 0x33;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2233      	movs	r2, #51	; 0x33
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e00f      	b.n	8000794 <getSensorValue+0x108>
	}else if(sensorDataBuffer[0] < 225 && sensorDataBuffer[1] == 0){
 8000774:	220c      	movs	r2, #12
 8000776:	18bb      	adds	r3, r7, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2be0      	cmp	r3, #224	; 0xe0
 800077c:	d807      	bhi.n	800078e <getSensorValue+0x102>
 800077e:	18bb      	adds	r3, r7, r2
 8000780:	785b      	ldrb	r3, [r3, #1]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d103      	bne.n	800078e <getSensorValue+0x102>
		*data = 0x32;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2232      	movs	r2, #50	; 0x32
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e002      	b.n	8000794 <getSensorValue+0x108>
	}else{
		*data = 0x31;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2231      	movs	r2, #49	; 0x31
 8000792:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 8000794:	230f      	movs	r3, #15
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	781b      	ldrb	r3, [r3, #0]
}
 800079a:	0018      	movs	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	b004      	add	sp, #16
 80007a0:	bdb0      	pop	{r4, r5, r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	2000008c 	.word	0x2000008c

080007a8 <getGpsData>:
/*=================================================================================================*/
HAL_StatusTypeDef getGpsData(){
 80007a8:	b5b0      	push	{r4, r5, r7, lr}
 80007aa:	b0c4      	sub	sp, #272	; 0x110
 80007ac:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	int8_t gpsDataBuffer[256];
	int8_t init = 0xFF;
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <getGpsData+0xa4>)
 80007b0:	2284      	movs	r2, #132	; 0x84
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	189b      	adds	r3, r3, r2
 80007b6:	19db      	adds	r3, r3, r7
 80007b8:	22ff      	movs	r2, #255	; 0xff
 80007ba:	701a      	strb	r2, [r3, #0]

	ret = HAL_I2C_Master_Transmit(&hi2c1, GPSADDRESS<<1, (uint8_t *)&init, 1, HAL_MAX_DELAY);
 80007bc:	2508      	movs	r5, #8
 80007be:	35ff      	adds	r5, #255	; 0xff
 80007c0:	197c      	adds	r4, r7, r5
 80007c2:	1cfa      	adds	r2, r7, #3
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <getGpsData+0xa8>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	425b      	negs	r3, r3
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	2184      	movs	r1, #132	; 0x84
 80007d0:	f001 fb4e 	bl	8001e70 <HAL_I2C_Master_Transmit>
 80007d4:	0003      	movs	r3, r0
 80007d6:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK)
 80007d8:	197b      	adds	r3, r7, r5
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <getGpsData+0x3e>
		{
			return ret;
 80007e0:	197b      	adds	r3, r7, r5
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	e02d      	b.n	8000842 <getGpsData+0x9a>
		}
	HAL_Delay(40);
 80007e6:	2028      	movs	r0, #40	; 0x28
 80007e8:	f001 f848 	bl	800187c <HAL_Delay>

	do{
		ret = HAL_I2C_Master_Receive(&hi2c1, GPSADDRESS<<1, (uint8_t *)&gpsDataBuffer, 256, HAL_MAX_DELAY);
 80007ec:	2508      	movs	r5, #8
 80007ee:	35ff      	adds	r5, #255	; 0xff
 80007f0:	197c      	adds	r4, r7, r5
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	0059      	lsls	r1, r3, #1
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	4815      	ldr	r0, [pc, #84]	; (8000850 <getGpsData+0xa8>)
 80007fa:	2301      	movs	r3, #1
 80007fc:	425b      	negs	r3, r3
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	000b      	movs	r3, r1
 8000802:	2184      	movs	r1, #132	; 0x84
 8000804:	f001 fc3c 	bl	8002080 <HAL_I2C_Master_Receive>
 8000808:	0003      	movs	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK){
 800080c:	197b      	adds	r3, r7, r5
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <getGpsData+0x72>
				return ret;
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	e013      	b.n	8000842 <getGpsData+0x9a>
			}
		//HAL_Delay(40);

	}while(gpsDataBuffer[0] == -1);
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <getGpsData+0xac>)
 800081c:	2284      	movs	r2, #132	; 0x84
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	189b      	adds	r3, r3, r2
 8000822:	19db      	adds	r3, r3, r7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	3301      	adds	r3, #1
 800082a:	d0df      	beq.n	80007ec <getGpsData+0x44>

	HAL_UART_Transmit(&huart2,(uint8_t *)&gpsDataBuffer,162,HAL_MAX_DELAY);
 800082c:	2301      	movs	r3, #1
 800082e:	425b      	negs	r3, r3
 8000830:	1d39      	adds	r1, r7, #4
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <getGpsData+0xb0>)
 8000834:	22a2      	movs	r2, #162	; 0xa2
 8000836:	f003 fe6b 	bl	8004510 <HAL_UART_Transmit>

	return ret;
 800083a:	2308      	movs	r3, #8
 800083c:	33ff      	adds	r3, #255	; 0xff
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	781b      	ldrb	r3, [r3, #0]
}
 8000842:	0018      	movs	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	b042      	add	sp, #264	; 0x108
 8000848:	bdb0      	pop	{r4, r5, r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	fffffefb 	.word	0xfffffefb
 8000850:	2000008c 	.word	0x2000008c
 8000854:	fffffefc 	.word	0xfffffefc
 8000858:	2000015c 	.word	0x2000015c

0800085c <ram_init>:
/*=================================================================================================*/
void ram_init(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	0159      	lsls	r1, r3, #5
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fa4c 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&SRAM_WRMR, 1, 100);
 8000870:	490b      	ldr	r1, [pc, #44]	; (80008a0 <ram_init+0x44>)
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <ram_init+0x48>)
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	f003 f87f 	bl	800397a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&SRAM_SEQ, 1, 100);
 800087c:	490a      	ldr	r1, [pc, #40]	; (80008a8 <ram_init+0x4c>)
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <ram_init+0x48>)
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	2201      	movs	r2, #1
 8000884:	f003 f879 	bl	800397a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	0159      	lsls	r1, r3, #5
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	2201      	movs	r2, #1
 8000892:	0018      	movs	r0, r3
 8000894:	f001 fa38 	bl	8001d08 <HAL_GPIO_WritePin>
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	08005cc6 	.word	0x08005cc6
 80008a4:	200001e0 	.word	0x200001e0
 80008a8:	08005cc7 	.word	0x08005cc7

080008ac <ram_write_split>:
/*=================================================================================================*/
void ram_write_split(uint8_t high, uint8_t med, uint8_t low, uint8_t value){
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	0005      	movs	r5, r0
 80008b4:	000c      	movs	r4, r1
 80008b6:	0010      	movs	r0, r2
 80008b8:	0019      	movs	r1, r3
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	1c2a      	adds	r2, r5, #0
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	1c22      	adds	r2, r4, #0
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	1d7b      	adds	r3, r7, #5
 80008c8:	1c02      	adds	r2, r0, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	1c0a      	adds	r2, r1, #0
 80008d0:	701a      	strb	r2, [r3, #0]

	static uint8_t srcBuff[5];

	srcBuff[0] = 0x02;				// write command code
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <ram_write_split+0x80>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	701a      	strb	r2, [r3, #0]
	srcBuff[1] = high; //high address
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <ram_write_split+0x80>)
 80008da:	1dfa      	adds	r2, r7, #7
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	705a      	strb	r2, [r3, #1]
	srcBuff[2] = med; //middle address
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <ram_write_split+0x80>)
 80008e2:	1dba      	adds	r2, r7, #6
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	709a      	strb	r2, [r3, #2]
	srcBuff[3] = low; //low address
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <ram_write_split+0x80>)
 80008ea:	1d7a      	adds	r2, r7, #5
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	70da      	strb	r2, [r3, #3]
	srcBuff[4] = value;	//data
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <ram_write_split+0x80>)
 80008f2:	1d3a      	adds	r2, r7, #4
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	711a      	strb	r2, [r3, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //slave select low
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	0159      	lsls	r1, r3, #5
 80008fc:	23a0      	movs	r3, #160	; 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	2200      	movs	r2, #0
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fa00 	bl	8001d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&srcBuff, 5, 100); //command -> addr -> data
 8000908:	4908      	ldr	r1, [pc, #32]	; (800092c <ram_write_split+0x80>)
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <ram_write_split+0x84>)
 800090c:	2364      	movs	r3, #100	; 0x64
 800090e:	2205      	movs	r2, #5
 8000910:	f003 f833 	bl	800397a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); //slave select high
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	0159      	lsls	r1, r3, #5
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2201      	movs	r2, #1
 800091e:	0018      	movs	r0, r3
 8000920:	f001 f9f2 	bl	8001d08 <HAL_GPIO_WritePin>

}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bdb0      	pop	{r4, r5, r7, pc}
 800092c:	20000238 	.word	0x20000238
 8000930:	200001e0 	.word	0x200001e0

08000934 <ram_read_split>:
/*=================================================================================================*/
uint8_t ram_read_split(uint8_t high, uint8_t med, uint8_t low, uint8_t *data){
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	0004      	movs	r4, r0
 800093c:	0008      	movs	r0, r1
 800093e:	0011      	movs	r1, r2
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	1c22      	adds	r2, r4, #0
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	1dbb      	adds	r3, r7, #6
 800094a:	1c02      	adds	r2, r0, #0
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	1d7b      	adds	r3, r7, #5
 8000950:	1c0a      	adds	r2, r1, #0
 8000952:	701a      	strb	r2, [r3, #0]

	static uint8_t srcReadBuff[4];

	srcReadBuff[0] = 0x03;		//Read Command Code
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <ram_read_split+0x90>)
 8000956:	2203      	movs	r2, #3
 8000958:	701a      	strb	r2, [r3, #0]
	srcReadBuff[1] = high;	//high address
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <ram_read_split+0x90>)
 800095c:	1dfa      	adds	r2, r7, #7
 800095e:	7812      	ldrb	r2, [r2, #0]
 8000960:	705a      	strb	r2, [r3, #1]
	srcReadBuff[2] = med;	//middle address
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <ram_read_split+0x90>)
 8000964:	1dba      	adds	r2, r7, #6
 8000966:	7812      	ldrb	r2, [r2, #0]
 8000968:	709a      	strb	r2, [r3, #2]
	srcReadBuff[3] = low;	//low address
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <ram_read_split+0x90>)
 800096c:	1d7a      	adds	r2, r7, #5
 800096e:	7812      	ldrb	r2, [r2, #0]
 8000970:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//slave select low
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	0159      	lsls	r1, r3, #5
 8000976:	23a0      	movs	r3, #160	; 0xa0
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2200      	movs	r2, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f001 f9c3 	bl	8001d08 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&srcReadBuff, 4, 100); //command -> addr
 8000982:	4910      	ldr	r1, [pc, #64]	; (80009c4 <ram_read_split+0x90>)
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <ram_read_split+0x94>)
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	2204      	movs	r2, #4
 800098a:	f002 fff6 	bl	800397a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, 1, 100); //they are definitely trolling with this
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <ram_read_split+0x94>)
 8000992:	2364      	movs	r3, #100	; 0x64
 8000994:	2201      	movs	r2, #1
 8000996:	f003 f947 	bl	8003c28 <HAL_SPI_Receive>


	HAL_SPI_Receive(&hspi1, data, 1, 100); //how should we retun the data? -> one by one
 800099a:	6839      	ldr	r1, [r7, #0]
 800099c:	480a      	ldr	r0, [pc, #40]	; (80009c8 <ram_read_split+0x94>)
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	2201      	movs	r2, #1
 80009a2:	f003 f941 	bl	8003c28 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); //slave select high
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	0159      	lsls	r1, r3, #5
 80009aa:	23a0      	movs	r3, #160	; 0xa0
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	2201      	movs	r2, #1
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 f9a9 	bl	8001d08 <HAL_GPIO_WritePin>

	return *data;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	781b      	ldrb	r3, [r3, #0]

}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b003      	add	sp, #12
 80009c0:	bd90      	pop	{r4, r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	20000240 	.word	0x20000240
 80009c8:	200001e0 	.word	0x200001e0

080009cc <cam_config>:
/*=================================================================================================*/
HAL_StatusTypeDef cam_config(){
 80009cc:	b5b0      	push	{r4, r5, r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af02      	add	r7, sp, #8
	uint8_t i = 0;
 80009d2:	2317      	movs	r3, #23
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint8_t printError[16];
	int8_t configData[2];


	configData[0] = 0xff;
 80009da:	003b      	movs	r3, r7
 80009dc:	22ff      	movs	r2, #255	; 0xff
 80009de:	701a      	strb	r2, [r3, #0]
	configData[1] = 0x01;
 80009e0:	003b      	movs	r3, r7
 80009e2:	2201      	movs	r2, #1
 80009e4:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, CAMADDRESSWRITE, (uint8_t *)&configData, 2, 100);
 80009e6:	2516      	movs	r5, #22
 80009e8:	197c      	adds	r4, r7, r5
 80009ea:	003a      	movs	r2, r7
 80009ec:	482d      	ldr	r0, [pc, #180]	; (8000aa4 <cam_config+0xd8>)
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2302      	movs	r3, #2
 80009f4:	2160      	movs	r1, #96	; 0x60
 80009f6:	f001 fa3b 	bl	8001e70 <HAL_I2C_Master_Transmit>
 80009fa:	0003      	movs	r3, r0
 80009fc:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK){
 80009fe:	197b      	adds	r3, r7, r5
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <cam_config+0x40>
		return ret;
 8000a06:	197b      	adds	r3, r7, r5
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	e046      	b.n	8000a9a <cam_config+0xce>
	}


	configData[0] = 0x12;
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	2212      	movs	r2, #18
 8000a10:	701a      	strb	r2, [r3, #0]
	configData[1] = 0x80;
 8000a12:	003b      	movs	r3, r7
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, 0x60, (uint8_t *)&configData, 2, 100);
 8000a18:	2516      	movs	r5, #22
 8000a1a:	197c      	adds	r4, r7, r5
 8000a1c:	003a      	movs	r2, r7
 8000a1e:	4821      	ldr	r0, [pc, #132]	; (8000aa4 <cam_config+0xd8>)
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2302      	movs	r3, #2
 8000a26:	2160      	movs	r1, #96	; 0x60
 8000a28:	f001 fa22 	bl	8001e70 <HAL_I2C_Master_Transmit>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK){
 8000a30:	197b      	adds	r3, r7, r5
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <cam_config+0x72>
		return ret;
 8000a38:	197b      	adds	r3, r7, r5
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	e02d      	b.n	8000a9a <cam_config+0xce>
	}


	HAL_Delay(200);
 8000a3e:	20c8      	movs	r0, #200	; 0xc8
 8000a40:	f000 ff1c 	bl	800187c <HAL_Delay>

	for(i = 0; i<193; i++){
 8000a44:	2317      	movs	r3, #23
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e01d      	b.n	8000a8a <cam_config+0xbe>
		ret = HAL_I2C_Master_Transmit(&hi2c1, 0x60, (uint8_t *)&configs[i], 2, 100);
 8000a4e:	2317      	movs	r3, #23
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	005a      	lsls	r2, r3, #1
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <cam_config+0xdc>)
 8000a58:	18d2      	adds	r2, r2, r3
 8000a5a:	2516      	movs	r5, #22
 8000a5c:	197c      	adds	r4, r7, r5
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <cam_config+0xd8>)
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2302      	movs	r3, #2
 8000a66:	2160      	movs	r1, #96	; 0x60
 8000a68:	f001 fa02 	bl	8001e70 <HAL_I2C_Master_Transmit>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK){
 8000a70:	197b      	adds	r3, r7, r5
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <cam_config+0xb2>
			return ret;
 8000a78:	197b      	adds	r3, r7, r5
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	e00d      	b.n	8000a9a <cam_config+0xce>
	for(i = 0; i<193; i++){
 8000a7e:	2117      	movs	r1, #23
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	3201      	adds	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	2317      	movs	r3, #23
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2bc0      	cmp	r3, #192	; 0xc0
 8000a92:	d9dc      	bls.n	8000a4e <cam_config+0x82>
		}
	}

	return ret;
 8000a94:	2316      	movs	r3, #22
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b006      	add	sp, #24
 8000aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	2000008c 	.word	0x2000008c
 8000aa8:	08005b44 	.word	0x08005b44

08000aac <esp_rx>:
	uint8_t txbuff[1];
	txbuff[0] = data;
	HAL_UART_Transmit(&hlpuart1,(uint8_t *) &txbuff, 1,HAL_MAX_DELAY);
}
/*=================================================================================================*/
uint8_t esp_rx(){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	uint8_t rxbuff[1];
	HAL_UART_Receive(&hlpuart1,(uint8_t *)&rxbuff, sizeof(rxbuff),HAL_MAX_DELAY);
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	425b      	negs	r3, r3
 8000ab6:	1d39      	adds	r1, r7, #4
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <esp_rx+0x20>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	f003 fdd0 	bl	8004660 <HAL_UART_Receive>
	return rxbuff[0];
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	781b      	ldrb	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000d8 	.word	0x200000d8

08000ad0 <cam_pic>:
/*=================================================================================================*/
void cam_pic(void){
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b093      	sub	sp, #76	; 0x4c
 8000ad4:	af00      	add	r7, sp, #0
	uint8_t srcBuff[2];
	char uart_buf_cam[50];
	int uart_buf_len_cam;
	uint8_t readysend;
	uint8_t readyrec;
	uint8_t srcTestBuff = 0x3C;
 8000ad6:	1d7b      	adds	r3, r7, #5
 8000ad8:	223c      	movs	r2, #60	; 0x3c
 8000ada:	701a      	strb	r2, [r3, #0]
	uint8_t high = 0x00;
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
	uint8_t low = 0x00;
 8000ae2:	1cfb      	adds	r3, r7, #3
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	uint8_t cover = 0x00;
 8000ae8:	1cbb      	adds	r3, r7, #2
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]


	srcBuff[0] = 0x84; //msb is 1 for write
 8000aee:	243c      	movs	r4, #60	; 0x3c
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2284      	movs	r2, #132	; 0x84
 8000af4:	701a      	strb	r2, [r3, #0]
	srcBuff[1]=  0x20; // try 0x33
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2220      	movs	r2, #32
 8000afa:	705a      	strb	r2, [r3, #1]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //slave select low
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	0119      	lsls	r1, r3, #4
 8000b00:	23a0      	movs	r3, #160	; 0xa0
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2200      	movs	r2, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 f8fe 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&srcBuff, 2, HAL_MAX_DELAY); //setup register
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	1939      	adds	r1, r7, r4
 8000b12:	4886      	ldr	r0, [pc, #536]	; (8000d2c <cam_pic+0x25c>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	f002 ff30 	bl	800397a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //slave select high
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	0119      	lsls	r1, r3, #4
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	2201      	movs	r2, #1
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 f8ef 	bl	8001d08 <HAL_GPIO_WritePin>


	srcBuff[1]=  0x10;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //slave select low
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	0119      	lsls	r1, r3, #4
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 f8e4 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&srcBuff, 2, HAL_MAX_DELAY); //setup register
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	1939      	adds	r1, r7, r4
 8000b46:	4879      	ldr	r0, [pc, #484]	; (8000d2c <cam_pic+0x25c>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	f002 ff16 	bl	800397a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //slave select high
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	0119      	lsls	r1, r3, #4
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	2201      	movs	r2, #1
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 f8d5 	bl	8001d08 <HAL_GPIO_WritePin>



	srcBuff[1] = 0x02;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2202      	movs	r2, #2
 8000b62:	705a      	strb	r2, [r3, #1]

	//first capture
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //slave select low
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	0119      	lsls	r1, r3, #4
 8000b68:	23a0      	movs	r3, #160	; 0xa0
 8000b6a:	05db      	lsls	r3, r3, #23
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f001 f8ca 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&srcBuff, 2, HAL_MAX_DELAY); //start the camera capture
 8000b74:	2301      	movs	r3, #1
 8000b76:	425b      	negs	r3, r3
 8000b78:	1939      	adds	r1, r7, r4
 8000b7a:	486c      	ldr	r0, [pc, #432]	; (8000d2c <cam_pic+0x25c>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	f002 fefc 	bl	800397a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //slave select high
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	0119      	lsls	r1, r3, #4
 8000b86:	23a0      	movs	r3, #160	; 0xa0
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 f8bb 	bl	8001d08 <HAL_GPIO_WritePin>


	readysend=0x41;
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	2241      	movs	r2, #65	; 0x41
 8000b96:	701a      	strb	r2, [r3, #0]

	do{
		HAL_Delay(10);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f000 fe6f 	bl	800187c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //slave select low
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	0119      	lsls	r1, r3, #4
 8000ba2:	23a0      	movs	r3, #160	; 0xa0
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 f8ad 	bl	8001d08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&readysend, 1, HAL_MAX_DELAY);
 8000bae:	2301      	movs	r3, #1
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	1df9      	adds	r1, r7, #7
 8000bb4:	485d      	ldr	r0, [pc, #372]	; (8000d2c <cam_pic+0x25c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f002 fedf 	bl	800397a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1,&readyrec, 1, HAL_MAX_DELAY);
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	1db9      	adds	r1, r7, #6
 8000bc2:	485a      	ldr	r0, [pc, #360]	; (8000d2c <cam_pic+0x25c>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f003 f82f 	bl	8003c28 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //slave select high
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	0119      	lsls	r1, r3, #4
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 f897 	bl	8001d08 <HAL_GPIO_WritePin>
	}while((readyrec & 0x08) == 0);
 8000bda:	1dbb      	adds	r3, r7, #6
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001a      	movs	r2, r3
 8000be0:	2308      	movs	r3, #8
 8000be2:	4013      	ands	r3, r2
 8000be4:	d0d8      	beq.n	8000b98 <cam_pic+0xc8>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //slave select high
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	0119      	lsls	r1, r3, #4
 8000bea:	23a0      	movs	r3, #160	; 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2201      	movs	r2, #1
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 f889 	bl	8001d08 <HAL_GPIO_WritePin>

	uart_buf_len_cam = sprintf(uart_buf_cam, "Picture taken!\n");
 8000bf6:	4a4e      	ldr	r2, [pc, #312]	; (8000d30 <cam_pic+0x260>)
 8000bf8:	2408      	movs	r4, #8
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f004 fa58 	bl	80050b4 <siprintf>
 8000c04:	0003      	movs	r3, r0
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
	printToMonitor((uint8_t *)&uart_buf_cam, uart_buf_len_cam);
 8000c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fcb9 	bl	8000588 <printToMonitor>

	srcTestBuff = 0x3C;
 8000c16:	1d7b      	adds	r3, r7, #5
 8000c18:	223c      	movs	r2, #60	; 0x3c
 8000c1a:	701a      	strb	r2, [r3, #0]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //slave select low
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	0119      	lsls	r1, r3, #4
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	2200      	movs	r2, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 f86e 	bl	8001d08 <HAL_GPIO_WritePin>


	HAL_SPI_Transmit(&hspi1,&srcTestBuff, 1, HAL_MAX_DELAY);
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	425b      	negs	r3, r3
 8000c30:	1d79      	adds	r1, r7, #5
 8000c32:	483e      	ldr	r0, [pc, #248]	; (8000d2c <cam_pic+0x25c>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	f002 fea0 	bl	800397a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &high, 1, HAL_MAX_DELAY); //dummy bit
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	1d39      	adds	r1, r7, #4
 8000c40:	483a      	ldr	r0, [pc, #232]	; (8000d2c <cam_pic+0x25c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	f002 fff0 	bl	8003c28 <HAL_SPI_Receive>

	HAL_UART_Transmit(&hlpuart1,(uint8_t *) "IMG", 3,HAL_MAX_DELAY);
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	4939      	ldr	r1, [pc, #228]	; (8000d34 <cam_pic+0x264>)
 8000c4e:	483a      	ldr	r0, [pc, #232]	; (8000d38 <cam_pic+0x268>)
 8000c50:	2203      	movs	r2, #3
 8000c52:	f003 fc5d 	bl	8004510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1,(uint8_t *) &cover, 1,HAL_MAX_DELAY);
 8000c56:	2301      	movs	r3, #1
 8000c58:	425b      	negs	r3, r3
 8000c5a:	1cb9      	adds	r1, r7, #2
 8000c5c:	4836      	ldr	r0, [pc, #216]	; (8000d38 <cam_pic+0x268>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f003 fc56 	bl	8004510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1,(uint8_t *) &cover, 1,HAL_MAX_DELAY);
 8000c64:	2301      	movs	r3, #1
 8000c66:	425b      	negs	r3, r3
 8000c68:	1cb9      	adds	r1, r7, #2
 8000c6a:	4833      	ldr	r0, [pc, #204]	; (8000d38 <cam_pic+0x268>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f003 fc4f 	bl	8004510 <HAL_UART_Transmit>

	for(uint8_t t = 0; t < 240; t++){
 8000c72:	2347      	movs	r3, #71	; 0x47
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e045      	b.n	8000d08 <cam_pic+0x238>
			for(uint16_t v = 0; v < 320; v++){
 8000c7c:	2344      	movs	r3, #68	; 0x44
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	801a      	strh	r2, [r3, #0]
 8000c84:	e033      	b.n	8000cee <cam_pic+0x21e>

				HAL_SPI_Receive(&hspi1, &high, 1, HAL_MAX_DELAY);
 8000c86:	2301      	movs	r3, #1
 8000c88:	425b      	negs	r3, r3
 8000c8a:	1d39      	adds	r1, r7, #4
 8000c8c:	4827      	ldr	r0, [pc, #156]	; (8000d2c <cam_pic+0x25c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f002 ffca 	bl	8003c28 <HAL_SPI_Receive>
				HAL_SPI_Receive(&hspi1, &low, 1, HAL_MAX_DELAY);
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	1cf9      	adds	r1, r7, #3
 8000c9a:	4824      	ldr	r0, [pc, #144]	; (8000d2c <cam_pic+0x25c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f002 ffc3 	bl	8003c28 <HAL_SPI_Receive>

				if((t >= 40 && t < 200) && (v >= 100 && v < 220)){
 8000ca2:	2247      	movs	r2, #71	; 0x47
 8000ca4:	18bb      	adds	r3, r7, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b27      	cmp	r3, #39	; 0x27
 8000caa:	d91a      	bls.n	8000ce2 <cam_pic+0x212>
 8000cac:	18bb      	adds	r3, r7, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2bc7      	cmp	r3, #199	; 0xc7
 8000cb2:	d816      	bhi.n	8000ce2 <cam_pic+0x212>
 8000cb4:	2244      	movs	r2, #68	; 0x44
 8000cb6:	18bb      	adds	r3, r7, r2
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	2b63      	cmp	r3, #99	; 0x63
 8000cbc:	d911      	bls.n	8000ce2 <cam_pic+0x212>
 8000cbe:	18bb      	adds	r3, r7, r2
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	2bdb      	cmp	r3, #219	; 0xdb
 8000cc4:	d80d      	bhi.n	8000ce2 <cam_pic+0x212>

					HAL_UART_Transmit(&hlpuart1,&low, 1,HAL_MAX_DELAY);
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	425b      	negs	r3, r3
 8000cca:	1cf9      	adds	r1, r7, #3
 8000ccc:	481a      	ldr	r0, [pc, #104]	; (8000d38 <cam_pic+0x268>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f003 fc1e 	bl	8004510 <HAL_UART_Transmit>
					HAL_UART_Transmit(&hlpuart1,&high, 1,HAL_MAX_DELAY);
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	1d39      	adds	r1, r7, #4
 8000cda:	4817      	ldr	r0, [pc, #92]	; (8000d38 <cam_pic+0x268>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f003 fc17 	bl	8004510 <HAL_UART_Transmit>
			for(uint16_t v = 0; v < 320; v++){
 8000ce2:	2144      	movs	r1, #68	; 0x44
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	3201      	adds	r2, #1
 8000cec:	801a      	strh	r2, [r3, #0]
 8000cee:	2344      	movs	r3, #68	; 0x44
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	881a      	ldrh	r2, [r3, #0]
 8000cf4:	23a0      	movs	r3, #160	; 0xa0
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3c4      	bcc.n	8000c86 <cam_pic+0x1b6>
	for(uint8_t t = 0; t < 240; t++){
 8000cfc:	2147      	movs	r1, #71	; 0x47
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	3201      	adds	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	2347      	movs	r3, #71	; 0x47
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2bef      	cmp	r3, #239	; 0xef
 8000d10:	d9b4      	bls.n	8000c7c <cam_pic+0x1ac>

				}
			}
		}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //slave select high
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	0119      	lsls	r1, r3, #4
 8000d16:	23a0      	movs	r3, #160	; 0xa0
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fff3 	bl	8001d08 <HAL_GPIO_WritePin>
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b013      	add	sp, #76	; 0x4c
 8000d28:	bd90      	pop	{r4, r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	200001e0 	.word	0x200001e0
 8000d30:	080059b0 	.word	0x080059b0
 8000d34:	080059c0 	.word	0x080059c0
 8000d38:	200000d8 	.word	0x200000d8

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	b0b3      	sub	sp, #204	; 0xcc
 8000d40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f000 fd2b 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 f9f5 	bl	8001134 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 fb3b 	bl	80013c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d4e:	f000 fa63 	bl	8001218 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000d52:	f000 faa1 	bl	8001298 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 facd 	bl	80012f4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000d5a:	f000 fafb 	bl	8001354 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t didntwork[4] = "FAIL\n";
 8000d5e:	2318      	movs	r3, #24
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	4ae5      	ldr	r2, [pc, #916]	; (80010f8 <main+0x3bc>)
 8000d64:	601a      	str	r2, [r3, #0]
  uint8_t invalidInput[13] = "Invalid input";
 8000d66:	2308      	movs	r3, #8
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	4ae4      	ldr	r2, [pc, #912]	; (80010fc <main+0x3c0>)
 8000d6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d6e:	c313      	stmia	r3!, {r0, r1, r4}
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef checker;

  uint8_t ramBuff = 0;
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
  uint8_t ramCheck;



  //we need to initalize the slave select pins here
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);//slave select 2
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	0159      	lsls	r1, r3, #5
 8000d7e:	23a0      	movs	r3, #160	; 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	2201      	movs	r2, #1
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 ffbf 	bl	8001d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);//slave select 1
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	0119      	lsls	r1, r3, #4
 8000d8e:	23a0      	movs	r3, #160	; 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	2201      	movs	r2, #1
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 ffb7 	bl	8001d08 <HAL_GPIO_WritePin>


  checker = sensor_init();
 8000d9a:	25bf      	movs	r5, #191	; 0xbf
 8000d9c:	197c      	adds	r4, r7, r5
 8000d9e:	f7ff fc31 	bl	8000604 <sensor_init>
 8000da2:	0003      	movs	r3, r0
 8000da4:	7023      	strb	r3, [r4, #0]
  if(checker != HAL_OK){
 8000da6:	197b      	adds	r3, r7, r5
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d012      	beq.n	8000dd4 <main+0x98>
 	  uart_buf_len = sprintf(uart_buf, "sensor init didnt work\n");
 8000dae:	4ad4      	ldr	r2, [pc, #848]	; (8001100 <main+0x3c4>)
 8000db0:	241c      	movs	r4, #28
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f004 f97c 	bl	80050b4 <siprintf>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	22b8      	movs	r2, #184	; 0xb8
 8000dc0:	18b9      	adds	r1, r7, r2
 8000dc2:	600b      	str	r3, [r1, #0]
 	  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000dc4:	18bb      	adds	r3, r7, r2
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fbda 	bl	8000588 <printToMonitor>
   }

  ram_init();
 8000dd4:	f7ff fd42 	bl	800085c <ram_init>

  checker = cam_config();
 8000dd8:	25bf      	movs	r5, #191	; 0xbf
 8000dda:	197c      	adds	r4, r7, r5
 8000ddc:	f7ff fdf6 	bl	80009cc <cam_config>
 8000de0:	0003      	movs	r3, r0
 8000de2:	7023      	strb	r3, [r4, #0]
  if(checker != HAL_OK){
 8000de4:	197b      	adds	r3, r7, r5
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d012      	beq.n	8000e12 <main+0xd6>
	  uart_buf_len = sprintf(uart_buf, "cam config didnt work\n");
 8000dec:	4ac5      	ldr	r2, [pc, #788]	; (8001104 <main+0x3c8>)
 8000dee:	241c      	movs	r4, #28
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f004 f95d 	bl	80050b4 <siprintf>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	22b8      	movs	r2, #184	; 0xb8
 8000dfe:	18b9      	adds	r1, r7, r2
 8000e00:	600b      	str	r3, [r1, #0]
	  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000e02:	18bb      	adds	r3, r7, r2
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fbbb 	bl	8000588 <printToMonitor>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 //*****************************************************************************************
	  uart_buf_len = sprintf(uart_buf,
 8000e12:	4abd      	ldr	r2, [pc, #756]	; (8001108 <main+0x3cc>)
 8000e14:	251c      	movs	r5, #28
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	0011      	movs	r1, r2
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f004 f94a 	bl	80050b4 <siprintf>
 8000e20:	0003      	movs	r3, r0
 8000e22:	26b8      	movs	r6, #184	; 0xb8
 8000e24:	19ba      	adds	r2, r7, r6
 8000e26:	6013      	str	r3, [r2, #0]
			  "Hello World!\nCAM for picture from camera\nGPS for Coordinates\nSEN for Proximity Sensor\nRAM for a ram check\n");

	  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000e28:	19bb      	adds	r3, r7, r6
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	0011      	movs	r1, r2
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fba8 	bl	8000588 <printToMonitor>

	  uint8_t response[4] = {0,0,0,0}; //check with board
 8000e38:	003b      	movs	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]

	  HAL_UART_Receive(&huart2, (uint8_t *)&response, sizeof(response), HAL_MAX_DELAY);
 8000e3e:	2301      	movs	r3, #1
 8000e40:	425b      	negs	r3, r3
 8000e42:	0039      	movs	r1, r7
 8000e44:	48b1      	ldr	r0, [pc, #708]	; (800110c <main+0x3d0>)
 8000e46:	2204      	movs	r2, #4
 8000e48:	f003 fc0a 	bl	8004660 <HAL_UART_Receive>

	  uart_buf_len = sprintf(uart_buf,
	 			  "%c%c%c\r\n",response[0],response[1],response[2]);
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
	  uart_buf_len = sprintf(uart_buf,
 8000e50:	001a      	movs	r2, r3
	 			  "%c%c%c\r\n",response[0],response[1],response[2]);
 8000e52:	003b      	movs	r3, r7
 8000e54:	785b      	ldrb	r3, [r3, #1]
	  uart_buf_len = sprintf(uart_buf,
 8000e56:	001c      	movs	r4, r3
	 			  "%c%c%c\r\n",response[0],response[1],response[2]);
 8000e58:	003b      	movs	r3, r7
 8000e5a:	789b      	ldrb	r3, [r3, #2]
	  uart_buf_len = sprintf(uart_buf,
 8000e5c:	49ac      	ldr	r1, [pc, #688]	; (8001110 <main+0x3d4>)
 8000e5e:	1978      	adds	r0, r7, r5
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	0023      	movs	r3, r4
 8000e64:	f004 f926 	bl	80050b4 <siprintf>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	19ba      	adds	r2, r7, r6
 8000e6c:	6013      	str	r3, [r2, #0]

	  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000e6e:	19bb      	adds	r3, r7, r6
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	197b      	adds	r3, r7, r5
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff fb85 	bl	8000588 <printToMonitor>



	  if(response[0] == 'G' && response[1] == 'P' && response[2] == 'S'){
 8000e7e:	003b      	movs	r3, r7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b47      	cmp	r3, #71	; 0x47
 8000e84:	d11b      	bne.n	8000ebe <main+0x182>
 8000e86:	003b      	movs	r3, r7
 8000e88:	785b      	ldrb	r3, [r3, #1]
 8000e8a:	2b50      	cmp	r3, #80	; 0x50
 8000e8c:	d117      	bne.n	8000ebe <main+0x182>
 8000e8e:	003b      	movs	r3, r7
 8000e90:	789b      	ldrb	r3, [r3, #2]
 8000e92:	2b53      	cmp	r3, #83	; 0x53
 8000e94:	d113      	bne.n	8000ebe <main+0x182>
		  checker = getGpsData();
 8000e96:	25bf      	movs	r5, #191	; 0xbf
 8000e98:	197c      	adds	r4, r7, r5
 8000e9a:	f7ff fc85 	bl	80007a8 <getGpsData>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	7023      	strb	r3, [r4, #0]
	 	  if (checker != HAL_OK){
 8000ea2:	197b      	adds	r3, r7, r5
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <main+0x170>
 8000eaa:	e123      	b.n	80010f4 <main+0x3b8>
	 		  HAL_UART_Transmit(&huart2,didntwork,sizeof(didntwork),HAL_MAX_DELAY);
 8000eac:	2301      	movs	r3, #1
 8000eae:	425b      	negs	r3, r3
 8000eb0:	2218      	movs	r2, #24
 8000eb2:	18b9      	adds	r1, r7, r2
 8000eb4:	4895      	ldr	r0, [pc, #596]	; (800110c <main+0x3d0>)
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	f003 fb2a 	bl	8004510 <HAL_UART_Transmit>
	 	  if (checker != HAL_OK){
 8000ebc:	e11a      	b.n	80010f4 <main+0x3b8>
	 	  }
	  }
	  else if(response[0] == 'C' && response[1] == 'A' && response[2] == 'M'){
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b43      	cmp	r3, #67	; 0x43
 8000ec4:	d14c      	bne.n	8000f60 <main+0x224>
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	2b41      	cmp	r3, #65	; 0x41
 8000ecc:	d148      	bne.n	8000f60 <main+0x224>
 8000ece:	003b      	movs	r3, r7
 8000ed0:	789b      	ldrb	r3, [r3, #2]
 8000ed2:	2b4d      	cmp	r3, #77	; 0x4d
 8000ed4:	d144      	bne.n	8000f60 <main+0x224>


		  uart_buf_len = sprintf(uart_buf, "Say Cheese!\n");
 8000ed6:	4a8f      	ldr	r2, [pc, #572]	; (8001114 <main+0x3d8>)
 8000ed8:	241c      	movs	r4, #28
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f004 f8e8 	bl	80050b4 <siprintf>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	22b8      	movs	r2, #184	; 0xb8
 8000ee8:	18b9      	adds	r1, r7, r2
 8000eea:	600b      	str	r3, [r1, #0]
		  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000eec:	18bb      	adds	r3, r7, r2
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff fb46 	bl	8000588 <printToMonitor>


		  do{
			  espbuff = esp_rx();
 8000efc:	26b7      	movs	r6, #183	; 0xb7
 8000efe:	19bc      	adds	r4, r7, r6
 8000f00:	f7ff fdd4 	bl	8000aac <esp_rx>
 8000f04:	0003      	movs	r3, r0
 8000f06:	7023      	strb	r3, [r4, #0]

			  uart_buf_len = sprintf(uart_buf,
 8000f08:	19bb      	adds	r3, r7, r6
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	4982      	ldr	r1, [pc, #520]	; (8001118 <main+0x3dc>)
 8000f0e:	241c      	movs	r4, #28
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	0018      	movs	r0, r3
 8000f14:	f004 f8ce 	bl	80050b4 <siprintf>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	25b8      	movs	r5, #184	; 0xb8
 8000f1c:	197a      	adds	r2, r7, r5
 8000f1e:	6013      	str	r3, [r2, #0]
								  "value we are getting from esp: %c\n", espbuff);
					  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000f20:	197b      	adds	r3, r7, r5
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff fb2c 	bl	8000588 <printToMonitor>


		  }while(espbuff != 'R');
 8000f30:	19bb      	adds	r3, r7, r6
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b52      	cmp	r3, #82	; 0x52
 8000f36:	d1e1      	bne.n	8000efc <main+0x1c0>


		  cam_pic();
 8000f38:	f7ff fdca 	bl	8000ad0 <cam_pic>


		  uart_buf_len = sprintf(uart_buf,
 8000f3c:	4a77      	ldr	r2, [pc, #476]	; (800111c <main+0x3e0>)
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f004 f8b6 	bl	80050b4 <siprintf>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	197a      	adds	r2, r7, r5
 8000f4c:	6013      	str	r3, [r2, #0]
						  "transmitted!\n");
			  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000f4e:	197b      	adds	r3, r7, r5
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff fb15 	bl	8000588 <printToMonitor>
 8000f5e:	e0c9      	b.n	80010f4 <main+0x3b8>

		}
	  else if(response[0] == 'S' && response[1] == 'E' && response[2] == 'N'){
 8000f60:	003b      	movs	r3, r7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b53      	cmp	r3, #83	; 0x53
 8000f66:	d124      	bne.n	8000fb2 <main+0x276>
 8000f68:	003b      	movs	r3, r7
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	2b45      	cmp	r3, #69	; 0x45
 8000f6e:	d120      	bne.n	8000fb2 <main+0x276>
 8000f70:	003b      	movs	r3, r7
 8000f72:	789b      	ldrb	r3, [r3, #2]
 8000f74:	2b4e      	cmp	r3, #78	; 0x4e
 8000f76:	d11c      	bne.n	8000fb2 <main+0x276>


		  while(1){

			  getSensorValue(&sensorValue);
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff fb86 	bl	800068c <getSensorValue>

			  uart_buf_len = sprintf(uart_buf,
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	001a      	movs	r2, r3
 8000f86:	4966      	ldr	r1, [pc, #408]	; (8001120 <main+0x3e4>)
 8000f88:	241c      	movs	r4, #28
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f004 f891 	bl	80050b4 <siprintf>
 8000f92:	0003      	movs	r3, r0
 8000f94:	22b8      	movs	r2, #184	; 0xb8
 8000f96:	18b9      	adds	r1, r7, r2
 8000f98:	600b      	str	r3, [r1, #0]
			  						  "Value from sensor: 0x%x\n", sensorValue);
			  			  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000f9a:	18bb      	adds	r3, r7, r2
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff faef 	bl	8000588 <printToMonitor>

			  HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	; 0x64
 8000fac:	f000 fc66 	bl	800187c <HAL_Delay>
			  getSensorValue(&sensorValue);
 8000fb0:	e7e2      	b.n	8000f78 <main+0x23c>



	  }

	  else if(response[0] == 'R' && response[1] == 'A' && response[2] == 'M'){
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b52      	cmp	r3, #82	; 0x52
 8000fb8:	d000      	beq.n	8000fbc <main+0x280>
 8000fba:	e093      	b.n	80010e4 <main+0x3a8>
 8000fbc:	003b      	movs	r3, r7
 8000fbe:	785b      	ldrb	r3, [r3, #1]
 8000fc0:	2b41      	cmp	r3, #65	; 0x41
 8000fc2:	d000      	beq.n	8000fc6 <main+0x28a>
 8000fc4:	e08e      	b.n	80010e4 <main+0x3a8>
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	2b4d      	cmp	r3, #77	; 0x4d
 8000fcc:	d000      	beq.n	8000fd0 <main+0x294>
 8000fce:	e089      	b.n	80010e4 <main+0x3a8>

		  response[4] = 0;
 8000fd0:	003b      	movs	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	711a      	strb	r2, [r3, #4]

		  uart_buf_len = sprintf(uart_buf,"Input 2 hex value to check ram with:\n");
 8000fd6:	4a53      	ldr	r2, [pc, #332]	; (8001124 <main+0x3e8>)
 8000fd8:	241c      	movs	r4, #28
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f004 f868 	bl	80050b4 <siprintf>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	25b8      	movs	r5, #184	; 0xb8
 8000fe8:	197a      	adds	r2, r7, r5
 8000fea:	6013      	str	r3, [r2, #0]
		 			  			  printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 8000fec:	197b      	adds	r3, r7, r5
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff fac6 	bl	8000588 <printToMonitor>

		 HAL_UART_Receive(&huart2, (uint8_t *)&response, 3, HAL_MAX_DELAY);
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	425b      	negs	r3, r3
 8001000:	0039      	movs	r1, r7
 8001002:	4842      	ldr	r0, [pc, #264]	; (800110c <main+0x3d0>)
 8001004:	2203      	movs	r2, #3
 8001006:	f003 fb2b 	bl	8004660 <HAL_UART_Receive>

		 high = charToHex(response[0]);
 800100a:	003b      	movs	r3, r7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff fa54 	bl	80004bc <charToHex>
 8001014:	0002      	movs	r2, r0
 8001016:	26b6      	movs	r6, #182	; 0xb6
 8001018:	19bb      	adds	r3, r7, r6
 800101a:	701a      	strb	r2, [r3, #0]
		 low = charToHex(response[1]);
 800101c:	003b      	movs	r3, r7
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fa4b 	bl	80004bc <charToHex>
 8001026:	0002      	movs	r2, r0
 8001028:	21b5      	movs	r1, #181	; 0xb5
 800102a:	187b      	adds	r3, r7, r1
 800102c:	701a      	strb	r2, [r3, #0]

		 ramCheck = (high << 4) | (low) ;
 800102e:	19bb      	adds	r3, r7, r6
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	b25a      	sxtb	r2, r3
 8001036:	187b      	adds	r3, r7, r1
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b25a      	sxtb	r2, r3
 8001040:	26b4      	movs	r6, #180	; 0xb4
 8001042:	19bb      	adds	r3, r7, r6
 8001044:	701a      	strb	r2, [r3, #0]

		 uart_buf_len = sprintf(uart_buf,"Your input 0x%x\n", ramCheck);
 8001046:	19bb      	adds	r3, r7, r6
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	4937      	ldr	r1, [pc, #220]	; (8001128 <main+0x3ec>)
 800104c:	193b      	adds	r3, r7, r4
 800104e:	0018      	movs	r0, r3
 8001050:	f004 f830 	bl	80050b4 <siprintf>
 8001054:	0003      	movs	r3, r0
 8001056:	197a      	adds	r2, r7, r5
 8001058:	6013      	str	r3, [r2, #0]
		printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 800105a:	197b      	adds	r3, r7, r5
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	193b      	adds	r3, r7, r4
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff fa8f 	bl	8000588 <printToMonitor>



		ram_write_split(0x10,0xFF,0xFF, ramCheck);
 800106a:	19bb      	adds	r3, r7, r6
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	22ff      	movs	r2, #255	; 0xff
 8001070:	21ff      	movs	r1, #255	; 0xff
 8001072:	2010      	movs	r0, #16
 8001074:	f7ff fc1a 	bl	80008ac <ram_write_split>

		ramBuff = 0;
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]

		ram_read_split(0x10,0xFF,0xFF,&ramBuff);
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	22ff      	movs	r2, #255	; 0xff
 8001082:	21ff      	movs	r1, #255	; 0xff
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff fc55 	bl	8000934 <ram_read_split>

		if(ramBuff != ramCheck){
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	19ba      	adds	r2, r7, r6
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d010      	beq.n	80010b8 <main+0x37c>
			uart_buf_len = sprintf(uart_buf,"Ram Check Failed\n");
 8001096:	4a25      	ldr	r2, [pc, #148]	; (800112c <main+0x3f0>)
 8001098:	193b      	adds	r3, r7, r4
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f004 f809 	bl	80050b4 <siprintf>
 80010a2:	0003      	movs	r3, r0
 80010a4:	197a      	adds	r2, r7, r5
 80010a6:	6013      	str	r3, [r2, #0]
					printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 80010a8:	197b      	adds	r3, r7, r5
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff fa68 	bl	8000588 <printToMonitor>

		}

		uart_buf_len = sprintf(uart_buf,"Value in address 0x%x\n", ramBuff);
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	001a      	movs	r2, r3
 80010be:	491c      	ldr	r1, [pc, #112]	; (8001130 <main+0x3f4>)
 80010c0:	241c      	movs	r4, #28
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	0018      	movs	r0, r3
 80010c6:	f003 fff5 	bl	80050b4 <siprintf>
 80010ca:	0003      	movs	r3, r0
 80010cc:	22b8      	movs	r2, #184	; 0xb8
 80010ce:	18b9      	adds	r1, r7, r2
 80010d0:	600b      	str	r3, [r1, #0]
		printToMonitor((uint8_t *)&uart_buf, uart_buf_len);
 80010d2:	18bb      	adds	r3, r7, r2
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	0011      	movs	r1, r2
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff fa53 	bl	8000588 <printToMonitor>
 80010e2:	e007      	b.n	80010f4 <main+0x3b8>

	  }


	  else{
		  HAL_UART_Transmit(&huart2,invalidInput,sizeof(invalidInput),HAL_MAX_DELAY);
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2208      	movs	r2, #8
 80010ea:	18b9      	adds	r1, r7, r2
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <main+0x3d0>)
 80010ee:	220d      	movs	r2, #13
 80010f0:	f003 fa0e 	bl	8004510 <HAL_UART_Transmit>
  {
 80010f4:	e68d      	b.n	8000e12 <main+0xd6>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	4c494146 	.word	0x4c494146
 80010fc:	08005b34 	.word	0x08005b34
 8001100:	080059c4 	.word	0x080059c4
 8001104:	080059dc 	.word	0x080059dc
 8001108:	080059f4 	.word	0x080059f4
 800110c:	2000015c 	.word	0x2000015c
 8001110:	08005a60 	.word	0x08005a60
 8001114:	08005a6c 	.word	0x08005a6c
 8001118:	08005a7c 	.word	0x08005a7c
 800111c:	08005aa0 	.word	0x08005aa0
 8001120:	08005ab0 	.word	0x08005ab0
 8001124:	08005acc 	.word	0x08005acc
 8001128:	08005af4 	.word	0x08005af4
 800112c:	08005b08 	.word	0x08005b08
 8001130:	08005b1c 	.word	0x08005b1c

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b099      	sub	sp, #100	; 0x64
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	242c      	movs	r4, #44	; 0x2c
 800113c:	193b      	adds	r3, r7, r4
 800113e:	0018      	movs	r0, r3
 8001140:	2334      	movs	r3, #52	; 0x34
 8001142:	001a      	movs	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f003 ffad 	bl	80050a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114a:	2318      	movs	r3, #24
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	0018      	movs	r0, r3
 8001150:	2314      	movs	r3, #20
 8001152:	001a      	movs	r2, r3
 8001154:	2100      	movs	r1, #0
 8001156:	f003 ffa5 	bl	80050a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115a:	003b      	movs	r3, r7
 800115c:	0018      	movs	r0, r3
 800115e:	2318      	movs	r3, #24
 8001160:	001a      	movs	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	f003 ff9e 	bl	80050a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <SystemClock_Config+0xdc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a29      	ldr	r2, [pc, #164]	; (8001214 <SystemClock_Config+0xe0>)
 800116e:	401a      	ands	r2, r3
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <SystemClock_Config+0xdc>)
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	0109      	lsls	r1, r1, #4
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800117a:	0021      	movs	r1, r4
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2210      	movs	r2, #16
 8001180:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2201      	movs	r2, #1
 8001186:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	22a0      	movs	r2, #160	; 0xa0
 8001192:	0212      	lsls	r2, r2, #8
 8001194:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	187b      	adds	r3, r7, r1
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 fc9c 	bl	8002adc <HAL_RCC_OscConfig>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011a8:	f000 f962 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ac:	2118      	movs	r1, #24
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	220f      	movs	r2, #15
 80011b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2100      	movs	r1, #0
 80011d0:	0018      	movs	r0, r3
 80011d2:	f001 ffff 	bl	80031d4 <HAL_RCC_ClockConfig>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011da:	f000 f949 	bl	8001470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 80011de:	003b      	movs	r3, r7
 80011e0:	220e      	movs	r2, #14
 80011e2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e4:	003b      	movs	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011ea:	003b      	movs	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f0:	003b      	movs	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f6:	003b      	movs	r3, r7
 80011f8:	0018      	movs	r0, r3
 80011fa:	f002 fa0f 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001202:	f000 f935 	bl	8001470 <Error_Handler>
  }
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b019      	add	sp, #100	; 0x64
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40007000 	.word	0x40007000
 8001214:	ffffe7ff 	.word	0xffffe7ff

08001218 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_I2C1_Init+0x78>)
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <MX_I2C1_Init+0x7c>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_I2C1_Init+0x78>)
 8001224:	22e1      	movs	r2, #225	; 0xe1
 8001226:	00d2      	lsls	r2, r2, #3
 8001228:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_I2C1_Init+0x78>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_I2C1_Init+0x78>)
 8001232:	2201      	movs	r2, #1
 8001234:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_I2C1_Init+0x78>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_I2C1_Init+0x78>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_I2C1_Init+0x78>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_I2C1_Init+0x78>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_I2C1_Init+0x78>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_I2C1_Init+0x78>)
 8001256:	0018      	movs	r0, r3
 8001258:	f000 fd74 	bl	8001d44 <HAL_I2C_Init>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001260:	f000 f906 	bl	8001470 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_I2C1_Init+0x78>)
 8001266:	2100      	movs	r1, #0
 8001268:	0018      	movs	r0, r3
 800126a:	f001 fb9f 	bl	80029ac <HAL_I2CEx_ConfigAnalogFilter>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001272:	f000 f8fd 	bl	8001470 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_I2C1_Init+0x78>)
 8001278:	2100      	movs	r1, #0
 800127a:	0018      	movs	r0, r3
 800127c:	f001 fbe2 	bl	8002a44 <HAL_I2CEx_ConfigDigitalFilter>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001284:	f000 f8f4 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	2000008c 	.word	0x2000008c
 8001294:	40005400 	.word	0x40005400

08001298 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <MX_LPUART1_UART_Init+0x58>)
 80012a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012a4:	22e1      	movs	r2, #225	; 0xe1
 80012a6:	0252      	lsls	r2, r2, #9
 80012a8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <MX_LPUART1_UART_Init+0x54>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f003 f8c6 	bl	8004468 <HAL_UART_Init>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d001      	beq.n	80012e4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80012e0:	f000 f8c6 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	200000d8 	.word	0x200000d8
 80012f0:	40004800 	.word	0x40004800

080012f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USART2_UART_Init+0x58>)
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <MX_USART2_UART_Init+0x5c>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART2_UART_Init+0x58>)
 8001300:	22e1      	movs	r2, #225	; 0xe1
 8001302:	0252      	lsls	r2, r2, #9
 8001304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_USART2_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART2_UART_Init+0x58>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART2_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART2_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART2_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <MX_USART2_UART_Init+0x58>)
 8001338:	0018      	movs	r0, r3
 800133a:	f003 f895 	bl	8004468 <HAL_UART_Init>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001342:	f000 f895 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000015c 	.word	0x2000015c
 8001350:	40004400 	.word	0x40004400

08001354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_SPI1_Init+0x68>)
 800135a:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <MX_SPI1_Init+0x6c>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_SPI1_Init+0x68>)
 8001360:	2282      	movs	r2, #130	; 0x82
 8001362:	0052      	lsls	r2, r2, #1
 8001364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_SPI1_Init+0x68>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_SPI1_Init+0x68>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_SPI1_Init+0x68>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_SPI1_Init+0x68>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_SPI1_Init+0x68>)
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_SPI1_Init+0x68>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_SPI1_Init+0x68>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_SPI1_Init+0x68>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_SPI1_Init+0x68>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_SPI1_Init+0x68>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <MX_SPI1_Init+0x68>)
 80013a6:	0018      	movs	r0, r3
 80013a8:	f002 fa5e 	bl	8003868 <HAL_SPI_Init>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013b0:	f000 f85e 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	200001e0 	.word	0x200001e0
 80013c0:	40013000 	.word	0x40013000

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	240c      	movs	r4, #12
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	0018      	movs	r0, r3
 80013d0:	2314      	movs	r3, #20
 80013d2:	001a      	movs	r2, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	f003 fe65 	bl	80050a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <MX_GPIO_Init+0xa4>)
 80013dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_GPIO_Init+0xa4>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	430a      	orrs	r2, r1
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <MX_GPIO_Init+0xa4>)
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	2201      	movs	r2, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_GPIO_Init+0xa4>)
 80013f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_GPIO_Init+0xa4>)
 80013f8:	2102      	movs	r1, #2
 80013fa:	430a      	orrs	r2, r1
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_GPIO_Init+0xa4>)
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_SS1_Pin|SPI1_SS2_Pin, GPIO_PIN_RESET);
 800140a:	23c0      	movs	r3, #192	; 0xc0
 800140c:	0159      	lsls	r1, r3, #5
 800140e:	23a0      	movs	r3, #160	; 0xa0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	2200      	movs	r2, #0
 8001414:	0018      	movs	r0, r3
 8001416:	f000 fc77 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_SS1_Pin SPI1_SS2_Pin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin|SPI1_SS2_Pin;
 800141a:	193b      	adds	r3, r7, r4
 800141c:	22c0      	movs	r2, #192	; 0xc0
 800141e:	0152      	lsls	r2, r2, #5
 8001420:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	193b      	adds	r3, r7, r4
 8001424:	2201      	movs	r2, #1
 8001426:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	193a      	adds	r2, r7, r4
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f000 faf5 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001442:	193b      	adds	r3, r7, r4
 8001444:	2220      	movs	r2, #32
 8001446:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	193b      	adds	r3, r7, r4
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	193b      	adds	r3, r7, r4
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001454:	193b      	adds	r3, r7, r4
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <MX_GPIO_Init+0xa8>)
 8001458:	0019      	movs	r1, r3
 800145a:	0010      	movs	r0, r2
 800145c:	f000 fae6 	bl	8001a2c <HAL_GPIO_Init>

}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b009      	add	sp, #36	; 0x24
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	50000400 	.word	0x50000400

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_MspInit+0x24>)
 8001482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_MspInit+0x24>)
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_MspInit+0x24>)
 800148e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_MspInit+0x24>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0549      	lsls	r1, r1, #21
 8001496:	430a      	orrs	r2, r1
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	240c      	movs	r4, #12
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	0018      	movs	r0, r3
 80014b2:	2314      	movs	r3, #20
 80014b4:	001a      	movs	r2, r3
 80014b6:	2100      	movs	r1, #0
 80014b8:	f003 fdf4 	bl	80050a4 <memset>
  if(hi2c->Instance==I2C1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_I2C_MspInit+0x7c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d128      	bne.n	8001518 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_I2C_MspInit+0x80>)
 80014c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_I2C_MspInit+0x80>)
 80014cc:	2102      	movs	r1, #2
 80014ce:	430a      	orrs	r2, r1
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_I2C_MspInit+0x80>)
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014de:	0021      	movs	r1, r4
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	22c0      	movs	r2, #192	; 0xc0
 80014e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2212      	movs	r2, #18
 80014ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2203      	movs	r2, #3
 80014f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2201      	movs	r2, #1
 80014fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	4a09      	ldr	r2, [pc, #36]	; (8001528 <HAL_I2C_MspInit+0x84>)
 8001502:	0019      	movs	r1, r3
 8001504:	0010      	movs	r0, r2
 8001506:	f000 fa91 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_I2C_MspInit+0x80>)
 800150c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_I2C_MspInit+0x80>)
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	0389      	lsls	r1, r1, #14
 8001514:	430a      	orrs	r2, r1
 8001516:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b009      	add	sp, #36	; 0x24
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	40005400 	.word	0x40005400
 8001524:	40021000 	.word	0x40021000
 8001528:	50000400 	.word	0x50000400

0800152c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b08b      	sub	sp, #44	; 0x2c
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	2414      	movs	r4, #20
 8001536:	193b      	adds	r3, r7, r4
 8001538:	0018      	movs	r0, r3
 800153a:	2314      	movs	r3, #20
 800153c:	001a      	movs	r2, r3
 800153e:	2100      	movs	r1, #0
 8001540:	f003 fdb0 	bl	80050a4 <memset>
  if(huart->Instance==LPUART1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a30      	ldr	r2, [pc, #192]	; (800160c <HAL_UART_MspInit+0xe0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12a      	bne.n	80015a4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_UART_MspInit+0xe4>)
 8001550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_UART_MspInit+0xe4>)
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	02c9      	lsls	r1, r1, #11
 8001558:	430a      	orrs	r2, r1
 800155a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <HAL_UART_MspInit+0xe4>)
 800155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_UART_MspInit+0xe4>)
 8001562:	2101      	movs	r1, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_UART_MspInit+0xe4>)
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001574:	0021      	movs	r1, r4
 8001576:	187b      	adds	r3, r7, r1
 8001578:	220c      	movs	r2, #12
 800157a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	187b      	adds	r3, r7, r1
 800157e:	2202      	movs	r2, #2
 8001580:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	187b      	adds	r3, r7, r1
 800158a:	2203      	movs	r2, #3
 800158c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2206      	movs	r2, #6
 8001592:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	187a      	adds	r2, r7, r1
 8001596:	23a0      	movs	r3, #160	; 0xa0
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	0011      	movs	r1, r2
 800159c:	0018      	movs	r0, r3
 800159e:	f000 fa45 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a2:	e02f      	b.n	8001604 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_UART_MspInit+0xe8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d12a      	bne.n	8001604 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_UART_MspInit+0xe4>)
 80015b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_UART_MspInit+0xe4>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0289      	lsls	r1, r1, #10
 80015b8:	430a      	orrs	r2, r1
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_UART_MspInit+0xe4>)
 80015be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_UART_MspInit+0xe4>)
 80015c2:	2101      	movs	r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_UART_MspInit+0xe4>)
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	2201      	movs	r2, #1
 80015ce:	4013      	ands	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015d4:	2114      	movs	r1, #20
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	22c0      	movs	r2, #192	; 0xc0
 80015da:	00d2      	lsls	r2, r2, #3
 80015dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2202      	movs	r2, #2
 80015e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2203      	movs	r2, #3
 80015ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2204      	movs	r2, #4
 80015f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	187a      	adds	r2, r7, r1
 80015f8:	23a0      	movs	r3, #160	; 0xa0
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	0011      	movs	r1, r2
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 fa14 	bl	8001a2c <HAL_GPIO_Init>
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b00b      	add	sp, #44	; 0x2c
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	40004800 	.word	0x40004800
 8001610:	40021000 	.word	0x40021000
 8001614:	40004400 	.word	0x40004400

08001618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	240c      	movs	r4, #12
 8001622:	193b      	adds	r3, r7, r4
 8001624:	0018      	movs	r0, r3
 8001626:	2314      	movs	r3, #20
 8001628:	001a      	movs	r2, r3
 800162a:	2100      	movs	r1, #0
 800162c:	f003 fd3a 	bl	80050a4 <memset>
  if(hspi->Instance==SPI1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a18      	ldr	r2, [pc, #96]	; (8001698 <HAL_SPI_MspInit+0x80>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d129      	bne.n	800168e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_SPI_MspInit+0x84>)
 800163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_SPI_MspInit+0x84>)
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0149      	lsls	r1, r1, #5
 8001644:	430a      	orrs	r2, r1
 8001646:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_SPI_MspInit+0x84>)
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_SPI_MspInit+0x84>)
 800164e:	2101      	movs	r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_SPI_MspInit+0x84>)
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001660:	0021      	movs	r1, r4
 8001662:	187b      	adds	r3, r7, r1
 8001664:	22e0      	movs	r2, #224	; 0xe0
 8001666:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2202      	movs	r2, #2
 800166c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2203      	movs	r2, #3
 8001678:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	187a      	adds	r2, r7, r1
 8001682:	23a0      	movs	r3, #160	; 0xa0
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f000 f9cf 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b009      	add	sp, #36	; 0x24
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40013000 	.word	0x40013000
 800169c:	40021000 	.word	0x40021000

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 f8be 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	18d3      	adds	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f003 fca6 	bl	8005050 <__errno>
 8001704:	0003      	movs	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	2301      	movs	r3, #1
 800170c:	425b      	negs	r3, r3
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	18d2      	adds	r2, r2, r3
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b006      	add	sp, #24
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20002000 	.word	0x20002000
 8001730:	00000400 	.word	0x00000400
 8001734:	20000244 	.word	0x20000244
 8001738:	20000260 	.word	0x20000260

0800173c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800174a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	; (8001794 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001772:	f7ff ffe3 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f003 fc71 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fadf 	bl	8000d3c <main>

0800177e <LoopForever>:

LoopForever:
    b LoopForever
 800177e:	e7fe      	b.n	800177e <LoopForever>
   ldr   r0, =_estack
 8001780:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800178c:	08005d78 	.word	0x08005d78
  ldr r2, =_sbss
 8001790:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001794:	2000025c 	.word	0x2000025c

08001798 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_COMP_IRQHandler>
	...

0800179c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x3c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Init+0x3c>)
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f811 	bl	80017dc <HAL_InitTick>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e001      	b.n	80017ca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c6:	f7ff fe59 	bl	800147c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
}
 80017ce:	0018      	movs	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	40022000 	.word	0x40022000

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_InitTick+0x5c>)
 80017e6:	681c      	ldr	r4, [r3, #0]
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_InitTick+0x60>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	0019      	movs	r1, r3
 80017ee:	23fa      	movs	r3, #250	; 0xfa
 80017f0:	0098      	lsls	r0, r3, #2
 80017f2:	f7fe fc93 	bl	800011c <__udivsi3>
 80017f6:	0003      	movs	r3, r0
 80017f8:	0019      	movs	r1, r3
 80017fa:	0020      	movs	r0, r4
 80017fc:	f7fe fc8e 	bl	800011c <__udivsi3>
 8001800:	0003      	movs	r3, r0
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f905 	bl	8001a12 <HAL_SYSTICK_Config>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d001      	beq.n	8001810 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e00f      	b.n	8001830 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d80b      	bhi.n	800182e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	2301      	movs	r3, #1
 800181a:	425b      	negs	r3, r3
 800181c:	2200      	movs	r2, #0
 800181e:	0018      	movs	r0, r3
 8001820:	f000 f8e2 	bl	80019e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_InitTick+0x64>)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b003      	add	sp, #12
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	20000000 	.word	0x20000000
 800183c:	20000008 	.word	0x20000008
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_IncTick+0x1c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	001a      	movs	r2, r3
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x20>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	18d2      	adds	r2, r2, r3
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_IncTick+0x20>)
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	20000008 	.word	0x20000008
 8001864:	20000248 	.word	0x20000248

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <HAL_GetTick+0x10>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	20000248 	.word	0x20000248

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff fff0 	bl	8001868 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3301      	adds	r3, #1
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	001a      	movs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	189b      	adds	r3, r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	f7ff ffe0 	bl	8001868 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	20000008 	.word	0x20000008

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	0002      	movs	r2, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b7f      	cmp	r3, #127	; 0x7f
 80018d8:	d828      	bhi.n	800192c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018da:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <__NVIC_SetPriority+0xd4>)
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	33c0      	adds	r3, #192	; 0xc0
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	589b      	ldr	r3, [r3, r2]
 80018ea:	1dfa      	adds	r2, r7, #7
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	0011      	movs	r1, r2
 80018f0:	2203      	movs	r2, #3
 80018f2:	400a      	ands	r2, r1
 80018f4:	00d2      	lsls	r2, r2, #3
 80018f6:	21ff      	movs	r1, #255	; 0xff
 80018f8:	4091      	lsls	r1, r2
 80018fa:	000a      	movs	r2, r1
 80018fc:	43d2      	mvns	r2, r2
 80018fe:	401a      	ands	r2, r3
 8001900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	22ff      	movs	r2, #255	; 0xff
 8001908:	401a      	ands	r2, r3
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	0018      	movs	r0, r3
 8001910:	2303      	movs	r3, #3
 8001912:	4003      	ands	r3, r0
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001918:	481f      	ldr	r0, [pc, #124]	; (8001998 <__NVIC_SetPriority+0xd4>)
 800191a:	1dfb      	adds	r3, r7, #7
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b25b      	sxtb	r3, r3
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	430a      	orrs	r2, r1
 8001924:	33c0      	adds	r3, #192	; 0xc0
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800192a:	e031      	b.n	8001990 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192c:	4a1b      	ldr	r2, [pc, #108]	; (800199c <__NVIC_SetPriority+0xd8>)
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	0019      	movs	r1, r3
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	3b08      	subs	r3, #8
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3306      	adds	r3, #6
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	3304      	adds	r3, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	1dfa      	adds	r2, r7, #7
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	0011      	movs	r1, r2
 800194c:	2203      	movs	r2, #3
 800194e:	400a      	ands	r2, r1
 8001950:	00d2      	lsls	r2, r2, #3
 8001952:	21ff      	movs	r1, #255	; 0xff
 8001954:	4091      	lsls	r1, r2
 8001956:	000a      	movs	r2, r1
 8001958:	43d2      	mvns	r2, r2
 800195a:	401a      	ands	r2, r3
 800195c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	22ff      	movs	r2, #255	; 0xff
 8001964:	401a      	ands	r2, r3
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	0018      	movs	r0, r3
 800196c:	2303      	movs	r3, #3
 800196e:	4003      	ands	r3, r0
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001974:	4809      	ldr	r0, [pc, #36]	; (800199c <__NVIC_SetPriority+0xd8>)
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	001c      	movs	r4, r3
 800197c:	230f      	movs	r3, #15
 800197e:	4023      	ands	r3, r4
 8001980:	3b08      	subs	r3, #8
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	430a      	orrs	r2, r1
 8001986:	3306      	adds	r3, #6
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	18c3      	adds	r3, r0, r3
 800198c:	3304      	adds	r3, #4
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b003      	add	sp, #12
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	1e5a      	subs	r2, r3, #1
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	045b      	lsls	r3, r3, #17
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d301      	bcc.n	80019b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b4:	2301      	movs	r3, #1
 80019b6:	e010      	b.n	80019da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <SysTick_Config+0x44>)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	3a01      	subs	r2, #1
 80019be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c0:	2301      	movs	r3, #1
 80019c2:	425b      	negs	r3, r3
 80019c4:	2103      	movs	r1, #3
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7ff ff7c 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x44>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x44>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	210f      	movs	r1, #15
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	0011      	movs	r1, r2
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b004      	add	sp, #16
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff ffbf 	bl	80019a0 <SysTick_Config>
 8001a22:	0003      	movs	r3, r0
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a42:	e149      	b.n	8001cd8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4091      	lsls	r1, r2
 8001a4e:	000a      	movs	r2, r1
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d100      	bne.n	8001a5c <HAL_GPIO_Init+0x30>
 8001a5a:	e13a      	b.n	8001cd2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	43da      	mvns	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2203      	movs	r2, #3
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2203      	movs	r2, #3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	58d3      	ldr	r3, [r2, r3]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4013      	ands	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2107      	movs	r1, #7
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	6939      	ldr	r1, [r7, #16]
 8001b64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	43da      	mvns	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2203      	movs	r2, #3
 8001b84:	401a      	ands	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_GPIO_Init+0x17c>
 8001ba6:	e094      	b.n	8001cd2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <HAL_GPIO_Init+0x2c4>)
 8001baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_GPIO_Init+0x2c4>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb4:	4a4f      	ldr	r2, [pc, #316]	; (8001cf4 <HAL_GPIO_Init+0x2c8>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	589b      	ldr	r3, [r3, r2]
 8001bc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	0013      	movs	r3, r2
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	23a0      	movs	r3, #160	; 0xa0
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x1de>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a44      	ldr	r2, [pc, #272]	; (8001cf8 <HAL_GPIO_Init+0x2cc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x1da>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a43      	ldr	r2, [pc, #268]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x1d6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a42      	ldr	r2, [pc, #264]	; (8001d00 <HAL_GPIO_Init+0x2d4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x1d2>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x1e0>
 8001bfe:	2306      	movs	r3, #6
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x1e0>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x1e0>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x1e0>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	2103      	movs	r1, #3
 8001c10:	400a      	ands	r2, r1
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c1c:	4935      	ldr	r1, [pc, #212]	; (8001cf4 <HAL_GPIO_Init+0x2c8>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_GPIO_Init+0x2d8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43da      	mvns	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	025b      	lsls	r3, r3, #9
 8001c42:	4013      	ands	r3, r2
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_GPIO_Init+0x2d8>)
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_GPIO_Init+0x2d8>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	029b      	lsls	r3, r3, #10
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_GPIO_Init+0x2d8>)
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_GPIO_Init+0x2d8>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43da      	mvns	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	035b      	lsls	r3, r3, #13
 8001c96:	4013      	ands	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_GPIO_Init+0x2d8>)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_GPIO_Init+0x2d8>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	039b      	lsls	r3, r3, #14
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_GPIO_Init+0x2d8>)
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	40da      	lsrs	r2, r3
 8001ce0:	1e13      	subs	r3, r2, #0
 8001ce2:	d000      	beq.n	8001ce6 <HAL_GPIO_Init+0x2ba>
 8001ce4:	e6ae      	b.n	8001a44 <HAL_GPIO_Init+0x18>
  }
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b006      	add	sp, #24
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	50000400 	.word	0x50000400
 8001cfc:	50000800 	.word	0x50000800
 8001d00:	50001c00 	.word	0x50001c00
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	0008      	movs	r0, r1
 8001d12:	0011      	movs	r1, r2
 8001d14:	1cbb      	adds	r3, r7, #2
 8001d16:	1c02      	adds	r2, r0, #0
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	1c7b      	adds	r3, r7, #1
 8001d1c:	1c0a      	adds	r2, r1, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d20:	1c7b      	adds	r3, r7, #1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d28:	1cbb      	adds	r3, r7, #2
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001d32:	1cbb      	adds	r3, r7, #2
 8001d34:	881a      	ldrh	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e082      	b.n	8001e5c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2241      	movs	r2, #65	; 0x41
 8001d5a:	5c9b      	ldrb	r3, [r3, r2]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2240      	movs	r2, #64	; 0x40
 8001d66:	2100      	movs	r1, #0
 8001d68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fb99 	bl	80014a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2241      	movs	r2, #65	; 0x41
 8001d76:	2124      	movs	r1, #36	; 0x24
 8001d78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	438a      	bics	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4934      	ldr	r1, [pc, #208]	; (8001e64 <HAL_I2C_Init+0x120>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4931      	ldr	r1, [pc, #196]	; (8001e68 <HAL_I2C_Init+0x124>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0209      	lsls	r1, r1, #8
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e007      	b.n	8001dd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2184      	movs	r1, #132	; 0x84
 8001dcc:	0209      	lsls	r1, r1, #8
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d104      	bne.n	8001de4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	491f      	ldr	r1, [pc, #124]	; (8001e6c <HAL_I2C_Init+0x128>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	491a      	ldr	r1, [pc, #104]	; (8001e68 <HAL_I2C_Init+0x124>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69d9      	ldr	r1, [r3, #28]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2241      	movs	r2, #65	; 0x41
 8001e48:	2120      	movs	r1, #32
 8001e4a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2242      	movs	r2, #66	; 0x42
 8001e56:	2100      	movs	r1, #0
 8001e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	f0ffffff 	.word	0xf0ffffff
 8001e68:	ffff7fff 	.word	0xffff7fff
 8001e6c:	02008000 	.word	0x02008000

08001e70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	0008      	movs	r0, r1
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	230a      	movs	r3, #10
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	1c02      	adds	r2, r0, #0
 8001e84:	801a      	strh	r2, [r3, #0]
 8001e86:	2308      	movs	r3, #8
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	1c0a      	adds	r2, r1, #0
 8001e8c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2241      	movs	r2, #65	; 0x41
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d000      	beq.n	8001e9c <HAL_I2C_Master_Transmit+0x2c>
 8001e9a:	e0e7      	b.n	800206c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	5c9b      	ldrb	r3, [r3, r2]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Master_Transmit+0x3a>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e0e1      	b.n	800206e <HAL_I2C_Master_Transmit+0x1fe>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2240      	movs	r2, #64	; 0x40
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb2:	f7ff fcd9 	bl	8001868 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	0219      	lsls	r1, r3, #8
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2319      	movs	r3, #25
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f000 fb9a 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	1e03      	subs	r3, r0, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0cc      	b.n	800206e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2241      	movs	r2, #65	; 0x41
 8001ed8:	2121      	movs	r1, #33	; 0x21
 8001eda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2242      	movs	r2, #66	; 0x42
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	18ba      	adds	r2, r7, r2
 8001ef6:	8812      	ldrh	r2, [r2, #0]
 8001ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d911      	bls.n	8001f2e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	045c      	lsls	r4, r3, #17
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	8819      	ldrh	r1, [r3, #0]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	4b55      	ldr	r3, [pc, #340]	; (8002078 <HAL_I2C_Master_Transmit+0x208>)
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	0023      	movs	r3, r4
 8001f28:	f000 fd0a 	bl	8002940 <I2C_TransferConfig>
 8001f2c:	e075      	b.n	800201a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	049c      	lsls	r4, r3, #18
 8001f42:	230a      	movs	r3, #10
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	8819      	ldrh	r1, [r3, #0]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_I2C_Master_Transmit+0x208>)
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	0023      	movs	r3, r4
 8001f50:	f000 fcf6 	bl	8002940 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f54:	e061      	b.n	800201a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 fb8e 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 8001f62:	1e03      	subs	r3, r0, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e081      	b.n	800206e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d03a      	beq.n	800201a <HAL_I2C_Master_Transmit+0x1aa>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d136      	bne.n	800201a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	f000 fb21 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e053      	b.n	800206e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2bff      	cmp	r3, #255	; 0xff
 8001fce:	d911      	bls.n	8001ff4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	045c      	lsls	r4, r3, #17
 8001fe0:	230a      	movs	r3, #10
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	8819      	ldrh	r1, [r3, #0]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	0023      	movs	r3, r4
 8001fee:	f000 fca7 	bl	8002940 <I2C_TransferConfig>
 8001ff2:	e012      	b.n	800201a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	b2da      	uxtb	r2, r3
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	049c      	lsls	r4, r3, #18
 8002008:	230a      	movs	r3, #10
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	8819      	ldrh	r1, [r3, #0]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	0023      	movs	r3, r4
 8002016:	f000 fc93 	bl	8002940 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d198      	bne.n	8001f56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 fb66 	bl	80026fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002030:	1e03      	subs	r3, r0, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e01a      	b.n	800206e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2220      	movs	r2, #32
 800203e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <HAL_I2C_Master_Transmit+0x20c>)
 800204c:	400a      	ands	r2, r1
 800204e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2241      	movs	r2, #65	; 0x41
 8002054:	2120      	movs	r1, #32
 8002056:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2242      	movs	r2, #66	; 0x42
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2240      	movs	r2, #64	; 0x40
 8002064:	2100      	movs	r1, #0
 8002066:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	e000      	b.n	800206e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800206c:	2302      	movs	r3, #2
  }
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b007      	add	sp, #28
 8002074:	bd90      	pop	{r4, r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	80002000 	.word	0x80002000
 800207c:	fe00e800 	.word	0xfe00e800

08002080 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	0008      	movs	r0, r1
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	0019      	movs	r1, r3
 800208e:	230a      	movs	r3, #10
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	1c02      	adds	r2, r0, #0
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	2308      	movs	r3, #8
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	1c0a      	adds	r2, r1, #0
 800209c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2241      	movs	r2, #65	; 0x41
 80020a2:	5c9b      	ldrb	r3, [r3, r2]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d000      	beq.n	80020ac <HAL_I2C_Master_Receive+0x2c>
 80020aa:	e0e8      	b.n	800227e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	5c9b      	ldrb	r3, [r3, r2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Master_Receive+0x3a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e0e2      	b.n	8002280 <HAL_I2C_Master_Receive+0x200>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c2:	f7ff fbd1 	bl	8001868 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	0219      	lsls	r1, r3, #8
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	2201      	movs	r2, #1
 80020d8:	f000 fa92 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80020dc:	1e03      	subs	r3, r0, #0
 80020de:	d001      	beq.n	80020e4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0cd      	b.n	8002280 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2241      	movs	r2, #65	; 0x41
 80020e8:	2122      	movs	r1, #34	; 0x22
 80020ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2242      	movs	r2, #66	; 0x42
 80020f0:	2110      	movs	r1, #16
 80020f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2208      	movs	r2, #8
 8002104:	18ba      	adds	r2, r7, r2
 8002106:	8812      	ldrh	r2, [r2, #0]
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	2bff      	cmp	r3, #255	; 0xff
 8002118:	d911      	bls.n	800213e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	22ff      	movs	r2, #255	; 0xff
 800211e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	b2da      	uxtb	r2, r3
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	045c      	lsls	r4, r3, #17
 800212a:	230a      	movs	r3, #10
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	8819      	ldrh	r1, [r3, #0]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	4b55      	ldr	r3, [pc, #340]	; (8002288 <HAL_I2C_Master_Receive+0x208>)
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	0023      	movs	r3, r4
 8002138:	f000 fc02 	bl	8002940 <I2C_TransferConfig>
 800213c:	e076      	b.n	800222c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	b2da      	uxtb	r2, r3
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	049c      	lsls	r4, r3, #18
 8002152:	230a      	movs	r3, #10
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	8819      	ldrh	r1, [r3, #0]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <HAL_I2C_Master_Receive+0x208>)
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	0023      	movs	r3, r4
 8002160:	f000 fbee 	bl	8002940 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002164:	e062      	b.n	800222c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 fb01 	bl	8002774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e082      	b.n	8002280 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d03a      	beq.n	800222c <HAL_I2C_Master_Receive+0x1ac>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d136      	bne.n	800222c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	0013      	movs	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	f000 fa18 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e053      	b.n	8002280 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2bff      	cmp	r3, #255	; 0xff
 80021e0:	d911      	bls.n	8002206 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	045c      	lsls	r4, r3, #17
 80021f2:	230a      	movs	r3, #10
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	8819      	ldrh	r1, [r3, #0]
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	2300      	movs	r3, #0
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	0023      	movs	r3, r4
 8002200:	f000 fb9e 	bl	8002940 <I2C_TransferConfig>
 8002204:	e012      	b.n	800222c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	b2da      	uxtb	r2, r3
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	049c      	lsls	r4, r3, #18
 800221a:	230a      	movs	r3, #10
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	8819      	ldrh	r1, [r3, #0]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	0023      	movs	r3, r4
 8002228:	f000 fb8a 	bl	8002940 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d197      	bne.n	8002166 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 fa5d 	bl	80026fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e01a      	b.n	8002280 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2220      	movs	r2, #32
 8002250:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	490b      	ldr	r1, [pc, #44]	; (800228c <HAL_I2C_Master_Receive+0x20c>)
 800225e:	400a      	ands	r2, r1
 8002260:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2241      	movs	r2, #65	; 0x41
 8002266:	2120      	movs	r1, #32
 8002268:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2242      	movs	r2, #66	; 0x42
 800226e:	2100      	movs	r1, #0
 8002270:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800227e:	2302      	movs	r3, #2
  }
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b007      	add	sp, #28
 8002286:	bd90      	pop	{r4, r7, pc}
 8002288:	80002400 	.word	0x80002400
 800228c:	fe00e800 	.word	0xfe00e800

08002290 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	000c      	movs	r4, r1
 800229a:	0010      	movs	r0, r2
 800229c:	0019      	movs	r1, r3
 800229e:	230a      	movs	r3, #10
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	1c22      	adds	r2, r4, #0
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	2308      	movs	r3, #8
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	1c02      	adds	r2, r0, #0
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	1dbb      	adds	r3, r7, #6
 80022b0:	1c0a      	adds	r2, r1, #0
 80022b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2241      	movs	r2, #65	; 0x41
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d000      	beq.n	80022c2 <HAL_I2C_Mem_Read+0x32>
 80022c0:	e110      	b.n	80024e4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_I2C_Mem_Read+0x42>
 80022c8:	232c      	movs	r3, #44	; 0x2c
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e103      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_I2C_Mem_Read+0x5c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0fc      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	2101      	movs	r1, #1
 80022f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f4:	f7ff fab8 	bl	8001868 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	0219      	lsls	r1, r3, #8
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2319      	movs	r3, #25
 8002308:	2201      	movs	r2, #1
 800230a:	f000 f979 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e7      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	2122      	movs	r1, #34	; 0x22
 800231c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2242      	movs	r2, #66	; 0x42
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	222c      	movs	r2, #44	; 0x2c
 8002336:	18ba      	adds	r2, r7, r2
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002342:	1dbb      	adds	r3, r7, #6
 8002344:	881c      	ldrh	r4, [r3, #0]
 8002346:	2308      	movs	r3, #8
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	230a      	movs	r3, #10
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	8819      	ldrh	r1, [r3, #0]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	0023      	movs	r3, r4
 800235e:	f000 f8cb 	bl	80024f8 <I2C_RequestMemoryRead>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d005      	beq.n	8002372 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	2100      	movs	r1, #0
 800236c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0b9      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d911      	bls.n	80023a0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	045c      	lsls	r4, r3, #17
 800238c:	230a      	movs	r3, #10
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	8819      	ldrh	r1, [r3, #0]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <HAL_I2C_Mem_Read+0x260>)
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	0023      	movs	r3, r4
 800239a:	f000 fad1 	bl	8002940 <I2C_TransferConfig>
 800239e:	e012      	b.n	80023c6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	049c      	lsls	r4, r3, #18
 80023b4:	230a      	movs	r3, #10
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	8819      	ldrh	r1, [r3, #0]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <HAL_I2C_Mem_Read+0x260>)
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	0023      	movs	r3, r4
 80023c2:	f000 fabd 	bl	8002940 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	0013      	movs	r3, r2
 80023d0:	2200      	movs	r2, #0
 80023d2:	2104      	movs	r1, #4
 80023d4:	f000 f914 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	1e03      	subs	r3, r0, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e082      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03a      	beq.n	8002492 <HAL_I2C_Mem_Read+0x202>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d136      	bne.n	8002492 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	0013      	movs	r3, r2
 800242e:	2200      	movs	r2, #0
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	f000 f8e5 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8002436:	1e03      	subs	r3, r0, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e053      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	2bff      	cmp	r3, #255	; 0xff
 8002446:	d911      	bls.n	800246c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	22ff      	movs	r2, #255	; 0xff
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	b2da      	uxtb	r2, r3
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	045c      	lsls	r4, r3, #17
 8002458:	230a      	movs	r3, #10
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	8819      	ldrh	r1, [r3, #0]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	0023      	movs	r3, r4
 8002466:	f000 fa6b 	bl	8002940 <I2C_TransferConfig>
 800246a:	e012      	b.n	8002492 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	b2da      	uxtb	r2, r3
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	049c      	lsls	r4, r3, #18
 8002480:	230a      	movs	r3, #10
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	8819      	ldrh	r1, [r3, #0]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	0023      	movs	r3, r4
 800248e:	f000 fa57 	bl	8002940 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d194      	bne.n	80023c6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f92a 	bl	80026fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e01a      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	490c      	ldr	r1, [pc, #48]	; (80024f4 <HAL_I2C_Mem_Read+0x264>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2241      	movs	r2, #65	; 0x41
 80024cc:	2120      	movs	r1, #32
 80024ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2242      	movs	r2, #66	; 0x42
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	0018      	movs	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b007      	add	sp, #28
 80024ec:	bd90      	pop	{r4, r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	80002400 	.word	0x80002400
 80024f4:	fe00e800 	.word	0xfe00e800

080024f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	000c      	movs	r4, r1
 8002502:	0010      	movs	r0, r2
 8002504:	0019      	movs	r1, r3
 8002506:	250a      	movs	r5, #10
 8002508:	197b      	adds	r3, r7, r5
 800250a:	1c22      	adds	r2, r4, #0
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	2308      	movs	r3, #8
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	1c02      	adds	r2, r0, #0
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	1dbb      	adds	r3, r7, #6
 8002518:	1c0a      	adds	r2, r1, #0
 800251a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	197b      	adds	r3, r7, r5
 8002524:	8819      	ldrh	r1, [r3, #0]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <I2C_RequestMemoryRead+0xc0>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2300      	movs	r3, #0
 800252e:	f000 fa07 	bl	8002940 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	6a39      	ldr	r1, [r7, #32]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 f8a0 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d001      	beq.n	8002546 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e033      	b.n	80025ae <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002546:	1dbb      	adds	r3, r7, #6
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800254e:	2308      	movs	r3, #8
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
 800255c:	e019      	b.n	8002592 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800255e:	2308      	movs	r3, #8
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	b29b      	uxth	r3, r3
 8002568:	b2da      	uxtb	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002572:	6a39      	ldr	r1, [r7, #32]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f881 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d001      	beq.n	8002584 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e014      	b.n	80025ae <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002584:	2308      	movs	r3, #8
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002592:	6a3a      	ldr	r2, [r7, #32]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	0013      	movs	r3, r2
 800259c:	2200      	movs	r2, #0
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	f000 f82e 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	1e03      	subs	r3, r0, #0
 80025a6:	d001      	beq.n	80025ac <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b004      	add	sp, #16
 80025b4:	bdb0      	pop	{r4, r5, r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	80002000 	.word	0x80002000

080025bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d103      	bne.n	80025da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2201      	movs	r2, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d007      	beq.n	80025f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2101      	movs	r1, #1
 80025f4:	430a      	orrs	r2, r1
 80025f6:	619a      	str	r2, [r3, #24]
  }
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b002      	add	sp, #8
 80025fe:	bd80      	pop	{r7, pc}

08002600 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002610:	e021      	b.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	d01e      	beq.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002618:	f7ff f926 	bl	8001868 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d302      	bcc.n	800262e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d113      	bne.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	2220      	movs	r2, #32
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2241      	movs	r2, #65	; 0x41
 800263e:	2120      	movs	r1, #32
 8002640:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2242      	movs	r2, #66	; 0x42
 8002646:	2100      	movs	r1, #0
 8002648:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	425a      	negs	r2, r3
 8002666:	4153      	adcs	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	001a      	movs	r2, r3
 800266c:	1dfb      	adds	r3, r7, #7
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d0ce      	beq.n	8002612 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b004      	add	sp, #16
 800267c:	bd80      	pop	{r7, pc}

0800267e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800268a:	e02b      	b.n	80026e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0018      	movs	r0, r3
 8002694:	f000 f8da 	bl	800284c <I2C_IsAcknowledgeFailed>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e029      	b.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3301      	adds	r3, #1
 80026a4:	d01e      	beq.n	80026e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff f8df 	bl	8001868 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d113      	bne.n	80026e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	2220      	movs	r2, #32
 80026c2:	431a      	orrs	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2241      	movs	r2, #65	; 0x41
 80026cc:	2120      	movs	r1, #32
 80026ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2242      	movs	r2, #66	; 0x42
 80026d4:	2100      	movs	r1, #0
 80026d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	2100      	movs	r1, #0
 80026de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e007      	b.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d1cc      	bne.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b004      	add	sp, #16
 80026fa:	bd80      	pop	{r7, pc}

080026fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002708:	e028      	b.n	800275c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f89b 	bl	800284c <I2C_IsAcknowledgeFailed>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e026      	b.n	800276c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7ff f8a3 	bl	8001868 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d113      	bne.n	800275c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	2220      	movs	r2, #32
 800273a:	431a      	orrs	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2241      	movs	r2, #65	; 0x41
 8002744:	2120      	movs	r1, #32
 8002746:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2242      	movs	r2, #66	; 0x42
 800274c:	2100      	movs	r1, #0
 800274e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2240      	movs	r2, #64	; 0x40
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e007      	b.n	800276c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2220      	movs	r2, #32
 8002764:	4013      	ands	r3, r2
 8002766:	2b20      	cmp	r3, #32
 8002768:	d1cf      	bne.n	800270a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002780:	e055      	b.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f85f 	bl	800284c <I2C_IsAcknowledgeFailed>
 800278e:	1e03      	subs	r3, r0, #0
 8002790:	d001      	beq.n	8002796 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e053      	b.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2220      	movs	r2, #32
 800279e:	4013      	ands	r3, r2
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d129      	bne.n	80027f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2204      	movs	r2, #4
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d105      	bne.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e03f      	b.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2220      	movs	r2, #32
 80027c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	491d      	ldr	r1, [pc, #116]	; (8002848 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80027d2:	400a      	ands	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2241      	movs	r2, #65	; 0x41
 80027e0:	2120      	movs	r1, #32
 80027e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2242      	movs	r2, #66	; 0x42
 80027e8:	2100      	movs	r1, #0
 80027ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	2100      	movs	r1, #0
 80027f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e022      	b.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f8:	f7ff f836 	bl	8001868 <HAL_GetTick>
 80027fc:	0002      	movs	r2, r0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	429a      	cmp	r2, r3
 8002806:	d302      	bcc.n	800280e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	2220      	movs	r2, #32
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2241      	movs	r2, #65	; 0x41
 800281e:	2120      	movs	r1, #32
 8002820:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2240      	movs	r2, #64	; 0x40
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e007      	b.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2204      	movs	r2, #4
 8002836:	4013      	ands	r3, r2
 8002838:	2b04      	cmp	r3, #4
 800283a:	d1a2      	bne.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	fe00e800 	.word	0xfe00e800

0800284c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2210      	movs	r2, #16
 8002860:	4013      	ands	r3, r2
 8002862:	2b10      	cmp	r3, #16
 8002864:	d164      	bne.n	8002930 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	049b      	lsls	r3, r3, #18
 8002870:	401a      	ands	r2, r3
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	049b      	lsls	r3, r3, #18
 8002876:	429a      	cmp	r2, r3
 8002878:	d02b      	beq.n	80028d2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	01c9      	lsls	r1, r1, #7
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800288c:	e021      	b.n	80028d2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	d01e      	beq.n	80028d2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7fe ffe8 	bl	8001868 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <I2C_IsAcknowledgeFailed+0x5e>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d113      	bne.n	80028d2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	2220      	movs	r2, #32
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2241      	movs	r2, #65	; 0x41
 80028ba:	2120      	movs	r1, #32
 80028bc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2242      	movs	r2, #66	; 0x42
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	2100      	movs	r1, #0
 80028cc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e02f      	b.n	8002932 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2220      	movs	r2, #32
 80028da:	4013      	ands	r3, r2
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d1d6      	bne.n	800288e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2210      	movs	r2, #16
 80028e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2220      	movs	r2, #32
 80028ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7ff fe62 	bl	80025bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	490e      	ldr	r1, [pc, #56]	; (800293c <I2C_IsAcknowledgeFailed+0xf0>)
 8002904:	400a      	ands	r2, r1
 8002906:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	2204      	movs	r2, #4
 800290e:	431a      	orrs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2241      	movs	r2, #65	; 0x41
 8002918:	2120      	movs	r1, #32
 800291a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2242      	movs	r2, #66	; 0x42
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2240      	movs	r2, #64	; 0x40
 8002928:	2100      	movs	r1, #0
 800292a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b004      	add	sp, #16
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	fe00e800 	.word	0xfe00e800

08002940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	0008      	movs	r0, r1
 800294a:	0011      	movs	r1, r2
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	240a      	movs	r4, #10
 8002950:	193b      	adds	r3, r7, r4
 8002952:	1c02      	adds	r2, r0, #0
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	2009      	movs	r0, #9
 8002958:	183b      	adds	r3, r7, r0
 800295a:	1c0a      	adds	r2, r1, #0
 800295c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	0d51      	lsrs	r1, r2, #21
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	00d2      	lsls	r2, r2, #3
 800296c:	400a      	ands	r2, r1
 800296e:	490e      	ldr	r1, [pc, #56]	; (80029a8 <I2C_TransferConfig+0x68>)
 8002970:	430a      	orrs	r2, r1
 8002972:	43d2      	mvns	r2, r2
 8002974:	401a      	ands	r2, r3
 8002976:	0011      	movs	r1, r2
 8002978:	193b      	adds	r3, r7, r4
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	059b      	lsls	r3, r3, #22
 800297e:	0d9a      	lsrs	r2, r3, #22
 8002980:	183b      	adds	r3, r7, r0
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	0418      	lsls	r0, r3, #16
 8002986:	23ff      	movs	r3, #255	; 0xff
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	4003      	ands	r3, r0
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	431a      	orrs	r2, r3
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	431a      	orrs	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b005      	add	sp, #20
 80029a4:	bd90      	pop	{r4, r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	03ff63ff 	.word	0x03ff63ff

080029ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2241      	movs	r2, #65	; 0x41
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d138      	bne.n	8002a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2240      	movs	r2, #64	; 0x40
 80029c6:	5c9b      	ldrb	r3, [r3, r2]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e032      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	2101      	movs	r1, #1
 80029d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2241      	movs	r2, #65	; 0x41
 80029dc:	2124      	movs	r1, #36	; 0x24
 80029de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	438a      	bics	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4911      	ldr	r1, [pc, #68]	; (8002a40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2241      	movs	r2, #65	; 0x41
 8002a24:	2120      	movs	r1, #32
 8002a26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	ffffefff 	.word	0xffffefff

08002a44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2241      	movs	r2, #65	; 0x41
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d139      	bne.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2240      	movs	r2, #64	; 0x40
 8002a5e:	5c9b      	ldrb	r3, [r3, r2]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e033      	b.n	8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2241      	movs	r2, #65	; 0x41
 8002a74:	2124      	movs	r1, #36	; 0x24
 8002a76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2101      	movs	r1, #1
 8002a84:	438a      	bics	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2241      	movs	r2, #65	; 0x41
 8002abe:	2120      	movs	r1, #32
 8002ac0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b004      	add	sp, #16
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	fffff0ff 	.word	0xfffff0ff

08002adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f000 fb6c 	bl	80031c8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af0:	4bc8      	ldr	r3, [pc, #800]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	220c      	movs	r2, #12
 8002af6:	4013      	ands	r3, r2
 8002af8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002afa:	4bc6      	ldr	r3, [pc, #792]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	025b      	lsls	r3, r3, #9
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <HAL_RCC_OscConfig+0x36>
 8002b10:	e07d      	b.n	8002c0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d007      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d112      	bne.n	8002b44 <HAL_RCC_OscConfig+0x68>
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	025b      	lsls	r3, r3, #9
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d10d      	bne.n	8002b44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4bba      	ldr	r3, [pc, #744]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	029b      	lsls	r3, r3, #10
 8002b30:	4013      	ands	r3, r2
 8002b32:	d100      	bne.n	8002b36 <HAL_RCC_OscConfig+0x5a>
 8002b34:	e06a      	b.n	8002c0c <HAL_RCC_OscConfig+0x130>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d166      	bne.n	8002c0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f000 fb42 	bl	80031c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	025b      	lsls	r3, r3, #9
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x84>
 8002b50:	4bb0      	ldr	r3, [pc, #704]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4baf      	ldr	r3, [pc, #700]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	0249      	lsls	r1, r1, #9
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e027      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	23a0      	movs	r3, #160	; 0xa0
 8002b66:	02db      	lsls	r3, r3, #11
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10e      	bne.n	8002b8a <HAL_RCC_OscConfig+0xae>
 8002b6c:	4ba9      	ldr	r3, [pc, #676]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4ba8      	ldr	r3, [pc, #672]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	02c9      	lsls	r1, r1, #11
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	4ba6      	ldr	r3, [pc, #664]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4ba5      	ldr	r3, [pc, #660]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	0249      	lsls	r1, r1, #9
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e012      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b8a:	4ba2      	ldr	r3, [pc, #648]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4ba1      	ldr	r3, [pc, #644]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b90:	49a1      	ldr	r1, [pc, #644]	; (8002e18 <HAL_RCC_OscConfig+0x33c>)
 8002b92:	400a      	ands	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	4b9f      	ldr	r3, [pc, #636]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	025b      	lsls	r3, r3, #9
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4b9b      	ldr	r3, [pc, #620]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b9a      	ldr	r3, [pc, #616]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002baa:	499c      	ldr	r1, [pc, #624]	; (8002e1c <HAL_RCC_OscConfig+0x340>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d014      	beq.n	8002be2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fe56 	bl	8001868 <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fe51 	bl	8001868 <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	; 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e2f9      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bd4:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	029b      	lsls	r3, r3, #10
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0xe6>
 8002be0:	e015      	b.n	8002c0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe fe41 	bl	8001868 <HAL_GetTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fe3c 	bl	8001868 <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e2e4      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bfe:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	4013      	ands	r3, r2
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x110>
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d100      	bne.n	8002c1a <HAL_RCC_OscConfig+0x13e>
 8002c18:	e099      	b.n	8002d4e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	2220      	movs	r2, #32
 8002c24:	4013      	ands	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002c28:	4b7a      	ldr	r3, [pc, #488]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c2e:	2120      	movs	r1, #32
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	2220      	movs	r2, #32
 8002c38:	4393      	bics	r3, r2
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d005      	beq.n	8002c4e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b0c      	cmp	r3, #12
 8002c46:	d13e      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x1ea>
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d13b      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c4e:	4b71      	ldr	r3, [pc, #452]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2204      	movs	r2, #4
 8002c54:	4013      	ands	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_RCC_OscConfig+0x186>
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e2b2      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x344>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	021a      	lsls	r2, r3, #8
 8002c72:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c78:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2209      	movs	r2, #9
 8002c7e:	4393      	bics	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	4b64      	ldr	r3, [pc, #400]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8a:	f000 fbeb 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8002c8e:	0001      	movs	r1, r0
 8002c90:	4b60      	ldr	r3, [pc, #384]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	220f      	movs	r2, #15
 8002c98:	4013      	ands	r3, r2
 8002c9a:	4a62      	ldr	r2, [pc, #392]	; (8002e24 <HAL_RCC_OscConfig+0x348>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	000a      	movs	r2, r1
 8002ca0:	40da      	lsrs	r2, r3
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <HAL_RCC_OscConfig+0x34c>)
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002ca6:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <HAL_RCC_OscConfig+0x350>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2513      	movs	r5, #19
 8002cac:	197c      	adds	r4, r7, r5
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f7fe fd94 	bl	80017dc <HAL_InitTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002cb8:	197b      	adds	r3, r7, r5
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d046      	beq.n	8002d4e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002cc0:	197b      	adds	r3, r7, r5
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	e280      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d027      	beq.n	8002d1c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ccc:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2209      	movs	r2, #9
 8002cd2:	4393      	bics	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	4b4f      	ldr	r3, [pc, #316]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fe fdc3 	bl	8001868 <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fdbe 	bl	8001868 <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e266      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4013      	ands	r3, r2
 8002d02:	d0f1      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <HAL_RCC_OscConfig+0x344>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	021a      	lsls	r2, r3, #8
 8002d14:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	e018      	b.n	8002d4e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d22:	2101      	movs	r1, #1
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe fd9e 	bl	8001868 <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fe fd99 	bl	8001868 <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e241      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d1f1      	bne.n	8002d32 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2210      	movs	r2, #16
 8002d54:	4013      	ands	r3, r2
 8002d56:	d100      	bne.n	8002d5a <HAL_RCC_OscConfig+0x27e>
 8002d58:	e0a1      	b.n	8002e9e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d140      	bne.n	8002de2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d60:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_OscConfig+0x29c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e227      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	0019      	movs	r1, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	0a19      	lsrs	r1, r3, #8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	061a      	lsls	r2, r3, #24
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	0b5b      	lsrs	r3, r3, #13
 8002da6:	3301      	adds	r3, #1
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	0212      	lsls	r2, r2, #8
 8002dac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	210f      	movs	r1, #15
 8002db6:	400b      	ands	r3, r1
 8002db8:	491a      	ldr	r1, [pc, #104]	; (8002e24 <HAL_RCC_OscConfig+0x348>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCC_OscConfig+0x34c>)
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <HAL_RCC_OscConfig+0x350>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2513      	movs	r5, #19
 8002dc8:	197c      	adds	r4, r7, r5
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fe fd06 	bl	80017dc <HAL_InitTick>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002dd4:	197b      	adds	r3, r7, r5
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d060      	beq.n	8002e9e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002ddc:	197b      	adds	r3, r7, r5
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	e1f2      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d03f      	beq.n	8002e6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_OscConfig+0x338>)
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	0049      	lsls	r1, r1, #1
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe fd36 	bl	8001868 <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e00:	e018      	b.n	8002e34 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e02:	f7fe fd31 	bl	8001868 <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d911      	bls.n	8002e34 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1d9      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
 8002e14:	40021000 	.word	0x40021000
 8002e18:	fffeffff 	.word	0xfffeffff
 8002e1c:	fffbffff 	.word	0xfffbffff
 8002e20:	ffffe0ff 	.word	0xffffe0ff
 8002e24:	08005cc8 	.word	0x08005cc8
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000004 	.word	0x20000004
 8002e30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e34:	4bc9      	ldr	r3, [pc, #804]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d0e0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e40:	4bc6      	ldr	r3, [pc, #792]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4ac6      	ldr	r2, [pc, #792]	; (8003160 <HAL_RCC_OscConfig+0x684>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	4bc3      	ldr	r3, [pc, #780]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e54:	4bc1      	ldr	r3, [pc, #772]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	0a19      	lsrs	r1, r3, #8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	061a      	lsls	r2, r3, #24
 8002e62:	4bbe      	ldr	r3, [pc, #760]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	e019      	b.n	8002e9e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e6a:	4bbc      	ldr	r3, [pc, #752]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4bbb      	ldr	r3, [pc, #748]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002e70:	49bc      	ldr	r1, [pc, #752]	; (8003164 <HAL_RCC_OscConfig+0x688>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe fcf7 	bl	8001868 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e80:	f7fe fcf2 	bl	8001868 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e19a      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e92:	4bb2      	ldr	r3, [pc, #712]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d036      	beq.n	8002f16 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d019      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb0:	4baa      	ldr	r3, [pc, #680]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb4:	4ba9      	ldr	r3, [pc, #676]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe fcd4 	bl	8001868 <HAL_GetTick>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fccf 	bl	8001868 <HAL_GetTick>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e177      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ed8:	4ba0      	ldr	r3, [pc, #640]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	2202      	movs	r2, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d0f1      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x3ea>
 8002ee2:	e018      	b.n	8002f16 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee4:	4b9d      	ldr	r3, [pc, #628]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee8:	4b9c      	ldr	r3, [pc, #624]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002eea:	2101      	movs	r1, #1
 8002eec:	438a      	bics	r2, r1
 8002eee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fcba 	bl	8001868 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efa:	f7fe fcb5 	bl	8001868 <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e15d      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f0c:	4b93      	ldr	r3, [pc, #588]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f10:	2202      	movs	r2, #2
 8002f12:	4013      	ands	r3, r2
 8002f14:	d1f1      	bne.n	8002efa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <HAL_RCC_OscConfig+0x446>
 8002f20:	e0ae      	b.n	8003080 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2023      	movs	r0, #35	; 0x23
 8002f24:	183b      	adds	r3, r7, r0
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b8c      	ldr	r3, [pc, #560]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	055b      	lsls	r3, r3, #21
 8002f32:	4013      	ands	r3, r2
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	4b89      	ldr	r3, [pc, #548]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3a:	4b88      	ldr	r3, [pc, #544]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	0549      	lsls	r1, r1, #21
 8002f40:	430a      	orrs	r2, r1
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b87      	ldr	r3, [pc, #540]	; (8003168 <HAL_RCC_OscConfig+0x68c>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b84      	ldr	r3, [pc, #528]	; (8003168 <HAL_RCC_OscConfig+0x68c>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b83      	ldr	r3, [pc, #524]	; (8003168 <HAL_RCC_OscConfig+0x68c>)
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	0049      	lsls	r1, r1, #1
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f64:	f7fe fc80 	bl	8001868 <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7fe fc7b 	bl	8001868 <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e123      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b79      	ldr	r3, [pc, #484]	; (8003168 <HAL_RCC_OscConfig+0x68c>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x4cc>
 8002f98:	4b70      	ldr	r3, [pc, #448]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	0049      	lsls	r1, r1, #1
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	651a      	str	r2, [r3, #80]	; 0x50
 8002fa6:	e031      	b.n	800300c <HAL_RCC_OscConfig+0x530>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10c      	bne.n	8002fca <HAL_RCC_OscConfig+0x4ee>
 8002fb0:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002fb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb4:	4b69      	ldr	r3, [pc, #420]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002fb6:	496b      	ldr	r1, [pc, #428]	; (8003164 <HAL_RCC_OscConfig+0x688>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	651a      	str	r2, [r3, #80]	; 0x50
 8002fbc:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fc0:	4b66      	ldr	r3, [pc, #408]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002fc2:	496a      	ldr	r1, [pc, #424]	; (800316c <HAL_RCC_OscConfig+0x690>)
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	651a      	str	r2, [r3, #80]	; 0x50
 8002fc8:	e020      	b.n	800300c <HAL_RCC_OscConfig+0x530>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	23a0      	movs	r3, #160	; 0xa0
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x518>
 8002fd6:	4b61      	ldr	r3, [pc, #388]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fda:	4b60      	ldr	r3, [pc, #384]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	00c9      	lsls	r1, r1, #3
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	651a      	str	r2, [r3, #80]	; 0x50
 8002fe4:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fe8:	4b5c      	ldr	r3, [pc, #368]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	0049      	lsls	r1, r1, #1
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0x530>
 8002ff4:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8002ffa:	495a      	ldr	r1, [pc, #360]	; (8003164 <HAL_RCC_OscConfig+0x688>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	651a      	str	r2, [r3, #80]	; 0x50
 8003000:	4b56      	ldr	r3, [pc, #344]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8003002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003004:	4b55      	ldr	r3, [pc, #340]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8003006:	4959      	ldr	r1, [pc, #356]	; (800316c <HAL_RCC_OscConfig+0x690>)
 8003008:	400a      	ands	r2, r1
 800300a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe fc28 	bl	8001868 <HAL_GetTick>
 8003018:	0003      	movs	r3, r0
 800301a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800301c:	e009      	b.n	8003032 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe fc23 	bl	8001868 <HAL_GetTick>
 8003022:	0002      	movs	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	4a51      	ldr	r2, [pc, #324]	; (8003170 <HAL_RCC_OscConfig+0x694>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0ca      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8003034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4013      	ands	r3, r2
 800303c:	d0ef      	beq.n	800301e <HAL_RCC_OscConfig+0x542>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7fe fc12 	bl	8001868 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003048:	e009      	b.n	800305e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe fc0d 	bl	8001868 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4a46      	ldr	r2, [pc, #280]	; (8003170 <HAL_RCC_OscConfig+0x694>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0b4      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800305e:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8003060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4013      	ands	r3, r2
 8003068:	d1ef      	bne.n	800304a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800306a:	2323      	movs	r3, #35	; 0x23
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8003076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003078:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_RCC_OscConfig+0x680>)
 800307a:	493e      	ldr	r1, [pc, #248]	; (8003174 <HAL_RCC_OscConfig+0x698>)
 800307c:	400a      	ands	r2, r1
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d100      	bne.n	800308a <HAL_RCC_OscConfig+0x5ae>
 8003088:	e09d      	b.n	80031c6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d100      	bne.n	8003092 <HAL_RCC_OscConfig+0x5b6>
 8003090:	e076      	b.n	8003180 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b02      	cmp	r3, #2
 8003098:	d145      	bne.n	8003126 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_RCC_OscConfig+0x680>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_RCC_OscConfig+0x680>)
 80030a0:	4935      	ldr	r1, [pc, #212]	; (8003178 <HAL_RCC_OscConfig+0x69c>)
 80030a2:	400a      	ands	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe fbdf 	bl	8001868 <HAL_GetTick>
 80030aa:	0003      	movs	r3, r0
 80030ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fbda 	bl	8001868 <HAL_GetTick>
 80030b4:	0002      	movs	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e082      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCC_OscConfig+0x680>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	049b      	lsls	r3, r3, #18
 80030ca:	4013      	ands	r3, r2
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_RCC_OscConfig+0x680>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x6a0>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	431a      	orrs	r2, r3
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_RCC_OscConfig+0x680>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x680>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_RCC_OscConfig+0x680>)
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	0449      	lsls	r1, r1, #17
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fbb4 	bl	8001868 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe fbaf 	bl	8001868 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e057      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_OscConfig+0x680>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	049b      	lsls	r3, r3, #18
 8003120:	4013      	ands	r3, r2
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x62a>
 8003124:	e04f      	b.n	80031c6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_RCC_OscConfig+0x680>)
 800312c:	4912      	ldr	r1, [pc, #72]	; (8003178 <HAL_RCC_OscConfig+0x69c>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fe fb99 	bl	8001868 <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fb94 	bl	8001868 <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e03c      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800314e:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_RCC_OscConfig+0x680>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	049b      	lsls	r3, r3, #18
 8003156:	4013      	ands	r3, r2
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x660>
 800315a:	e034      	b.n	80031c6 <HAL_RCC_OscConfig+0x6ea>
 800315c:	40021000 	.word	0x40021000
 8003160:	ffff1fff 	.word	0xffff1fff
 8003164:	fffffeff 	.word	0xfffffeff
 8003168:	40007000 	.word	0x40007000
 800316c:	fffffbff 	.word	0xfffffbff
 8003170:	00001388 	.word	0x00001388
 8003174:	efffffff 	.word	0xefffffff
 8003178:	feffffff 	.word	0xfeffffff
 800317c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e01d      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCC_OscConfig+0x6f4>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	025b      	lsls	r3, r3, #9
 8003198:	401a      	ands	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10f      	bne.n	80031c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	23f0      	movs	r3, #240	; 0xf0
 80031a6:	039b      	lsls	r3, r3, #14
 80031a8:	401a      	ands	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	23c0      	movs	r3, #192	; 0xc0
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	401a      	ands	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d001      	beq.n	80031c6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b00a      	add	sp, #40	; 0x28
 80031ce:	bdb0      	pop	{r4, r5, r7, pc}
 80031d0:	40021000 	.word	0x40021000

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e128      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b96      	ldr	r3, [pc, #600]	; (8003444 <HAL_RCC_ClockConfig+0x270>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d91e      	bls.n	8003234 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b93      	ldr	r3, [pc, #588]	; (8003444 <HAL_RCC_ClockConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2201      	movs	r2, #1
 80031fc:	4393      	bics	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	4b90      	ldr	r3, [pc, #576]	; (8003444 <HAL_RCC_ClockConfig+0x270>)
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003208:	f7fe fb2e 	bl	8001868 <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003210:	e009      	b.n	8003226 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003212:	f7fe fb29 	bl	8001868 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	4a8a      	ldr	r2, [pc, #552]	; (8003448 <HAL_RCC_ClockConfig+0x274>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e109      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b87      	ldr	r3, [pc, #540]	; (8003444 <HAL_RCC_ClockConfig+0x270>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2201      	movs	r2, #1
 800322c:	4013      	ands	r3, r2
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d1ee      	bne.n	8003212 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2202      	movs	r2, #2
 800323a:	4013      	ands	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323e:	4b83      	ldr	r3, [pc, #524]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	22f0      	movs	r2, #240	; 0xf0
 8003244:	4393      	bics	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	4b7f      	ldr	r3, [pc, #508]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 800324e:	430a      	orrs	r2, r1
 8003250:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2201      	movs	r2, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d100      	bne.n	800325e <HAL_RCC_ClockConfig+0x8a>
 800325c:	e089      	b.n	8003372 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003266:	4b79      	ldr	r3, [pc, #484]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	029b      	lsls	r3, r3, #10
 800326e:	4013      	ands	r3, r2
 8003270:	d120      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0e1      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800327e:	4b73      	ldr	r3, [pc, #460]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	049b      	lsls	r3, r3, #18
 8003286:	4013      	ands	r3, r2
 8003288:	d114      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0d5      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003296:	4b6d      	ldr	r3, [pc, #436]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2204      	movs	r2, #4
 800329c:	4013      	ands	r3, r2
 800329e:	d109      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0ca      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032a4:	4b69      	ldr	r3, [pc, #420]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4013      	ands	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0c2      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b4:	4b65      	ldr	r3, [pc, #404]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2203      	movs	r2, #3
 80032ba:	4393      	bics	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4b62      	ldr	r3, [pc, #392]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fe face 	bl	8001868 <HAL_GetTick>
 80032cc:	0003      	movs	r3, r0
 80032ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d111      	bne.n	80032fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d8:	e009      	b.n	80032ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032da:	f7fe fac5 	bl	8001868 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_RCC_ClockConfig+0x274>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0a5      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ee:	4b57      	ldr	r3, [pc, #348]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	220c      	movs	r2, #12
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d1ef      	bne.n	80032da <HAL_RCC_ClockConfig+0x106>
 80032fa:	e03a      	b.n	8003372 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d111      	bne.n	8003328 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003304:	e009      	b.n	800331a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003306:	f7fe faaf 	bl	8001868 <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	4a4d      	ldr	r2, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x274>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e08f      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800331a:	4b4c      	ldr	r3, [pc, #304]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	220c      	movs	r2, #12
 8003320:	4013      	ands	r3, r2
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d1ef      	bne.n	8003306 <HAL_RCC_ClockConfig+0x132>
 8003326:	e024      	b.n	8003372 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d11b      	bne.n	8003368 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003330:	e009      	b.n	8003346 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003332:	f7fe fa99 	bl	8001868 <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	4a42      	ldr	r2, [pc, #264]	; (8003448 <HAL_RCC_ClockConfig+0x274>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e079      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	220c      	movs	r2, #12
 800334c:	4013      	ands	r3, r2
 800334e:	2b04      	cmp	r3, #4
 8003350:	d1ef      	bne.n	8003332 <HAL_RCC_ClockConfig+0x15e>
 8003352:	e00e      	b.n	8003372 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe fa88 	bl	8001868 <HAL_GetTick>
 8003358:	0002      	movs	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <HAL_RCC_ClockConfig+0x274>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e068      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003368:	4b38      	ldr	r3, [pc, #224]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	220c      	movs	r2, #12
 800336e:	4013      	ands	r3, r2
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003372:	4b34      	ldr	r3, [pc, #208]	; (8003444 <HAL_RCC_ClockConfig+0x270>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2201      	movs	r2, #1
 8003378:	4013      	ands	r3, r2
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d21e      	bcs.n	80033be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003380:	4b30      	ldr	r3, [pc, #192]	; (8003444 <HAL_RCC_ClockConfig+0x270>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2201      	movs	r2, #1
 8003386:	4393      	bics	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <HAL_RCC_ClockConfig+0x270>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003392:	f7fe fa69 	bl	8001868 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	e009      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339c:	f7fe fa64 	bl	8001868 <HAL_GetTick>
 80033a0:	0002      	movs	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	4a28      	ldr	r2, [pc, #160]	; (8003448 <HAL_RCC_ClockConfig+0x274>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e044      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_ClockConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d1ee      	bne.n	800339c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2204      	movs	r2, #4
 80033c4:	4013      	ands	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c8:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a20      	ldr	r2, [pc, #128]	; (8003450 <HAL_RCC_ClockConfig+0x27c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 80033d8:	430a      	orrs	r2, r1
 80033da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2208      	movs	r2, #8
 80033e2:	4013      	ands	r3, r2
 80033e4:	d00a      	beq.n	80033fc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_RCC_ClockConfig+0x280>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	00da      	lsls	r2, r3, #3
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fc:	f000 f832 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8003400:	0001      	movs	r1, r0
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_ClockConfig+0x278>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	220f      	movs	r2, #15
 800340a:	4013      	ands	r3, r2
 800340c:	4a12      	ldr	r2, [pc, #72]	; (8003458 <HAL_RCC_ClockConfig+0x284>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	000a      	movs	r2, r1
 8003412:	40da      	lsrs	r2, r3
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_RCC_ClockConfig+0x288>)
 8003416:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_RCC_ClockConfig+0x28c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	250b      	movs	r5, #11
 800341e:	197c      	adds	r4, r7, r5
 8003420:	0018      	movs	r0, r3
 8003422:	f7fe f9db 	bl	80017dc <HAL_InitTick>
 8003426:	0003      	movs	r3, r0
 8003428:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800342a:	197b      	adds	r3, r7, r5
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003432:	197b      	adds	r3, r7, r5
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	e000      	b.n	800343a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	0018      	movs	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	b004      	add	sp, #16
 8003440:	bdb0      	pop	{r4, r5, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40022000 	.word	0x40022000
 8003448:	00001388 	.word	0x00001388
 800344c:	40021000 	.word	0x40021000
 8003450:	fffff8ff 	.word	0xfffff8ff
 8003454:	ffffc7ff 	.word	0xffffc7ff
 8003458:	08005cc8 	.word	0x08005cc8
 800345c:	20000000 	.word	0x20000000
 8003460:	20000004 	.word	0x20000004

08003464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b5b0      	push	{r4, r5, r7, lr}
 8003466:	b08e      	sub	sp, #56	; 0x38
 8003468:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800346a:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_RCC_GetSysClockFreq+0x138>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003472:	230c      	movs	r3, #12
 8003474:	4013      	ands	r3, r2
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d014      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x40>
 800347a:	d900      	bls.n	800347e <HAL_RCC_GetSysClockFreq+0x1a>
 800347c:	e07b      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x112>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x24>
 8003482:	2b08      	cmp	r3, #8
 8003484:	d00b      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0x3a>
 8003486:	e076      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003488:	4b44      	ldr	r3, [pc, #272]	; (800359c <HAL_RCC_GetSysClockFreq+0x138>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2210      	movs	r2, #16
 800348e:	4013      	ands	r3, r2
 8003490:	d002      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003496:	e07c      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800349c:	e079      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034a2:	e076      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	0c9a      	lsrs	r2, r3, #18
 80034a8:	230f      	movs	r3, #15
 80034aa:	401a      	ands	r2, r3
 80034ac:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <HAL_RCC_GetSysClockFreq+0x148>)
 80034ae:	5c9b      	ldrb	r3, [r3, r2]
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	0d9a      	lsrs	r2, r3, #22
 80034b6:	2303      	movs	r3, #3
 80034b8:	4013      	ands	r3, r2
 80034ba:	3301      	adds	r3, #1
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_RCC_GetSysClockFreq+0x138>)
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	025b      	lsls	r3, r3, #9
 80034c6:	4013      	ands	r3, r2
 80034c8:	d01a      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	4a35      	ldr	r2, [pc, #212]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80034d4:	2300      	movs	r3, #0
 80034d6:	69b8      	ldr	r0, [r7, #24]
 80034d8:	69f9      	ldr	r1, [r7, #28]
 80034da:	f7fc fecb 	bl	8000274 <__aeabi_lmul>
 80034de:	0002      	movs	r2, r0
 80034e0:	000b      	movs	r3, r1
 80034e2:	0010      	movs	r0, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f7fc fe9f 	bl	8000234 <__aeabi_uldivmod>
 80034f6:	0002      	movs	r2, r0
 80034f8:	000b      	movs	r3, r1
 80034fa:	0013      	movs	r3, r2
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
 80034fe:	e037      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003500:	4b26      	ldr	r3, [pc, #152]	; (800359c <HAL_RCC_GetSysClockFreq+0x138>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2210      	movs	r2, #16
 8003506:	4013      	ands	r3, r2
 8003508:	d01a      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003514:	2300      	movs	r3, #0
 8003516:	68b8      	ldr	r0, [r7, #8]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	f7fc feab 	bl	8000274 <__aeabi_lmul>
 800351e:	0002      	movs	r2, r0
 8003520:	000b      	movs	r3, r1
 8003522:	0010      	movs	r0, r2
 8003524:	0019      	movs	r1, r3
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f7fc fe7f 	bl	8000234 <__aeabi_uldivmod>
 8003536:	0002      	movs	r2, r0
 8003538:	000b      	movs	r3, r1
 800353a:	0013      	movs	r3, r2
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
 800353e:	e017      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	0018      	movs	r0, r3
 8003544:	2300      	movs	r3, #0
 8003546:	0019      	movs	r1, r3
 8003548:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800354a:	2300      	movs	r3, #0
 800354c:	f7fc fe92 	bl	8000274 <__aeabi_lmul>
 8003550:	0002      	movs	r2, r0
 8003552:	000b      	movs	r3, r1
 8003554:	0010      	movs	r0, r2
 8003556:	0019      	movs	r1, r3
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	001c      	movs	r4, r3
 800355c:	2300      	movs	r3, #0
 800355e:	001d      	movs	r5, r3
 8003560:	0022      	movs	r2, r4
 8003562:	002b      	movs	r3, r5
 8003564:	f7fc fe66 	bl	8000234 <__aeabi_uldivmod>
 8003568:	0002      	movs	r2, r0
 800356a:	000b      	movs	r3, r1
 800356c:	0013      	movs	r3, r2
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003574:	e00d      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_GetSysClockFreq+0x138>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0b5b      	lsrs	r3, r3, #13
 800357c:	2207      	movs	r2, #7
 800357e:	4013      	ands	r3, r2
 8003580:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	3301      	adds	r3, #1
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	0212      	lsls	r2, r2, #8
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003590:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b00e      	add	sp, #56	; 0x38
 800359a:	bdb0      	pop	{r4, r5, r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	003d0900 	.word	0x003d0900
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	007a1200 	.word	0x007a1200
 80035ac:	08005ce0 	.word	0x08005ce0

080035b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000000 	.word	0x20000000

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c8:	f7ff fff2 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035cc:	0001      	movs	r1, r0
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	2207      	movs	r2, #7
 80035d6:	4013      	ands	r3, r2
 80035d8:	4a04      	ldr	r2, [pc, #16]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	40d9      	lsrs	r1, r3
 80035de:	000b      	movs	r3, r1
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08005cd8 	.word	0x08005cd8

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f4:	f7ff ffdc 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035f8:	0001      	movs	r1, r0
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	0adb      	lsrs	r3, r3, #11
 8003600:	2207      	movs	r2, #7
 8003602:	4013      	ands	r3, r2
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	40d9      	lsrs	r1, r3
 800360a:	000b      	movs	r3, r1
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	40021000 	.word	0x40021000
 8003618:	08005cd8 	.word	0x08005cd8

0800361c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003624:	2017      	movs	r0, #23
 8003626:	183b      	adds	r3, r7, r0
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2220      	movs	r2, #32
 8003632:	4013      	ands	r3, r2
 8003634:	d100      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003636:	e0c2      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003638:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800363a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	055b      	lsls	r3, r3, #21
 8003640:	4013      	ands	r3, r2
 8003642:	d109      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003644:	4b7e      	ldr	r3, [pc, #504]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003648:	4b7d      	ldr	r3, [pc, #500]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	0549      	lsls	r1, r1, #21
 800364e:	430a      	orrs	r2, r1
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003652:	183b      	adds	r3, r7, r0
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4b7a      	ldr	r3, [pc, #488]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4013      	ands	r3, r2
 8003662:	d11a      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003664:	4b77      	ldr	r3, [pc, #476]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800366a:	2180      	movs	r1, #128	; 0x80
 800366c:	0049      	lsls	r1, r1, #1
 800366e:	430a      	orrs	r2, r1
 8003670:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fe f8f9 	bl	8001868 <HAL_GetTick>
 8003676:	0003      	movs	r3, r0
 8003678:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367a:	e008      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367c:	f7fe f8f4 	bl	8001868 <HAL_GetTick>
 8003680:	0002      	movs	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0d4      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4013      	ands	r3, r2
 8003698:	d0f0      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800369a:	4b69      	ldr	r3, [pc, #420]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	23c0      	movs	r3, #192	; 0xc0
 80036a0:	039b      	lsls	r3, r3, #14
 80036a2:	4013      	ands	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	23c0      	movs	r3, #192	; 0xc0
 80036ac:	039b      	lsls	r3, r3, #14
 80036ae:	4013      	ands	r3, r2
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d013      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	23c0      	movs	r3, #192	; 0xc0
 80036bc:	029b      	lsls	r3, r3, #10
 80036be:	401a      	ands	r2, r3
 80036c0:	23c0      	movs	r3, #192	; 0xc0
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d10a      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036c8:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	029b      	lsls	r3, r3, #10
 80036d0:	401a      	ands	r2, r3
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	029b      	lsls	r3, r3, #10
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0ac      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036de:	4b58      	ldr	r3, [pc, #352]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80036e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036e2:	23c0      	movs	r3, #192	; 0xc0
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	4013      	ands	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d03b      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	23c0      	movs	r3, #192	; 0xc0
 80036f6:	029b      	lsls	r3, r3, #10
 80036f8:	4013      	ands	r3, r2
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d033      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2220      	movs	r2, #32
 8003706:	4013      	ands	r3, r2
 8003708:	d02e      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800370a:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800370c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370e:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003710:	4013      	ands	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003714:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003718:	4b49      	ldr	r3, [pc, #292]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	0309      	lsls	r1, r1, #12
 800371e:	430a      	orrs	r2, r1
 8003720:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003726:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003728:	4948      	ldr	r1, [pc, #288]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800372a:	400a      	ands	r2, r1
 800372c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4013      	ands	r3, r2
 800373c:	d014      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fe f893 	bl	8001868 <HAL_GetTick>
 8003742:	0003      	movs	r3, r0
 8003744:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003746:	e009      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fe f88e 	bl	8001868 <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e06d      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800375c:	4b38      	ldr	r3, [pc, #224]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800375e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4013      	ands	r3, r2
 8003766:	d0ef      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	23c0      	movs	r3, #192	; 0xc0
 800376e:	029b      	lsls	r3, r3, #10
 8003770:	401a      	ands	r2, r3
 8003772:	23c0      	movs	r3, #192	; 0xc0
 8003774:	029b      	lsls	r3, r3, #10
 8003776:	429a      	cmp	r2, r3
 8003778:	d10c      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800377a:	4b31      	ldr	r3, [pc, #196]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a35      	ldr	r2, [pc, #212]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	23c0      	movs	r3, #192	; 0xc0
 800378a:	039b      	lsls	r3, r3, #14
 800378c:	401a      	ands	r2, r3
 800378e:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003796:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	23c0      	movs	r3, #192	; 0xc0
 800379e:	029b      	lsls	r3, r3, #10
 80037a0:	401a      	ands	r2, r3
 80037a2:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a8:	2317      	movs	r3, #23
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037b8:	4927      	ldr	r1, [pc, #156]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80037ba:	400a      	ands	r2, r1
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2202      	movs	r2, #2
 80037c4:	4013      	ands	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037cc:	220c      	movs	r2, #12
 80037ce:	4393      	bics	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2204      	movs	r2, #4
 80037e2:	4013      	ands	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037f6:	430a      	orrs	r2, r1
 80037f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2208      	movs	r2, #8
 8003800:	4013      	ands	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003808:	4a15      	ldr	r2, [pc, #84]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003814:	430a      	orrs	r2, r1
 8003816:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2280      	movs	r2, #128	; 0x80
 800381e:	4013      	ands	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003822:	4b07      	ldr	r3, [pc, #28]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003832:	430a      	orrs	r2, r1
 8003834:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b006      	add	sp, #24
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	40007000 	.word	0x40007000
 8003848:	fffcffff 	.word	0xfffcffff
 800384c:	fff7ffff 	.word	0xfff7ffff
 8003850:	00001388 	.word	0x00001388
 8003854:	ffcfffff 	.word	0xffcfffff
 8003858:	efffffff 	.word	0xefffffff
 800385c:	fffff3ff 	.word	0xfffff3ff
 8003860:	ffffcfff 	.word	0xffffcfff
 8003864:	fff3ffff 	.word	0xfff3ffff

08003868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07b      	b.n	8003972 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	2382      	movs	r3, #130	; 0x82
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	429a      	cmp	r2, r3
 800388c:	d009      	beq.n	80038a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	61da      	str	r2, [r3, #28]
 8003894:	e005      	b.n	80038a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2251      	movs	r2, #81	; 0x51
 80038ac:	5c9b      	ldrb	r3, [r3, r2]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d107      	bne.n	80038c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2250      	movs	r2, #80	; 0x50
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0018      	movs	r0, r3
 80038c0:	f7fd feaa 	bl	8001618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2251      	movs	r2, #81	; 0x51
 80038c8:	2102      	movs	r1, #2
 80038ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2140      	movs	r1, #64	; 0x40
 80038d8:	438a      	bics	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	2382      	movs	r3, #130	; 0x82
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	401a      	ands	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6899      	ldr	r1, [r3, #8]
 80038ea:	2384      	movs	r3, #132	; 0x84
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	400b      	ands	r3, r1
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68d9      	ldr	r1, [r3, #12]
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	400b      	ands	r3, r1
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2102      	movs	r1, #2
 8003904:	400b      	ands	r3, r1
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	2101      	movs	r1, #1
 800390e:	400b      	ands	r3, r1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6999      	ldr	r1, [r3, #24]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	400b      	ands	r3, r1
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	2138      	movs	r1, #56	; 0x38
 8003924:	400b      	ands	r3, r1
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	400b      	ands	r3, r1
 8003930:	431a      	orrs	r2, r3
 8003932:	0011      	movs	r1, r2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	019b      	lsls	r3, r3, #6
 800393c:	401a      	ands	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	2204      	movs	r2, #4
 800394e:	4013      	ands	r3, r2
 8003950:	0019      	movs	r1, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	2210      	movs	r2, #16
 8003958:	401a      	ands	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2251      	movs	r2, #81	; 0x51
 800396c:	2101      	movs	r1, #1
 800396e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b088      	sub	sp, #32
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	1dbb      	adds	r3, r7, #6
 8003988:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800398a:	231f      	movs	r3, #31
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2250      	movs	r2, #80	; 0x50
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_SPI_Transmit+0x26>
 800399c:	2302      	movs	r3, #2
 800399e:	e13e      	b.n	8003c1e <HAL_SPI_Transmit+0x2a4>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2250      	movs	r2, #80	; 0x50
 80039a4:	2101      	movs	r1, #1
 80039a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039a8:	f7fd ff5e 	bl	8001868 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80039b0:	2316      	movs	r3, #22
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	1dba      	adds	r2, r7, #6
 80039b6:	8812      	ldrh	r2, [r2, #0]
 80039b8:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2251      	movs	r2, #81	; 0x51
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d004      	beq.n	80039d0 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80039c6:	231f      	movs	r3, #31
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2202      	movs	r2, #2
 80039cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80039ce:	e11b      	b.n	8003c08 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_SPI_Transmit+0x64>
 80039d6:	1dbb      	adds	r3, r7, #6
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80039de:	231f      	movs	r3, #31
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80039e6:	e10f      	b.n	8003c08 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2251      	movs	r2, #81	; 0x51
 80039ec:	2103      	movs	r1, #3
 80039ee:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1dba      	adds	r2, r7, #6
 8003a00:	8812      	ldrh	r2, [r2, #0]
 8003a02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1dba      	adds	r2, r7, #6
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d110      	bne.n	8003a58 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	438a      	bics	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	01c9      	lsls	r1, r1, #7
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2240      	movs	r2, #64	; 0x40
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d007      	beq.n	8003a76 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2140      	movs	r1, #64	; 0x40
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d14e      	bne.n	8003b20 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <HAL_SPI_Transmit+0x11a>
 8003a8a:	2316      	movs	r3, #22
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d13f      	bne.n	8003b14 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	881a      	ldrh	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	1c9a      	adds	r2, r3, #2
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ab8:	e02c      	b.n	8003b14 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d112      	bne.n	8003aee <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	881a      	ldrh	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	1c9a      	adds	r2, r3, #2
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aec:	e012      	b.n	8003b14 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aee:	f7fd febb 	bl	8001868 <HAL_GetTick>
 8003af2:	0002      	movs	r2, r0
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d802      	bhi.n	8003b04 <HAL_SPI_Transmit+0x18a>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	d102      	bne.n	8003b0a <HAL_SPI_Transmit+0x190>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8003b0a:	231f      	movs	r3, #31
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2203      	movs	r2, #3
 8003b10:	701a      	strb	r2, [r3, #0]
          goto error;
 8003b12:	e079      	b.n	8003c08 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cd      	bne.n	8003aba <HAL_SPI_Transmit+0x140>
 8003b1e:	e04f      	b.n	8003bc0 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <HAL_SPI_Transmit+0x1b8>
 8003b28:	2316      	movs	r3, #22
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d141      	bne.n	8003bb6 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	7812      	ldrb	r2, [r2, #0]
 8003b3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b58:	e02d      	b.n	8003bb6 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2202      	movs	r2, #2
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d113      	bne.n	8003b90 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	7812      	ldrb	r2, [r2, #0]
 8003b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b8e:	e012      	b.n	8003bb6 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b90:	f7fd fe6a 	bl	8001868 <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d802      	bhi.n	8003ba6 <HAL_SPI_Transmit+0x22c>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	d102      	bne.n	8003bac <HAL_SPI_Transmit+0x232>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003bac:	231f      	movs	r3, #31
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	701a      	strb	r2, [r3, #0]
          goto error;
 8003bb4:	e028      	b.n	8003c08 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1cc      	bne.n	8003b5a <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	6839      	ldr	r1, [r7, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f000 fc08 	bl	80043dc <SPI_EndRxTxTransaction>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d004      	beq.n	8003c06 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003bfc:	231f      	movs	r3, #31
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e000      	b.n	8003c08 <HAL_SPI_Transmit+0x28e>
  }

error:
 8003c06:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2251      	movs	r2, #81	; 0x51
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2250      	movs	r2, #80	; 0x50
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003c18:	231f      	movs	r3, #31
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	781b      	ldrb	r3, [r3, #0]
}
 8003c1e:	0018      	movs	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b008      	add	sp, #32
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	1dbb      	adds	r3, r7, #6
 8003c36:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c38:	2317      	movs	r3, #23
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	2382      	movs	r3, #130	; 0x82
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d113      	bne.n	8003c74 <HAL_SPI_Receive+0x4c>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10f      	bne.n	8003c74 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2251      	movs	r2, #81	; 0x51
 8003c58:	2104      	movs	r1, #4
 8003c5a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	881c      	ldrh	r4, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	0023      	movs	r3, r4
 8003c6c:	f000 f902 	bl	8003e74 <HAL_SPI_TransmitReceive>
 8003c70:	0003      	movs	r3, r0
 8003c72:	e0f9      	b.n	8003e68 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2250      	movs	r2, #80	; 0x50
 8003c78:	5c9b      	ldrb	r3, [r3, r2]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_SPI_Receive+0x5a>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0f2      	b.n	8003e68 <HAL_SPI_Receive+0x240>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2250      	movs	r2, #80	; 0x50
 8003c86:	2101      	movs	r1, #1
 8003c88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c8a:	f7fd fded 	bl	8001868 <HAL_GetTick>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2251      	movs	r2, #81	; 0x51
 8003c96:	5c9b      	ldrb	r3, [r3, r2]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d004      	beq.n	8003ca8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003c9e:	2317      	movs	r3, #23
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ca6:	e0d4      	b.n	8003e52 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_SPI_Receive+0x8e>
 8003cae:	1dbb      	adds	r3, r7, #6
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003cb6:	2317      	movs	r3, #23
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cbe:	e0c8      	b.n	8003e52 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2251      	movs	r2, #81	; 0x51
 8003cc4:	2104      	movs	r1, #4
 8003cc6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1dba      	adds	r2, r7, #6
 8003cd8:	8812      	ldrh	r2, [r2, #0]
 8003cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1dba      	adds	r2, r7, #6
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d10f      	bne.n	8003d2e <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2140      	movs	r1, #64	; 0x40
 8003d1a:	438a      	bics	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4951      	ldr	r1, [pc, #324]	; (8003e70 <HAL_SPI_Receive+0x248>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2240      	movs	r2, #64	; 0x40
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d007      	beq.n	8003d4c <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d164      	bne.n	8003e1e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d54:	e02f      	b.n	8003db6 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d115      	bne.n	8003d90 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	7812      	ldrb	r2, [r2, #0]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d8e:	e012      	b.n	8003db6 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d90:	f7fd fd6a 	bl	8001868 <HAL_GetTick>
 8003d94:	0002      	movs	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d802      	bhi.n	8003da6 <HAL_SPI_Receive+0x17e>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	3301      	adds	r3, #1
 8003da4:	d102      	bne.n	8003dac <HAL_SPI_Receive+0x184>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8003dac:	2317      	movs	r3, #23
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	2203      	movs	r2, #3
 8003db2:	701a      	strb	r2, [r3, #0]
          goto error;
 8003db4:	e04d      	b.n	8003e52 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ca      	bne.n	8003d56 <HAL_SPI_Receive+0x12e>
 8003dc0:	e032      	b.n	8003e28 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d113      	bne.n	8003df8 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	b292      	uxth	r2, r2
 8003ddc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003df6:	e012      	b.n	8003e1e <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df8:	f7fd fd36 	bl	8001868 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d802      	bhi.n	8003e0e <HAL_SPI_Receive+0x1e6>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	d102      	bne.n	8003e14 <HAL_SPI_Receive+0x1ec>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8003e14:	2317      	movs	r3, #23
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2203      	movs	r2, #3
 8003e1a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e1c:	e019      	b.n	8003e52 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1cc      	bne.n	8003dc2 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 fa6a 	bl	8004308 <SPI_EndRxTransaction>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8003e46:	2317      	movs	r3, #23
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e000      	b.n	8003e52 <HAL_SPI_Receive+0x22a>
  }

error :
 8003e50:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2251      	movs	r2, #81	; 0x51
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2250      	movs	r2, #80	; 0x50
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e62:	2317      	movs	r3, #23
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	781b      	ldrb	r3, [r3, #0]
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b007      	add	sp, #28
 8003e6e:	bd90      	pop	{r4, r7, pc}
 8003e70:	ffffbfff 	.word	0xffffbfff

08003e74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08c      	sub	sp, #48	; 0x30
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	001a      	movs	r2, r3
 8003e82:	1cbb      	adds	r3, r7, #2
 8003e84:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e86:	2301      	movs	r3, #1
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e8a:	232b      	movs	r3, #43	; 0x2b
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2250      	movs	r2, #80	; 0x50
 8003e96:	5c9b      	ldrb	r3, [r3, r2]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x2c>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e1a0      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x36e>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2250      	movs	r2, #80	; 0x50
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea8:	f7fd fcde 	bl	8001868 <HAL_GetTick>
 8003eac:	0003      	movs	r3, r0
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eb0:	2023      	movs	r0, #35	; 0x23
 8003eb2:	183b      	adds	r3, r7, r0
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	2151      	movs	r1, #81	; 0x51
 8003eb8:	5c52      	ldrb	r2, [r2, r1]
 8003eba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ec2:	231a      	movs	r3, #26
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	1cba      	adds	r2, r7, #2
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ecc:	183b      	adds	r3, r7, r0
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d011      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x84>
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	2382      	movs	r3, #130	; 0x82
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d107      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x7a>
 8003ee6:	183b      	adds	r3, r7, r0
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d004      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003eee:	232b      	movs	r3, #43	; 0x2b
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ef6:	e169      	b.n	80041cc <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x98>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x98>
 8003f04:	1cbb      	adds	r3, r7, #2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003f0c:	232b      	movs	r3, #43	; 0x2b
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f14:	e15a      	b.n	80041cc <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2251      	movs	r2, #81	; 0x51
 8003f1a:	5c9b      	ldrb	r3, [r3, r2]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d003      	beq.n	8003f2a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2251      	movs	r2, #81	; 0x51
 8003f26:	2105      	movs	r1, #5
 8003f28:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1cba      	adds	r2, r7, #2
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1cba      	adds	r2, r7, #2
 8003f42:	8812      	ldrh	r2, [r2, #0]
 8003f44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1cba      	adds	r2, r7, #2
 8003f50:	8812      	ldrh	r2, [r2, #0]
 8003f52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1cba      	adds	r2, r7, #2
 8003f58:	8812      	ldrh	r2, [r2, #0]
 8003f5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d007      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	2380      	movs	r3, #128	; 0x80
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d000      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x120>
 8003f92:	e07a      	b.n	800408a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x132>
 8003f9c:	231a      	movs	r3, #26
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d166      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fca:	e053      	b.n	8004074 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d11b      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x19e>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d016      	beq.n	8004012 <HAL_SPI_TransmitReceive+0x19e>
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d113      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	881a      	ldrh	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2201      	movs	r2, #1
 800401a:	4013      	ands	r3, r2
 800401c:	2b01      	cmp	r3, #1
 800401e:	d119      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x1e0>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d014      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	b292      	uxth	r2, r2
 8004036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	1c9a      	adds	r2, r3, #2
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004050:	2301      	movs	r3, #1
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004054:	f7fd fc08 	bl	8001868 <HAL_GetTick>
 8004058:	0002      	movs	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004060:	429a      	cmp	r2, r3
 8004062:	d807      	bhi.n	8004074 <HAL_SPI_TransmitReceive+0x200>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	3301      	adds	r3, #1
 8004068:	d004      	beq.n	8004074 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800406a:	232b      	movs	r3, #43	; 0x2b
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	2203      	movs	r2, #3
 8004070:	701a      	strb	r2, [r3, #0]
        goto error;
 8004072:	e0ab      	b.n	80041cc <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1a6      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x158>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1a1      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x158>
 8004088:	e07f      	b.n	800418a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_SPI_TransmitReceive+0x22a>
 8004092:	231a      	movs	r3, #26
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d000      	beq.n	800409e <HAL_SPI_TransmitReceive+0x22a>
 800409c:	e06b      	b.n	8004176 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	7812      	ldrb	r2, [r2, #0]
 80040aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c4:	e057      	b.n	8004176 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2202      	movs	r2, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d11c      	bne.n	800410e <HAL_SPI_TransmitReceive+0x29a>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d017      	beq.n	800410e <HAL_SPI_TransmitReceive+0x29a>
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d114      	bne.n	800410e <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	7812      	ldrb	r2, [r2, #0]
 80040f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2201      	movs	r2, #1
 8004116:	4013      	ands	r3, r2
 8004118:	2b01      	cmp	r3, #1
 800411a:	d119      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x2dc>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d014      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800414c:	2301      	movs	r3, #1
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004150:	f7fd fb8a 	bl	8001868 <HAL_GetTick>
 8004154:	0002      	movs	r2, r0
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800415c:	429a      	cmp	r2, r3
 800415e:	d802      	bhi.n	8004166 <HAL_SPI_TransmitReceive+0x2f2>
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	3301      	adds	r3, #1
 8004164:	d102      	bne.n	800416c <HAL_SPI_TransmitReceive+0x2f8>
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800416c:	232b      	movs	r3, #43	; 0x2b
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2203      	movs	r2, #3
 8004172:	701a      	strb	r2, [r3, #0]
        goto error;
 8004174:	e02a      	b.n	80041cc <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1a2      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x252>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d19d      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	0018      	movs	r0, r3
 8004192:	f000 f923 	bl	80043dc <SPI_EndRxTxTransaction>
 8004196:	1e03      	subs	r3, r0, #0
 8004198:	d007      	beq.n	80041aa <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800419a:	232b      	movs	r3, #43	; 0x2b
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041a8:	e010      	b.n	80041cc <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	e000      	b.n	80041cc <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80041ca:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2251      	movs	r2, #81	; 0x51
 80041d0:	2101      	movs	r1, #1
 80041d2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2250      	movs	r2, #80	; 0x50
 80041d8:	2100      	movs	r1, #0
 80041da:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041dc:	232b      	movs	r3, #43	; 0x2b
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	781b      	ldrb	r3, [r3, #0]
}
 80041e2:	0018      	movs	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b00c      	add	sp, #48	; 0x30
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	1dfb      	adds	r3, r7, #7
 80041fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041fc:	f7fd fb34 	bl	8001868 <HAL_GetTick>
 8004200:	0002      	movs	r2, r0
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	18d3      	adds	r3, r2, r3
 800420a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800420c:	f7fd fb2c 	bl	8001868 <HAL_GetTick>
 8004210:	0003      	movs	r3, r0
 8004212:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004214:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	015b      	lsls	r3, r3, #5
 800421a:	0d1b      	lsrs	r3, r3, #20
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	4353      	muls	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004222:	e058      	b.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	d055      	beq.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800422a:	f7fd fb1d 	bl	8001868 <HAL_GetTick>
 800422e:	0002      	movs	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	429a      	cmp	r2, r3
 8004238:	d902      	bls.n	8004240 <SPI_WaitFlagStateUntilTimeout+0x54>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d142      	bne.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	21e0      	movs	r1, #224	; 0xe0
 800424c:	438a      	bics	r2, r1
 800424e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	2382      	movs	r3, #130	; 0x82
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	429a      	cmp	r2, r3
 800425a:	d113      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x98>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	429a      	cmp	r2, r3
 8004266:	d005      	beq.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	429a      	cmp	r2, r3
 8004272:	d107      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	438a      	bics	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	019b      	lsls	r3, r3, #6
 800428c:	429a      	cmp	r2, r3
 800428e:	d110      	bne.n	80042b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	491a      	ldr	r1, [pc, #104]	; (8004304 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800429c:	400a      	ands	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	0189      	lsls	r1, r1, #6
 80042ae:	430a      	orrs	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2251      	movs	r2, #81	; 0x51
 80042b6:	2101      	movs	r1, #1
 80042b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2250      	movs	r2, #80	; 0x50
 80042be:	2100      	movs	r1, #0
 80042c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e017      	b.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	425a      	negs	r2, r3
 80042e6:	4153      	adcs	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	001a      	movs	r2, r3
 80042ec:	1dfb      	adds	r3, r7, #7
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d197      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b008      	add	sp, #32
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	20000000 	.word	0x20000000
 8004304:	ffffdfff 	.word	0xffffdfff

08004308 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	2382      	movs	r3, #130	; 0x82
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	429a      	cmp	r2, r3
 800431e:	d113      	bne.n	8004348 <SPI_EndRxTransaction+0x40>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	429a      	cmp	r2, r3
 800432a:	d005      	beq.n	8004338 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	429a      	cmp	r2, r3
 8004336:	d107      	bne.n	8004348 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	438a      	bics	r2, r1
 8004346:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	2382      	movs	r3, #130	; 0x82
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	429a      	cmp	r2, r3
 8004352:	d12b      	bne.n	80043ac <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	429a      	cmp	r2, r3
 800435e:	d012      	beq.n	8004386 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	0013      	movs	r3, r2
 800436a:	2200      	movs	r2, #0
 800436c:	2180      	movs	r1, #128	; 0x80
 800436e:	f7ff ff3d 	bl	80041ec <SPI_WaitFlagStateUntilTimeout>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d02d      	beq.n	80043d2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	2220      	movs	r2, #32
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e026      	b.n	80043d4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	0013      	movs	r3, r2
 8004390:	2200      	movs	r2, #0
 8004392:	2101      	movs	r1, #1
 8004394:	f7ff ff2a 	bl	80041ec <SPI_WaitFlagStateUntilTimeout>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d01a      	beq.n	80043d2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	2220      	movs	r2, #32
 80043a2:	431a      	orrs	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e013      	b.n	80043d4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	0013      	movs	r3, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	2101      	movs	r1, #1
 80043ba:	f7ff ff17 	bl	80041ec <SPI_WaitFlagStateUntilTimeout>
 80043be:	1e03      	subs	r3, r0, #0
 80043c0:	d007      	beq.n	80043d2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	2220      	movs	r2, #32
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e000      	b.n	80043d4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b004      	add	sp, #16
 80043da:	bd80      	pop	{r7, pc}

080043dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <SPI_EndRxTxTransaction+0x84>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	491d      	ldr	r1, [pc, #116]	; (8004464 <SPI_EndRxTxTransaction+0x88>)
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7fb fe94 	bl	800011c <__udivsi3>
 80043f4:	0003      	movs	r3, r0
 80043f6:	001a      	movs	r2, r3
 80043f8:	0013      	movs	r3, r2
 80043fa:	015b      	lsls	r3, r3, #5
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	189b      	adds	r3, r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	2382      	movs	r3, #130	; 0x82
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	429a      	cmp	r2, r3
 8004410:	d112      	bne.n	8004438 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	0013      	movs	r3, r2
 800441c:	2200      	movs	r2, #0
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	f7ff fee4 	bl	80041ec <SPI_WaitFlagStateUntilTimeout>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d016      	beq.n	8004456 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	2220      	movs	r2, #32
 800442e:	431a      	orrs	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e00f      	b.n	8004458 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	3b01      	subs	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2280      	movs	r2, #128	; 0x80
 800444c:	4013      	ands	r3, r2
 800444e:	2b80      	cmp	r3, #128	; 0x80
 8004450:	d0f2      	beq.n	8004438 <SPI_EndRxTxTransaction+0x5c>
 8004452:	e000      	b.n	8004456 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004454:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b006      	add	sp, #24
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000000 	.word	0x20000000
 8004464:	016e3600 	.word	0x016e3600

08004468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e044      	b.n	8004504 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800447e:	2b00      	cmp	r3, #0
 8004480:	d107      	bne.n	8004492 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2274      	movs	r2, #116	; 0x74
 8004486:	2100      	movs	r1, #0
 8004488:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	0018      	movs	r0, r3
 800448e:	f7fd f84d 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2224      	movs	r2, #36	; 0x24
 8004496:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2101      	movs	r1, #1
 80044a4:	438a      	bics	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 f9c6 	bl	800483c <UART_SetConfig>
 80044b0:	0003      	movs	r3, r0
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e024      	b.n	8004504 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 fc03 	bl	8004cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	490d      	ldr	r1, [pc, #52]	; (800450c <HAL_UART_Init+0xa4>)
 80044d6:	400a      	ands	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	212a      	movs	r1, #42	; 0x2a
 80044e6:	438a      	bics	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 fc9b 	bl	8004e38 <UART_CheckIdleState>
 8004502:	0003      	movs	r3, r0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}
 800450c:	ffffb7ff 	.word	0xffffb7ff

08004510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	1dbb      	adds	r3, r7, #6
 800451e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004524:	2b20      	cmp	r3, #32
 8004526:	d000      	beq.n	800452a <HAL_UART_Transmit+0x1a>
 8004528:	e095      	b.n	8004656 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_UART_Transmit+0x28>
 8004530:	1dbb      	adds	r3, r7, #6
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e08d      	b.n	8004658 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	015b      	lsls	r3, r3, #5
 8004544:	429a      	cmp	r2, r3
 8004546:	d109      	bne.n	800455c <HAL_UART_Transmit+0x4c>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2201      	movs	r2, #1
 8004554:	4013      	ands	r3, r2
 8004556:	d001      	beq.n	800455c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e07d      	b.n	8004658 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2274      	movs	r2, #116	; 0x74
 8004560:	5c9b      	ldrb	r3, [r3, r2]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_UART_Transmit+0x5a>
 8004566:	2302      	movs	r3, #2
 8004568:	e076      	b.n	8004658 <HAL_UART_Transmit+0x148>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2274      	movs	r2, #116	; 0x74
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2280      	movs	r2, #128	; 0x80
 8004576:	2100      	movs	r1, #0
 8004578:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2221      	movs	r2, #33	; 0x21
 800457e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004580:	f7fd f972 	bl	8001868 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1dba      	adds	r2, r7, #6
 800458c:	2150      	movs	r1, #80	; 0x50
 800458e:	8812      	ldrh	r2, [r2, #0]
 8004590:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1dba      	adds	r2, r7, #6
 8004596:	2152      	movs	r1, #82	; 0x52
 8004598:	8812      	ldrh	r2, [r2, #0]
 800459a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	015b      	lsls	r3, r3, #5
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d108      	bne.n	80045ba <HAL_UART_Transmit+0xaa>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e003      	b.n	80045c2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2274      	movs	r2, #116	; 0x74
 80045c6:	2100      	movs	r1, #0
 80045c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80045ca:	e02c      	b.n	8004626 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	0013      	movs	r3, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	f000 fc75 	bl	8004ec8 <UART_WaitOnFlagUntilTimeout>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e038      	b.n	8004658 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	001a      	movs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	05d2      	lsls	r2, r2, #23
 80045f8:	0dd2      	lsrs	r2, r2, #23
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	3302      	adds	r3, #2
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e007      	b.n	8004614 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3301      	adds	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2252      	movs	r2, #82	; 0x52
 8004618:	5a9b      	ldrh	r3, [r3, r2]
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b299      	uxth	r1, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2252      	movs	r2, #82	; 0x52
 8004624:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2252      	movs	r2, #82	; 0x52
 800462a:	5a9b      	ldrh	r3, [r3, r2]
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1cc      	bne.n	80045cc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	0013      	movs	r3, r2
 800463c:	2200      	movs	r2, #0
 800463e:	2140      	movs	r1, #64	; 0x40
 8004640:	f000 fc42 	bl	8004ec8 <UART_WaitOnFlagUntilTimeout>
 8004644:	1e03      	subs	r3, r0, #0
 8004646:	d001      	beq.n	800464c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e005      	b.n	8004658 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b008      	add	sp, #32
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	1dbb      	adds	r3, r7, #6
 800466e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004674:	2b20      	cmp	r3, #32
 8004676:	d000      	beq.n	800467a <HAL_UART_Receive+0x1a>
 8004678:	e0d9      	b.n	800482e <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_UART_Receive+0x28>
 8004680:	1dbb      	adds	r3, r7, #6
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0d1      	b.n	8004830 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	015b      	lsls	r3, r3, #5
 8004694:	429a      	cmp	r2, r3
 8004696:	d109      	bne.n	80046ac <HAL_UART_Receive+0x4c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2201      	movs	r2, #1
 80046a4:	4013      	ands	r3, r2
 80046a6:	d001      	beq.n	80046ac <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0c1      	b.n	8004830 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2274      	movs	r2, #116	; 0x74
 80046b0:	5c9b      	ldrb	r3, [r3, r2]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Receive+0x5a>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e0ba      	b.n	8004830 <HAL_UART_Receive+0x1d0>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2274      	movs	r2, #116	; 0x74
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	2100      	movs	r1, #0
 80046c8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2222      	movs	r2, #34	; 0x22
 80046ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046d6:	f7fd f8c7 	bl	8001868 <HAL_GetTick>
 80046da:	0003      	movs	r3, r0
 80046dc:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1dba      	adds	r2, r7, #6
 80046e2:	2158      	movs	r1, #88	; 0x58
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1dba      	adds	r2, r7, #6
 80046ec:	215a      	movs	r1, #90	; 0x5a
 80046ee:	8812      	ldrh	r2, [r2, #0]
 80046f0:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	015b      	lsls	r3, r3, #5
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d10d      	bne.n	800471a <HAL_UART_Receive+0xba>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <HAL_UART_Receive+0xb0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	225c      	movs	r2, #92	; 0x5c
 800470a:	494b      	ldr	r1, [pc, #300]	; (8004838 <HAL_UART_Receive+0x1d8>)
 800470c:	5299      	strh	r1, [r3, r2]
 800470e:	e02e      	b.n	800476e <HAL_UART_Receive+0x10e>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	225c      	movs	r2, #92	; 0x5c
 8004714:	21ff      	movs	r1, #255	; 0xff
 8004716:	5299      	strh	r1, [r3, r2]
 8004718:	e029      	b.n	800476e <HAL_UART_Receive+0x10e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <HAL_UART_Receive+0xde>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <HAL_UART_Receive+0xd4>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	225c      	movs	r2, #92	; 0x5c
 800472e:	21ff      	movs	r1, #255	; 0xff
 8004730:	5299      	strh	r1, [r3, r2]
 8004732:	e01c      	b.n	800476e <HAL_UART_Receive+0x10e>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	225c      	movs	r2, #92	; 0x5c
 8004738:	217f      	movs	r1, #127	; 0x7f
 800473a:	5299      	strh	r1, [r3, r2]
 800473c:	e017      	b.n	800476e <HAL_UART_Receive+0x10e>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	055b      	lsls	r3, r3, #21
 8004746:	429a      	cmp	r2, r3
 8004748:	d10d      	bne.n	8004766 <HAL_UART_Receive+0x106>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <HAL_UART_Receive+0xfc>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	225c      	movs	r2, #92	; 0x5c
 8004756:	217f      	movs	r1, #127	; 0x7f
 8004758:	5299      	strh	r1, [r3, r2]
 800475a:	e008      	b.n	800476e <HAL_UART_Receive+0x10e>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	225c      	movs	r2, #92	; 0x5c
 8004760:	213f      	movs	r1, #63	; 0x3f
 8004762:	5299      	strh	r1, [r3, r2]
 8004764:	e003      	b.n	800476e <HAL_UART_Receive+0x10e>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	225c      	movs	r2, #92	; 0x5c
 800476a:	2100      	movs	r1, #0
 800476c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800476e:	2312      	movs	r3, #18
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	215c      	movs	r1, #92	; 0x5c
 8004776:	5a52      	ldrh	r2, [r2, r1]
 8004778:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	015b      	lsls	r3, r3, #5
 8004782:	429a      	cmp	r2, r3
 8004784:	d108      	bne.n	8004798 <HAL_UART_Receive+0x138>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d104      	bne.n	8004798 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	e003      	b.n	80047a0 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2274      	movs	r2, #116	; 0x74
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047a8:	e036      	b.n	8004818 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	0013      	movs	r3, r2
 80047b4:	2200      	movs	r2, #0
 80047b6:	2120      	movs	r1, #32
 80047b8:	f000 fb86 	bl	8004ec8 <UART_WaitOnFlagUntilTimeout>
 80047bc:	1e03      	subs	r3, r0, #0
 80047be:	d001      	beq.n	80047c4 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e035      	b.n	8004830 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10e      	bne.n	80047e8 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2212      	movs	r2, #18
 80047d4:	18ba      	adds	r2, r7, r2
 80047d6:	8812      	ldrh	r2, [r2, #0]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3302      	adds	r3, #2
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e00e      	b.n	8004806 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2212      	movs	r2, #18
 80047f2:	18ba      	adds	r2, r7, r2
 80047f4:	8812      	ldrh	r2, [r2, #0]
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	4013      	ands	r3, r2
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	225a      	movs	r2, #90	; 0x5a
 800480a:	5a9b      	ldrh	r3, [r3, r2]
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b299      	uxth	r1, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	225a      	movs	r2, #90	; 0x5a
 8004816:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	225a      	movs	r2, #90	; 0x5a
 800481c:	5a9b      	ldrh	r3, [r3, r2]
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1c2      	bne.n	80047aa <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e000      	b.n	8004830 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
  }
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b008      	add	sp, #32
 8004836:	bd80      	pop	{r7, pc}
 8004838:	000001ff 	.word	0x000001ff

0800483c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800483c:	b5b0      	push	{r4, r5, r7, lr}
 800483e:	b08e      	sub	sp, #56	; 0x38
 8004840:	af00      	add	r7, sp, #0
 8004842:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004844:	231a      	movs	r3, #26
 8004846:	2218      	movs	r2, #24
 8004848:	189b      	adds	r3, r3, r2
 800484a:	19db      	adds	r3, r3, r7
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	431a      	orrs	r2, r3
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	431a      	orrs	r2, r3
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4313      	orrs	r3, r2
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4ab4      	ldr	r2, [pc, #720]	; (8004b40 <UART_SetConfig+0x304>)
 8004870:	4013      	ands	r3, r2
 8004872:	0019      	movs	r1, r3
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4aaf      	ldr	r2, [pc, #700]	; (8004b44 <UART_SetConfig+0x308>)
 8004886:	4013      	ands	r3, r2
 8004888:	0019      	movs	r1, r3
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4aa9      	ldr	r2, [pc, #676]	; (8004b48 <UART_SetConfig+0x30c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ac:	4313      	orrs	r3, r2
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4aa5      	ldr	r2, [pc, #660]	; (8004b4c <UART_SetConfig+0x310>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	0019      	movs	r1, r3
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4aa1      	ldr	r2, [pc, #644]	; (8004b50 <UART_SetConfig+0x314>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d131      	bne.n	8004934 <UART_SetConfig+0xf8>
 80048d0:	4ba0      	ldr	r3, [pc, #640]	; (8004b54 <UART_SetConfig+0x318>)
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	220c      	movs	r2, #12
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d01d      	beq.n	8004918 <UART_SetConfig+0xdc>
 80048dc:	d823      	bhi.n	8004926 <UART_SetConfig+0xea>
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d00c      	beq.n	80048fc <UART_SetConfig+0xc0>
 80048e2:	d820      	bhi.n	8004926 <UART_SetConfig+0xea>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <UART_SetConfig+0xb2>
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d00e      	beq.n	800490a <UART_SetConfig+0xce>
 80048ec:	e01b      	b.n	8004926 <UART_SetConfig+0xea>
 80048ee:	231b      	movs	r3, #27
 80048f0:	2218      	movs	r2, #24
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	19db      	adds	r3, r3, r7
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e065      	b.n	80049c8 <UART_SetConfig+0x18c>
 80048fc:	231b      	movs	r3, #27
 80048fe:	2218      	movs	r2, #24
 8004900:	189b      	adds	r3, r3, r2
 8004902:	19db      	adds	r3, r3, r7
 8004904:	2202      	movs	r2, #2
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	e05e      	b.n	80049c8 <UART_SetConfig+0x18c>
 800490a:	231b      	movs	r3, #27
 800490c:	2218      	movs	r2, #24
 800490e:	189b      	adds	r3, r3, r2
 8004910:	19db      	adds	r3, r3, r7
 8004912:	2204      	movs	r2, #4
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e057      	b.n	80049c8 <UART_SetConfig+0x18c>
 8004918:	231b      	movs	r3, #27
 800491a:	2218      	movs	r2, #24
 800491c:	189b      	adds	r3, r3, r2
 800491e:	19db      	adds	r3, r3, r7
 8004920:	2208      	movs	r2, #8
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	e050      	b.n	80049c8 <UART_SetConfig+0x18c>
 8004926:	231b      	movs	r3, #27
 8004928:	2218      	movs	r2, #24
 800492a:	189b      	adds	r3, r3, r2
 800492c:	19db      	adds	r3, r3, r7
 800492e:	2210      	movs	r2, #16
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e049      	b.n	80049c8 <UART_SetConfig+0x18c>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a83      	ldr	r2, [pc, #524]	; (8004b48 <UART_SetConfig+0x30c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d13e      	bne.n	80049bc <UART_SetConfig+0x180>
 800493e:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <UART_SetConfig+0x318>)
 8004940:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004942:	23c0      	movs	r3, #192	; 0xc0
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	4013      	ands	r3, r2
 8004948:	22c0      	movs	r2, #192	; 0xc0
 800494a:	0112      	lsls	r2, r2, #4
 800494c:	4293      	cmp	r3, r2
 800494e:	d027      	beq.n	80049a0 <UART_SetConfig+0x164>
 8004950:	22c0      	movs	r2, #192	; 0xc0
 8004952:	0112      	lsls	r2, r2, #4
 8004954:	4293      	cmp	r3, r2
 8004956:	d82a      	bhi.n	80049ae <UART_SetConfig+0x172>
 8004958:	2280      	movs	r2, #128	; 0x80
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	4293      	cmp	r3, r2
 800495e:	d011      	beq.n	8004984 <UART_SetConfig+0x148>
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	0112      	lsls	r2, r2, #4
 8004964:	4293      	cmp	r3, r2
 8004966:	d822      	bhi.n	80049ae <UART_SetConfig+0x172>
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <UART_SetConfig+0x13a>
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	00d2      	lsls	r2, r2, #3
 8004970:	4293      	cmp	r3, r2
 8004972:	d00e      	beq.n	8004992 <UART_SetConfig+0x156>
 8004974:	e01b      	b.n	80049ae <UART_SetConfig+0x172>
 8004976:	231b      	movs	r3, #27
 8004978:	2218      	movs	r2, #24
 800497a:	189b      	adds	r3, r3, r2
 800497c:	19db      	adds	r3, r3, r7
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	e021      	b.n	80049c8 <UART_SetConfig+0x18c>
 8004984:	231b      	movs	r3, #27
 8004986:	2218      	movs	r2, #24
 8004988:	189b      	adds	r3, r3, r2
 800498a:	19db      	adds	r3, r3, r7
 800498c:	2202      	movs	r2, #2
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	e01a      	b.n	80049c8 <UART_SetConfig+0x18c>
 8004992:	231b      	movs	r3, #27
 8004994:	2218      	movs	r2, #24
 8004996:	189b      	adds	r3, r3, r2
 8004998:	19db      	adds	r3, r3, r7
 800499a:	2204      	movs	r2, #4
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	e013      	b.n	80049c8 <UART_SetConfig+0x18c>
 80049a0:	231b      	movs	r3, #27
 80049a2:	2218      	movs	r2, #24
 80049a4:	189b      	adds	r3, r3, r2
 80049a6:	19db      	adds	r3, r3, r7
 80049a8:	2208      	movs	r2, #8
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	e00c      	b.n	80049c8 <UART_SetConfig+0x18c>
 80049ae:	231b      	movs	r3, #27
 80049b0:	2218      	movs	r2, #24
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	19db      	adds	r3, r3, r7
 80049b6:	2210      	movs	r2, #16
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e005      	b.n	80049c8 <UART_SetConfig+0x18c>
 80049bc:	231b      	movs	r3, #27
 80049be:	2218      	movs	r2, #24
 80049c0:	189b      	adds	r3, r3, r2
 80049c2:	19db      	adds	r3, r3, r7
 80049c4:	2210      	movs	r2, #16
 80049c6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a5e      	ldr	r2, [pc, #376]	; (8004b48 <UART_SetConfig+0x30c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d000      	beq.n	80049d4 <UART_SetConfig+0x198>
 80049d2:	e084      	b.n	8004ade <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049d4:	231b      	movs	r3, #27
 80049d6:	2218      	movs	r2, #24
 80049d8:	189b      	adds	r3, r3, r2
 80049da:	19db      	adds	r3, r3, r7
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d01d      	beq.n	8004a1e <UART_SetConfig+0x1e2>
 80049e2:	dc20      	bgt.n	8004a26 <UART_SetConfig+0x1ea>
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d015      	beq.n	8004a14 <UART_SetConfig+0x1d8>
 80049e8:	dc1d      	bgt.n	8004a26 <UART_SetConfig+0x1ea>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <UART_SetConfig+0x1b8>
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d005      	beq.n	80049fe <UART_SetConfig+0x1c2>
 80049f2:	e018      	b.n	8004a26 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fe fde6 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 80049f8:	0003      	movs	r3, r0
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049fc:	e01c      	b.n	8004a38 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049fe:	4b55      	ldr	r3, [pc, #340]	; (8004b54 <UART_SetConfig+0x318>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2210      	movs	r2, #16
 8004a04:	4013      	ands	r3, r2
 8004a06:	d002      	beq.n	8004a0e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a08:	4b53      	ldr	r3, [pc, #332]	; (8004b58 <UART_SetConfig+0x31c>)
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a0c:	e014      	b.n	8004a38 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004a0e:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <UART_SetConfig+0x320>)
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a12:	e011      	b.n	8004a38 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a14:	f7fe fd26 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a1c:	e00c      	b.n	8004a38 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a24:	e008      	b.n	8004a38 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a2a:	231a      	movs	r3, #26
 8004a2c:	2218      	movs	r2, #24
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	19db      	adds	r3, r3, r7
 8004a32:	2201      	movs	r2, #1
 8004a34:	701a      	strb	r2, [r3, #0]
        break;
 8004a36:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d100      	bne.n	8004a40 <UART_SetConfig+0x204>
 8004a3e:	e130      	b.n	8004ca2 <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	0013      	movs	r3, r2
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	189b      	adds	r3, r3, r2
 8004a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d305      	bcc.n	8004a5c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d906      	bls.n	8004a6a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004a5c:	231a      	movs	r3, #26
 8004a5e:	2218      	movs	r2, #24
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	19db      	adds	r3, r3, r7
 8004a64:	2201      	movs	r2, #1
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e11b      	b.n	8004ca2 <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	6939      	ldr	r1, [r7, #16]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	000b      	movs	r3, r1
 8004a78:	0e1b      	lsrs	r3, r3, #24
 8004a7a:	0010      	movs	r0, r2
 8004a7c:	0205      	lsls	r5, r0, #8
 8004a7e:	431d      	orrs	r5, r3
 8004a80:	000b      	movs	r3, r1
 8004a82:	021c      	lsls	r4, r3, #8
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68b8      	ldr	r0, [r7, #8]
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	1900      	adds	r0, r0, r4
 8004a96:	4169      	adcs	r1, r5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f7fb fbc5 	bl	8000234 <__aeabi_uldivmod>
 8004aaa:	0002      	movs	r2, r0
 8004aac:	000b      	movs	r3, r1
 8004aae:	0013      	movs	r3, r2
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab4:	23c0      	movs	r3, #192	; 0xc0
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d309      	bcc.n	8004ad0 <UART_SetConfig+0x294>
 8004abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	035b      	lsls	r3, r3, #13
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d204      	bcs.n	8004ad0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	e0e8      	b.n	8004ca2 <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8004ad0:	231a      	movs	r3, #26
 8004ad2:	2218      	movs	r2, #24
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	19db      	adds	r3, r3, r7
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e0e1      	b.n	8004ca2 <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d000      	beq.n	8004aec <UART_SetConfig+0x2b0>
 8004aea:	e083      	b.n	8004bf4 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8004aec:	231b      	movs	r3, #27
 8004aee:	2218      	movs	r2, #24
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	19db      	adds	r3, r3, r7
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d834      	bhi.n	8004b64 <UART_SetConfig+0x328>
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <UART_SetConfig+0x324>)
 8004afe:	18d3      	adds	r3, r2, r3
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b04:	f7fe fd5e 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b0c:	e033      	b.n	8004b76 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b0e:	f7fe fd6f 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8004b12:	0003      	movs	r3, r0
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b16:	e02e      	b.n	8004b76 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b18:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <UART_SetConfig+0x318>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d002      	beq.n	8004b28 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <UART_SetConfig+0x31c>)
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b26:	e026      	b.n	8004b76 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <UART_SetConfig+0x320>)
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b2c:	e023      	b.n	8004b76 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2e:	f7fe fc99 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004b32:	0003      	movs	r3, r0
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b36:	e01e      	b.n	8004b76 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b3e:	e01a      	b.n	8004b76 <UART_SetConfig+0x33a>
 8004b40:	efff69f3 	.word	0xefff69f3
 8004b44:	ffffcfff 	.word	0xffffcfff
 8004b48:	40004800 	.word	0x40004800
 8004b4c:	fffff4ff 	.word	0xfffff4ff
 8004b50:	40004400 	.word	0x40004400
 8004b54:	40021000 	.word	0x40021000
 8004b58:	003d0900 	.word	0x003d0900
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	08005cec 	.word	0x08005cec
      default:
        pclk = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b68:	231a      	movs	r3, #26
 8004b6a:	2218      	movs	r2, #24
 8004b6c:	189b      	adds	r3, r3, r2
 8004b6e:	19db      	adds	r3, r3, r7
 8004b70:	2201      	movs	r2, #1
 8004b72:	701a      	strb	r2, [r3, #0]
        break;
 8004b74:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d100      	bne.n	8004b7e <UART_SetConfig+0x342>
 8004b7c:	e091      	b.n	8004ca2 <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	005a      	lsls	r2, r3, #1
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	18d2      	adds	r2, r2, r3
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	0019      	movs	r1, r3
 8004b90:	0010      	movs	r0, r2
 8004b92:	f7fb fac3 	bl	800011c <__udivsi3>
 8004b96:	0003      	movs	r3, r0
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d921      	bls.n	8004be6 <UART_SetConfig+0x3aa>
 8004ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	025b      	lsls	r3, r3, #9
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d21c      	bcs.n	8004be6 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	200e      	movs	r0, #14
 8004bb2:	2418      	movs	r4, #24
 8004bb4:	1903      	adds	r3, r0, r4
 8004bb6:	19db      	adds	r3, r3, r7
 8004bb8:	210f      	movs	r1, #15
 8004bba:	438a      	bics	r2, r1
 8004bbc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2207      	movs	r2, #7
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b299      	uxth	r1, r3
 8004bca:	1903      	adds	r3, r0, r4
 8004bcc:	19db      	adds	r3, r3, r7
 8004bce:	1902      	adds	r2, r0, r4
 8004bd0:	19d2      	adds	r2, r2, r7
 8004bd2:	8812      	ldrh	r2, [r2, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	1902      	adds	r2, r0, r4
 8004bde:	19d2      	adds	r2, r2, r7
 8004be0:	8812      	ldrh	r2, [r2, #0]
 8004be2:	60da      	str	r2, [r3, #12]
 8004be4:	e05d      	b.n	8004ca2 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8004be6:	231a      	movs	r3, #26
 8004be8:	2218      	movs	r2, #24
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	19db      	adds	r3, r3, r7
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e056      	b.n	8004ca2 <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bf4:	231b      	movs	r3, #27
 8004bf6:	2218      	movs	r2, #24
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	19db      	adds	r3, r3, r7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d822      	bhi.n	8004c48 <UART_SetConfig+0x40c>
 8004c02:	009a      	lsls	r2, r3, #2
 8004c04:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <UART_SetConfig+0x484>)
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe fcda 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8004c10:	0003      	movs	r3, r0
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c14:	e021      	b.n	8004c5a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c16:	f7fe fceb 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c1e:	e01c      	b.n	8004c5a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c20:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <UART_SetConfig+0x488>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2210      	movs	r2, #16
 8004c26:	4013      	ands	r3, r2
 8004c28:	d002      	beq.n	8004c30 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c2a:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <UART_SetConfig+0x48c>)
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c2e:	e014      	b.n	8004c5a <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <UART_SetConfig+0x490>)
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c34:	e011      	b.n	8004c5a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe fc15 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c3e:	e00c      	b.n	8004c5a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c46:	e008      	b.n	8004c5a <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c4c:	231a      	movs	r3, #26
 8004c4e:	2218      	movs	r2, #24
 8004c50:	189b      	adds	r3, r3, r2
 8004c52:	19db      	adds	r3, r3, r7
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
        break;
 8004c58:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	085a      	lsrs	r2, r3, #1
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	18d2      	adds	r2, r2, r3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	0019      	movs	r1, r3
 8004c70:	0010      	movs	r0, r2
 8004c72:	f7fb fa53 	bl	800011c <__udivsi3>
 8004c76:	0003      	movs	r3, r0
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	d909      	bls.n	8004c96 <UART_SetConfig+0x45a>
 8004c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	025b      	lsls	r3, r3, #9
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d204      	bcs.n	8004c96 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c92:	60da      	str	r2, [r3, #12]
 8004c94:	e005      	b.n	8004ca2 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8004c96:	231a      	movs	r3, #26
 8004c98:	2218      	movs	r2, #24
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	19db      	adds	r3, r3, r7
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2200      	movs	r2, #0
 8004cac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cae:	231a      	movs	r3, #26
 8004cb0:	2218      	movs	r2, #24
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	19db      	adds	r3, r3, r7
 8004cb6:	781b      	ldrb	r3, [r3, #0]
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b00e      	add	sp, #56	; 0x38
 8004cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8004cc0:	08005d10 	.word	0x08005d10
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	003d0900 	.word	0x003d0900
 8004ccc:	00f42400 	.word	0x00f42400

08004cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a4a      	ldr	r2, [pc, #296]	; (8004e14 <UART_AdvFeatureConfig+0x144>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	0019      	movs	r1, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4013      	ands	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4a43      	ldr	r2, [pc, #268]	; (8004e18 <UART_AdvFeatureConfig+0x148>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	0019      	movs	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	2204      	movs	r2, #4
 8004d22:	4013      	ands	r3, r2
 8004d24:	d00b      	beq.n	8004d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a3b      	ldr	r2, [pc, #236]	; (8004e1c <UART_AdvFeatureConfig+0x14c>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2208      	movs	r2, #8
 8004d44:	4013      	ands	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	4a34      	ldr	r2, [pc, #208]	; (8004e20 <UART_AdvFeatureConfig+0x150>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	0019      	movs	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2210      	movs	r2, #16
 8004d66:	4013      	ands	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <UART_AdvFeatureConfig+0x154>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	0019      	movs	r1, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2220      	movs	r2, #32
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4a25      	ldr	r2, [pc, #148]	; (8004e28 <UART_AdvFeatureConfig+0x158>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	0019      	movs	r1, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2240      	movs	r2, #64	; 0x40
 8004daa:	4013      	ands	r3, r2
 8004dac:	d01d      	beq.n	8004dea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a1d      	ldr	r2, [pc, #116]	; (8004e2c <UART_AdvFeatureConfig+0x15c>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	035b      	lsls	r3, r3, #13
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d10b      	bne.n	8004dea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <UART_AdvFeatureConfig+0x160>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	0019      	movs	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2280      	movs	r2, #128	; 0x80
 8004df0:	4013      	ands	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <UART_AdvFeatureConfig+0x164>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	0019      	movs	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	fffdffff 	.word	0xfffdffff
 8004e18:	fffeffff 	.word	0xfffeffff
 8004e1c:	fffbffff 	.word	0xfffbffff
 8004e20:	ffff7fff 	.word	0xffff7fff
 8004e24:	ffffefff 	.word	0xffffefff
 8004e28:	ffffdfff 	.word	0xffffdfff
 8004e2c:	ffefffff 	.word	0xffefffff
 8004e30:	ff9fffff 	.word	0xff9fffff
 8004e34:	fff7ffff 	.word	0xfff7ffff

08004e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2280      	movs	r2, #128	; 0x80
 8004e44:	2100      	movs	r1, #0
 8004e46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e48:	f7fc fd0e 	bl	8001868 <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2208      	movs	r2, #8
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d10c      	bne.n	8004e78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2280      	movs	r2, #128	; 0x80
 8004e62:	0391      	lsls	r1, r2, #14
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <UART_CheckIdleState+0x8c>)
 8004e68:	9200      	str	r2, [sp, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f000 f82c 	bl	8004ec8 <UART_WaitOnFlagUntilTimeout>
 8004e70:	1e03      	subs	r3, r0, #0
 8004e72:	d001      	beq.n	8004e78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e021      	b.n	8004ebc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d10c      	bne.n	8004ea0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2280      	movs	r2, #128	; 0x80
 8004e8a:	03d1      	lsls	r1, r2, #15
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4a0d      	ldr	r2, [pc, #52]	; (8004ec4 <UART_CheckIdleState+0x8c>)
 8004e90:	9200      	str	r2, [sp, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f000 f818 	bl	8004ec8 <UART_WaitOnFlagUntilTimeout>
 8004e98:	1e03      	subs	r3, r0, #0
 8004e9a:	d001      	beq.n	8004ea0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e00d      	b.n	8004ebc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2274      	movs	r2, #116	; 0x74
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b004      	add	sp, #16
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	01ffffff 	.word	0x01ffffff

08004ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b094      	sub	sp, #80	; 0x50
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed8:	e0a3      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004edc:	3301      	adds	r3, #1
 8004ede:	d100      	bne.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004ee0:	e09f      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee2:	f7fc fcc1 	bl	8001868 <HAL_GetTick>
 8004ee6:	0002      	movs	r2, r0
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d302      	bcc.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d13d      	bne.n	8004f74 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f00:	647b      	str	r3, [r7, #68]	; 0x44
 8004f02:	2301      	movs	r3, #1
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	494c      	ldr	r1, [pc, #304]	; (800504c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	643b      	str	r3, [r7, #64]	; 0x40
 8004f34:	2301      	movs	r3, #1
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	f383 8810 	msr	PRIMASK, r3
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	438a      	bics	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f56:	f383 8810 	msr	PRIMASK, r3
}
 8004f5a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2274      	movs	r2, #116	; 0x74
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e067      	b.n	8005044 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d050      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d146      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2280      	movs	r2, #128	; 0x80
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa2:	613b      	str	r3, [r7, #16]
  return(result);
 8004fa4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f383 8810 	msr	PRIMASK, r3
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4923      	ldr	r1, [pc, #140]	; (800504c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f383 8810 	msr	PRIMASK, r3
}
 8004fce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fd6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fda:	2301      	movs	r3, #1
 8004fdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
 8004ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	2120      	movs	r1, #32
 8005014:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2274      	movs	r2, #116	; 0x74
 800501a:	2100      	movs	r1, #0
 800501c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e010      	b.n	8005044 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	425a      	negs	r2, r3
 8005032:	4153      	adcs	r3, r2
 8005034:	b2db      	uxtb	r3, r3
 8005036:	001a      	movs	r2, r3
 8005038:	1dfb      	adds	r3, r7, #7
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d100      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005040:	e74b      	b.n	8004eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	0018      	movs	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	b014      	add	sp, #80	; 0x50
 800504a:	bd80      	pop	{r7, pc}
 800504c:	fffffe5f 	.word	0xfffffe5f

08005050 <__errno>:
 8005050:	4b01      	ldr	r3, [pc, #4]	; (8005058 <__errno+0x8>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	4770      	bx	lr
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	2000000c 	.word	0x2000000c

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	2600      	movs	r6, #0
 8005060:	4d0c      	ldr	r5, [pc, #48]	; (8005094 <__libc_init_array+0x38>)
 8005062:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005064:	1b64      	subs	r4, r4, r5
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	2600      	movs	r6, #0
 800506e:	f000 fc8b 	bl	8005988 <_init>
 8005072:	4d0a      	ldr	r5, [pc, #40]	; (800509c <__libc_init_array+0x40>)
 8005074:	4c0a      	ldr	r4, [pc, #40]	; (80050a0 <__libc_init_array+0x44>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	00b3      	lsls	r3, r6, #2
 8005082:	58eb      	ldr	r3, [r5, r3]
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	00b3      	lsls	r3, r6, #2
 800508c:	58eb      	ldr	r3, [r5, r3]
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	08005d70 	.word	0x08005d70
 8005098:	08005d70 	.word	0x08005d70
 800509c:	08005d70 	.word	0x08005d70
 80050a0:	08005d74 	.word	0x08005d74

080050a4 <memset>:
 80050a4:	0003      	movs	r3, r0
 80050a6:	1882      	adds	r2, r0, r2
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d100      	bne.n	80050ae <memset+0xa>
 80050ac:	4770      	bx	lr
 80050ae:	7019      	strb	r1, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	e7f9      	b.n	80050a8 <memset+0x4>

080050b4 <siprintf>:
 80050b4:	b40e      	push	{r1, r2, r3}
 80050b6:	b500      	push	{lr}
 80050b8:	490b      	ldr	r1, [pc, #44]	; (80050e8 <siprintf+0x34>)
 80050ba:	b09c      	sub	sp, #112	; 0x70
 80050bc:	ab1d      	add	r3, sp, #116	; 0x74
 80050be:	9002      	str	r0, [sp, #8]
 80050c0:	9006      	str	r0, [sp, #24]
 80050c2:	9107      	str	r1, [sp, #28]
 80050c4:	9104      	str	r1, [sp, #16]
 80050c6:	4809      	ldr	r0, [pc, #36]	; (80050ec <siprintf+0x38>)
 80050c8:	4909      	ldr	r1, [pc, #36]	; (80050f0 <siprintf+0x3c>)
 80050ca:	cb04      	ldmia	r3!, {r2}
 80050cc:	9105      	str	r1, [sp, #20]
 80050ce:	6800      	ldr	r0, [r0, #0]
 80050d0:	a902      	add	r1, sp, #8
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	f000 f870 	bl	80051b8 <_svfiprintf_r>
 80050d8:	2300      	movs	r3, #0
 80050da:	9a02      	ldr	r2, [sp, #8]
 80050dc:	7013      	strb	r3, [r2, #0]
 80050de:	b01c      	add	sp, #112	; 0x70
 80050e0:	bc08      	pop	{r3}
 80050e2:	b003      	add	sp, #12
 80050e4:	4718      	bx	r3
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	7fffffff 	.word	0x7fffffff
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	ffff0208 	.word	0xffff0208

080050f4 <__ssputs_r>:
 80050f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f6:	688e      	ldr	r6, [r1, #8]
 80050f8:	b085      	sub	sp, #20
 80050fa:	0007      	movs	r7, r0
 80050fc:	000c      	movs	r4, r1
 80050fe:	9203      	str	r2, [sp, #12]
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	429e      	cmp	r6, r3
 8005104:	d83c      	bhi.n	8005180 <__ssputs_r+0x8c>
 8005106:	2390      	movs	r3, #144	; 0x90
 8005108:	898a      	ldrh	r2, [r1, #12]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	421a      	tst	r2, r3
 800510e:	d034      	beq.n	800517a <__ssputs_r+0x86>
 8005110:	6909      	ldr	r1, [r1, #16]
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	6960      	ldr	r0, [r4, #20]
 8005116:	1a5b      	subs	r3, r3, r1
 8005118:	9302      	str	r3, [sp, #8]
 800511a:	2303      	movs	r3, #3
 800511c:	4343      	muls	r3, r0
 800511e:	0fdd      	lsrs	r5, r3, #31
 8005120:	18ed      	adds	r5, r5, r3
 8005122:	9b01      	ldr	r3, [sp, #4]
 8005124:	9802      	ldr	r0, [sp, #8]
 8005126:	3301      	adds	r3, #1
 8005128:	181b      	adds	r3, r3, r0
 800512a:	106d      	asrs	r5, r5, #1
 800512c:	42ab      	cmp	r3, r5
 800512e:	d900      	bls.n	8005132 <__ssputs_r+0x3e>
 8005130:	001d      	movs	r5, r3
 8005132:	0553      	lsls	r3, r2, #21
 8005134:	d532      	bpl.n	800519c <__ssputs_r+0xa8>
 8005136:	0029      	movs	r1, r5
 8005138:	0038      	movs	r0, r7
 800513a:	f000 fb53 	bl	80057e4 <_malloc_r>
 800513e:	1e06      	subs	r6, r0, #0
 8005140:	d109      	bne.n	8005156 <__ssputs_r+0x62>
 8005142:	230c      	movs	r3, #12
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	2340      	movs	r3, #64	; 0x40
 8005148:	2001      	movs	r0, #1
 800514a:	89a2      	ldrh	r2, [r4, #12]
 800514c:	4240      	negs	r0, r0
 800514e:	4313      	orrs	r3, r2
 8005150:	81a3      	strh	r3, [r4, #12]
 8005152:	b005      	add	sp, #20
 8005154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005156:	9a02      	ldr	r2, [sp, #8]
 8005158:	6921      	ldr	r1, [r4, #16]
 800515a:	f000 faba 	bl	80056d2 <memcpy>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <__ssputs_r+0xc0>)
 8005162:	401a      	ands	r2, r3
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	4313      	orrs	r3, r2
 8005168:	81a3      	strh	r3, [r4, #12]
 800516a:	9b02      	ldr	r3, [sp, #8]
 800516c:	6126      	str	r6, [r4, #16]
 800516e:	18f6      	adds	r6, r6, r3
 8005170:	6026      	str	r6, [r4, #0]
 8005172:	6165      	str	r5, [r4, #20]
 8005174:	9e01      	ldr	r6, [sp, #4]
 8005176:	1aed      	subs	r5, r5, r3
 8005178:	60a5      	str	r5, [r4, #8]
 800517a:	9b01      	ldr	r3, [sp, #4]
 800517c:	429e      	cmp	r6, r3
 800517e:	d900      	bls.n	8005182 <__ssputs_r+0x8e>
 8005180:	9e01      	ldr	r6, [sp, #4]
 8005182:	0032      	movs	r2, r6
 8005184:	9903      	ldr	r1, [sp, #12]
 8005186:	6820      	ldr	r0, [r4, #0]
 8005188:	f000 faac 	bl	80056e4 <memmove>
 800518c:	68a3      	ldr	r3, [r4, #8]
 800518e:	2000      	movs	r0, #0
 8005190:	1b9b      	subs	r3, r3, r6
 8005192:	60a3      	str	r3, [r4, #8]
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	199e      	adds	r6, r3, r6
 8005198:	6026      	str	r6, [r4, #0]
 800519a:	e7da      	b.n	8005152 <__ssputs_r+0x5e>
 800519c:	002a      	movs	r2, r5
 800519e:	0038      	movs	r0, r7
 80051a0:	f000 fb96 	bl	80058d0 <_realloc_r>
 80051a4:	1e06      	subs	r6, r0, #0
 80051a6:	d1e0      	bne.n	800516a <__ssputs_r+0x76>
 80051a8:	0038      	movs	r0, r7
 80051aa:	6921      	ldr	r1, [r4, #16]
 80051ac:	f000 faae 	bl	800570c <_free_r>
 80051b0:	e7c7      	b.n	8005142 <__ssputs_r+0x4e>
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	fffffb7f 	.word	0xfffffb7f

080051b8 <_svfiprintf_r>:
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	b0a1      	sub	sp, #132	; 0x84
 80051bc:	9003      	str	r0, [sp, #12]
 80051be:	001d      	movs	r5, r3
 80051c0:	898b      	ldrh	r3, [r1, #12]
 80051c2:	000f      	movs	r7, r1
 80051c4:	0016      	movs	r6, r2
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	d511      	bpl.n	80051ee <_svfiprintf_r+0x36>
 80051ca:	690b      	ldr	r3, [r1, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10e      	bne.n	80051ee <_svfiprintf_r+0x36>
 80051d0:	2140      	movs	r1, #64	; 0x40
 80051d2:	f000 fb07 	bl	80057e4 <_malloc_r>
 80051d6:	6038      	str	r0, [r7, #0]
 80051d8:	6138      	str	r0, [r7, #16]
 80051da:	2800      	cmp	r0, #0
 80051dc:	d105      	bne.n	80051ea <_svfiprintf_r+0x32>
 80051de:	230c      	movs	r3, #12
 80051e0:	9a03      	ldr	r2, [sp, #12]
 80051e2:	3801      	subs	r0, #1
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	b021      	add	sp, #132	; 0x84
 80051e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ea:	2340      	movs	r3, #64	; 0x40
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	2300      	movs	r3, #0
 80051f0:	ac08      	add	r4, sp, #32
 80051f2:	6163      	str	r3, [r4, #20]
 80051f4:	3320      	adds	r3, #32
 80051f6:	7663      	strb	r3, [r4, #25]
 80051f8:	3310      	adds	r3, #16
 80051fa:	76a3      	strb	r3, [r4, #26]
 80051fc:	9507      	str	r5, [sp, #28]
 80051fe:	0035      	movs	r5, r6
 8005200:	782b      	ldrb	r3, [r5, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <_svfiprintf_r+0x52>
 8005206:	2b25      	cmp	r3, #37	; 0x25
 8005208:	d147      	bne.n	800529a <_svfiprintf_r+0xe2>
 800520a:	1bab      	subs	r3, r5, r6
 800520c:	9305      	str	r3, [sp, #20]
 800520e:	42b5      	cmp	r5, r6
 8005210:	d00c      	beq.n	800522c <_svfiprintf_r+0x74>
 8005212:	0032      	movs	r2, r6
 8005214:	0039      	movs	r1, r7
 8005216:	9803      	ldr	r0, [sp, #12]
 8005218:	f7ff ff6c 	bl	80050f4 <__ssputs_r>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d100      	bne.n	8005222 <_svfiprintf_r+0x6a>
 8005220:	e0ae      	b.n	8005380 <_svfiprintf_r+0x1c8>
 8005222:	6962      	ldr	r2, [r4, #20]
 8005224:	9b05      	ldr	r3, [sp, #20]
 8005226:	4694      	mov	ip, r2
 8005228:	4463      	add	r3, ip
 800522a:	6163      	str	r3, [r4, #20]
 800522c:	782b      	ldrb	r3, [r5, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d100      	bne.n	8005234 <_svfiprintf_r+0x7c>
 8005232:	e0a5      	b.n	8005380 <_svfiprintf_r+0x1c8>
 8005234:	2201      	movs	r2, #1
 8005236:	2300      	movs	r3, #0
 8005238:	4252      	negs	r2, r2
 800523a:	6062      	str	r2, [r4, #4]
 800523c:	a904      	add	r1, sp, #16
 800523e:	3254      	adds	r2, #84	; 0x54
 8005240:	1852      	adds	r2, r2, r1
 8005242:	1c6e      	adds	r6, r5, #1
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	60e3      	str	r3, [r4, #12]
 8005248:	60a3      	str	r3, [r4, #8]
 800524a:	7013      	strb	r3, [r2, #0]
 800524c:	65a3      	str	r3, [r4, #88]	; 0x58
 800524e:	2205      	movs	r2, #5
 8005250:	7831      	ldrb	r1, [r6, #0]
 8005252:	4854      	ldr	r0, [pc, #336]	; (80053a4 <_svfiprintf_r+0x1ec>)
 8005254:	f000 fa32 	bl	80056bc <memchr>
 8005258:	1c75      	adds	r5, r6, #1
 800525a:	2800      	cmp	r0, #0
 800525c:	d11f      	bne.n	800529e <_svfiprintf_r+0xe6>
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	06d3      	lsls	r3, r2, #27
 8005262:	d504      	bpl.n	800526e <_svfiprintf_r+0xb6>
 8005264:	2353      	movs	r3, #83	; 0x53
 8005266:	a904      	add	r1, sp, #16
 8005268:	185b      	adds	r3, r3, r1
 800526a:	2120      	movs	r1, #32
 800526c:	7019      	strb	r1, [r3, #0]
 800526e:	0713      	lsls	r3, r2, #28
 8005270:	d504      	bpl.n	800527c <_svfiprintf_r+0xc4>
 8005272:	2353      	movs	r3, #83	; 0x53
 8005274:	a904      	add	r1, sp, #16
 8005276:	185b      	adds	r3, r3, r1
 8005278:	212b      	movs	r1, #43	; 0x2b
 800527a:	7019      	strb	r1, [r3, #0]
 800527c:	7833      	ldrb	r3, [r6, #0]
 800527e:	2b2a      	cmp	r3, #42	; 0x2a
 8005280:	d016      	beq.n	80052b0 <_svfiprintf_r+0xf8>
 8005282:	0035      	movs	r5, r6
 8005284:	2100      	movs	r1, #0
 8005286:	200a      	movs	r0, #10
 8005288:	68e3      	ldr	r3, [r4, #12]
 800528a:	782a      	ldrb	r2, [r5, #0]
 800528c:	1c6e      	adds	r6, r5, #1
 800528e:	3a30      	subs	r2, #48	; 0x30
 8005290:	2a09      	cmp	r2, #9
 8005292:	d94e      	bls.n	8005332 <_svfiprintf_r+0x17a>
 8005294:	2900      	cmp	r1, #0
 8005296:	d111      	bne.n	80052bc <_svfiprintf_r+0x104>
 8005298:	e017      	b.n	80052ca <_svfiprintf_r+0x112>
 800529a:	3501      	adds	r5, #1
 800529c:	e7b0      	b.n	8005200 <_svfiprintf_r+0x48>
 800529e:	4b41      	ldr	r3, [pc, #260]	; (80053a4 <_svfiprintf_r+0x1ec>)
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	1ac0      	subs	r0, r0, r3
 80052a4:	2301      	movs	r3, #1
 80052a6:	4083      	lsls	r3, r0
 80052a8:	4313      	orrs	r3, r2
 80052aa:	002e      	movs	r6, r5
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	e7ce      	b.n	800524e <_svfiprintf_r+0x96>
 80052b0:	9b07      	ldr	r3, [sp, #28]
 80052b2:	1d19      	adds	r1, r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	9107      	str	r1, [sp, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db01      	blt.n	80052c0 <_svfiprintf_r+0x108>
 80052bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80052be:	e004      	b.n	80052ca <_svfiprintf_r+0x112>
 80052c0:	425b      	negs	r3, r3
 80052c2:	60e3      	str	r3, [r4, #12]
 80052c4:	2302      	movs	r3, #2
 80052c6:	4313      	orrs	r3, r2
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	782b      	ldrb	r3, [r5, #0]
 80052cc:	2b2e      	cmp	r3, #46	; 0x2e
 80052ce:	d10a      	bne.n	80052e6 <_svfiprintf_r+0x12e>
 80052d0:	786b      	ldrb	r3, [r5, #1]
 80052d2:	2b2a      	cmp	r3, #42	; 0x2a
 80052d4:	d135      	bne.n	8005342 <_svfiprintf_r+0x18a>
 80052d6:	9b07      	ldr	r3, [sp, #28]
 80052d8:	3502      	adds	r5, #2
 80052da:	1d1a      	adds	r2, r3, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	9207      	str	r2, [sp, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	db2b      	blt.n	800533c <_svfiprintf_r+0x184>
 80052e4:	9309      	str	r3, [sp, #36]	; 0x24
 80052e6:	4e30      	ldr	r6, [pc, #192]	; (80053a8 <_svfiprintf_r+0x1f0>)
 80052e8:	2203      	movs	r2, #3
 80052ea:	0030      	movs	r0, r6
 80052ec:	7829      	ldrb	r1, [r5, #0]
 80052ee:	f000 f9e5 	bl	80056bc <memchr>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d006      	beq.n	8005304 <_svfiprintf_r+0x14c>
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	1b80      	subs	r0, r0, r6
 80052fa:	4083      	lsls	r3, r0
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	3501      	adds	r5, #1
 8005300:	4313      	orrs	r3, r2
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	7829      	ldrb	r1, [r5, #0]
 8005306:	2206      	movs	r2, #6
 8005308:	4828      	ldr	r0, [pc, #160]	; (80053ac <_svfiprintf_r+0x1f4>)
 800530a:	1c6e      	adds	r6, r5, #1
 800530c:	7621      	strb	r1, [r4, #24]
 800530e:	f000 f9d5 	bl	80056bc <memchr>
 8005312:	2800      	cmp	r0, #0
 8005314:	d03c      	beq.n	8005390 <_svfiprintf_r+0x1d8>
 8005316:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <_svfiprintf_r+0x1f8>)
 8005318:	2b00      	cmp	r3, #0
 800531a:	d125      	bne.n	8005368 <_svfiprintf_r+0x1b0>
 800531c:	2207      	movs	r2, #7
 800531e:	9b07      	ldr	r3, [sp, #28]
 8005320:	3307      	adds	r3, #7
 8005322:	4393      	bics	r3, r2
 8005324:	3308      	adds	r3, #8
 8005326:	9307      	str	r3, [sp, #28]
 8005328:	6963      	ldr	r3, [r4, #20]
 800532a:	9a04      	ldr	r2, [sp, #16]
 800532c:	189b      	adds	r3, r3, r2
 800532e:	6163      	str	r3, [r4, #20]
 8005330:	e765      	b.n	80051fe <_svfiprintf_r+0x46>
 8005332:	4343      	muls	r3, r0
 8005334:	0035      	movs	r5, r6
 8005336:	2101      	movs	r1, #1
 8005338:	189b      	adds	r3, r3, r2
 800533a:	e7a6      	b.n	800528a <_svfiprintf_r+0xd2>
 800533c:	2301      	movs	r3, #1
 800533e:	425b      	negs	r3, r3
 8005340:	e7d0      	b.n	80052e4 <_svfiprintf_r+0x12c>
 8005342:	2300      	movs	r3, #0
 8005344:	200a      	movs	r0, #10
 8005346:	001a      	movs	r2, r3
 8005348:	3501      	adds	r5, #1
 800534a:	6063      	str	r3, [r4, #4]
 800534c:	7829      	ldrb	r1, [r5, #0]
 800534e:	1c6e      	adds	r6, r5, #1
 8005350:	3930      	subs	r1, #48	; 0x30
 8005352:	2909      	cmp	r1, #9
 8005354:	d903      	bls.n	800535e <_svfiprintf_r+0x1a6>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0c5      	beq.n	80052e6 <_svfiprintf_r+0x12e>
 800535a:	9209      	str	r2, [sp, #36]	; 0x24
 800535c:	e7c3      	b.n	80052e6 <_svfiprintf_r+0x12e>
 800535e:	4342      	muls	r2, r0
 8005360:	0035      	movs	r5, r6
 8005362:	2301      	movs	r3, #1
 8005364:	1852      	adds	r2, r2, r1
 8005366:	e7f1      	b.n	800534c <_svfiprintf_r+0x194>
 8005368:	ab07      	add	r3, sp, #28
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	003a      	movs	r2, r7
 800536e:	0021      	movs	r1, r4
 8005370:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <_svfiprintf_r+0x1fc>)
 8005372:	9803      	ldr	r0, [sp, #12]
 8005374:	e000      	b.n	8005378 <_svfiprintf_r+0x1c0>
 8005376:	bf00      	nop
 8005378:	9004      	str	r0, [sp, #16]
 800537a:	9b04      	ldr	r3, [sp, #16]
 800537c:	3301      	adds	r3, #1
 800537e:	d1d3      	bne.n	8005328 <_svfiprintf_r+0x170>
 8005380:	89bb      	ldrh	r3, [r7, #12]
 8005382:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005384:	065b      	lsls	r3, r3, #25
 8005386:	d400      	bmi.n	800538a <_svfiprintf_r+0x1d2>
 8005388:	e72d      	b.n	80051e6 <_svfiprintf_r+0x2e>
 800538a:	2001      	movs	r0, #1
 800538c:	4240      	negs	r0, r0
 800538e:	e72a      	b.n	80051e6 <_svfiprintf_r+0x2e>
 8005390:	ab07      	add	r3, sp, #28
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	003a      	movs	r2, r7
 8005396:	0021      	movs	r1, r4
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <_svfiprintf_r+0x1fc>)
 800539a:	9803      	ldr	r0, [sp, #12]
 800539c:	f000 f87c 	bl	8005498 <_printf_i>
 80053a0:	e7ea      	b.n	8005378 <_svfiprintf_r+0x1c0>
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	08005d34 	.word	0x08005d34
 80053a8:	08005d3a 	.word	0x08005d3a
 80053ac:	08005d3e 	.word	0x08005d3e
 80053b0:	00000000 	.word	0x00000000
 80053b4:	080050f5 	.word	0x080050f5

080053b8 <_printf_common>:
 80053b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ba:	0015      	movs	r5, r2
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	688a      	ldr	r2, [r1, #8]
 80053c0:	690b      	ldr	r3, [r1, #16]
 80053c2:	000c      	movs	r4, r1
 80053c4:	9000      	str	r0, [sp, #0]
 80053c6:	4293      	cmp	r3, r2
 80053c8:	da00      	bge.n	80053cc <_printf_common+0x14>
 80053ca:	0013      	movs	r3, r2
 80053cc:	0022      	movs	r2, r4
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	3243      	adds	r2, #67	; 0x43
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	d001      	beq.n	80053dc <_printf_common+0x24>
 80053d8:	3301      	adds	r3, #1
 80053da:	602b      	str	r3, [r5, #0]
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	069b      	lsls	r3, r3, #26
 80053e0:	d502      	bpl.n	80053e8 <_printf_common+0x30>
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	3302      	adds	r3, #2
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	2306      	movs	r3, #6
 80053ec:	0017      	movs	r7, r2
 80053ee:	401f      	ands	r7, r3
 80053f0:	421a      	tst	r2, r3
 80053f2:	d027      	beq.n	8005444 <_printf_common+0x8c>
 80053f4:	0023      	movs	r3, r4
 80053f6:	3343      	adds	r3, #67	; 0x43
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	1e5a      	subs	r2, r3, #1
 80053fc:	4193      	sbcs	r3, r2
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d430      	bmi.n	8005466 <_printf_common+0xae>
 8005404:	0022      	movs	r2, r4
 8005406:	9901      	ldr	r1, [sp, #4]
 8005408:	9800      	ldr	r0, [sp, #0]
 800540a:	9e08      	ldr	r6, [sp, #32]
 800540c:	3243      	adds	r2, #67	; 0x43
 800540e:	47b0      	blx	r6
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d025      	beq.n	8005460 <_printf_common+0xa8>
 8005414:	2306      	movs	r3, #6
 8005416:	6820      	ldr	r0, [r4, #0]
 8005418:	682a      	ldr	r2, [r5, #0]
 800541a:	68e1      	ldr	r1, [r4, #12]
 800541c:	2500      	movs	r5, #0
 800541e:	4003      	ands	r3, r0
 8005420:	2b04      	cmp	r3, #4
 8005422:	d103      	bne.n	800542c <_printf_common+0x74>
 8005424:	1a8d      	subs	r5, r1, r2
 8005426:	43eb      	mvns	r3, r5
 8005428:	17db      	asrs	r3, r3, #31
 800542a:	401d      	ands	r5, r3
 800542c:	68a3      	ldr	r3, [r4, #8]
 800542e:	6922      	ldr	r2, [r4, #16]
 8005430:	4293      	cmp	r3, r2
 8005432:	dd01      	ble.n	8005438 <_printf_common+0x80>
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	18ed      	adds	r5, r5, r3
 8005438:	2700      	movs	r7, #0
 800543a:	42bd      	cmp	r5, r7
 800543c:	d120      	bne.n	8005480 <_printf_common+0xc8>
 800543e:	2000      	movs	r0, #0
 8005440:	e010      	b.n	8005464 <_printf_common+0xac>
 8005442:	3701      	adds	r7, #1
 8005444:	68e3      	ldr	r3, [r4, #12]
 8005446:	682a      	ldr	r2, [r5, #0]
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	42bb      	cmp	r3, r7
 800544c:	ddd2      	ble.n	80053f4 <_printf_common+0x3c>
 800544e:	0022      	movs	r2, r4
 8005450:	2301      	movs	r3, #1
 8005452:	9901      	ldr	r1, [sp, #4]
 8005454:	9800      	ldr	r0, [sp, #0]
 8005456:	9e08      	ldr	r6, [sp, #32]
 8005458:	3219      	adds	r2, #25
 800545a:	47b0      	blx	r6
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d1f0      	bne.n	8005442 <_printf_common+0x8a>
 8005460:	2001      	movs	r0, #1
 8005462:	4240      	negs	r0, r0
 8005464:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005466:	2030      	movs	r0, #48	; 0x30
 8005468:	18e1      	adds	r1, r4, r3
 800546a:	3143      	adds	r1, #67	; 0x43
 800546c:	7008      	strb	r0, [r1, #0]
 800546e:	0021      	movs	r1, r4
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	3145      	adds	r1, #69	; 0x45
 8005474:	7809      	ldrb	r1, [r1, #0]
 8005476:	18a2      	adds	r2, r4, r2
 8005478:	3243      	adds	r2, #67	; 0x43
 800547a:	3302      	adds	r3, #2
 800547c:	7011      	strb	r1, [r2, #0]
 800547e:	e7c1      	b.n	8005404 <_printf_common+0x4c>
 8005480:	0022      	movs	r2, r4
 8005482:	2301      	movs	r3, #1
 8005484:	9901      	ldr	r1, [sp, #4]
 8005486:	9800      	ldr	r0, [sp, #0]
 8005488:	9e08      	ldr	r6, [sp, #32]
 800548a:	321a      	adds	r2, #26
 800548c:	47b0      	blx	r6
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	d0e6      	beq.n	8005460 <_printf_common+0xa8>
 8005492:	3701      	adds	r7, #1
 8005494:	e7d1      	b.n	800543a <_printf_common+0x82>
	...

08005498 <_printf_i>:
 8005498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549a:	b08b      	sub	sp, #44	; 0x2c
 800549c:	9206      	str	r2, [sp, #24]
 800549e:	000a      	movs	r2, r1
 80054a0:	3243      	adds	r2, #67	; 0x43
 80054a2:	9307      	str	r3, [sp, #28]
 80054a4:	9005      	str	r0, [sp, #20]
 80054a6:	9204      	str	r2, [sp, #16]
 80054a8:	7e0a      	ldrb	r2, [r1, #24]
 80054aa:	000c      	movs	r4, r1
 80054ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054ae:	2a78      	cmp	r2, #120	; 0x78
 80054b0:	d807      	bhi.n	80054c2 <_printf_i+0x2a>
 80054b2:	2a62      	cmp	r2, #98	; 0x62
 80054b4:	d809      	bhi.n	80054ca <_printf_i+0x32>
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	d100      	bne.n	80054bc <_printf_i+0x24>
 80054ba:	e0c1      	b.n	8005640 <_printf_i+0x1a8>
 80054bc:	2a58      	cmp	r2, #88	; 0x58
 80054be:	d100      	bne.n	80054c2 <_printf_i+0x2a>
 80054c0:	e08c      	b.n	80055dc <_printf_i+0x144>
 80054c2:	0026      	movs	r6, r4
 80054c4:	3642      	adds	r6, #66	; 0x42
 80054c6:	7032      	strb	r2, [r6, #0]
 80054c8:	e022      	b.n	8005510 <_printf_i+0x78>
 80054ca:	0010      	movs	r0, r2
 80054cc:	3863      	subs	r0, #99	; 0x63
 80054ce:	2815      	cmp	r0, #21
 80054d0:	d8f7      	bhi.n	80054c2 <_printf_i+0x2a>
 80054d2:	f7fa fe19 	bl	8000108 <__gnu_thumb1_case_shi>
 80054d6:	0016      	.short	0x0016
 80054d8:	fff6001f 	.word	0xfff6001f
 80054dc:	fff6fff6 	.word	0xfff6fff6
 80054e0:	001ffff6 	.word	0x001ffff6
 80054e4:	fff6fff6 	.word	0xfff6fff6
 80054e8:	fff6fff6 	.word	0xfff6fff6
 80054ec:	003600a8 	.word	0x003600a8
 80054f0:	fff6009a 	.word	0xfff6009a
 80054f4:	00b9fff6 	.word	0x00b9fff6
 80054f8:	0036fff6 	.word	0x0036fff6
 80054fc:	fff6fff6 	.word	0xfff6fff6
 8005500:	009e      	.short	0x009e
 8005502:	0026      	movs	r6, r4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	3642      	adds	r6, #66	; 0x42
 8005508:	1d11      	adds	r1, r2, #4
 800550a:	6019      	str	r1, [r3, #0]
 800550c:	6813      	ldr	r3, [r2, #0]
 800550e:	7033      	strb	r3, [r6, #0]
 8005510:	2301      	movs	r3, #1
 8005512:	e0a7      	b.n	8005664 <_printf_i+0x1cc>
 8005514:	6808      	ldr	r0, [r1, #0]
 8005516:	6819      	ldr	r1, [r3, #0]
 8005518:	1d0a      	adds	r2, r1, #4
 800551a:	0605      	lsls	r5, r0, #24
 800551c:	d50b      	bpl.n	8005536 <_printf_i+0x9e>
 800551e:	680d      	ldr	r5, [r1, #0]
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	2d00      	cmp	r5, #0
 8005524:	da03      	bge.n	800552e <_printf_i+0x96>
 8005526:	232d      	movs	r3, #45	; 0x2d
 8005528:	9a04      	ldr	r2, [sp, #16]
 800552a:	426d      	negs	r5, r5
 800552c:	7013      	strb	r3, [r2, #0]
 800552e:	4b61      	ldr	r3, [pc, #388]	; (80056b4 <_printf_i+0x21c>)
 8005530:	270a      	movs	r7, #10
 8005532:	9303      	str	r3, [sp, #12]
 8005534:	e01b      	b.n	800556e <_printf_i+0xd6>
 8005536:	680d      	ldr	r5, [r1, #0]
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	0641      	lsls	r1, r0, #25
 800553c:	d5f1      	bpl.n	8005522 <_printf_i+0x8a>
 800553e:	b22d      	sxth	r5, r5
 8005540:	e7ef      	b.n	8005522 <_printf_i+0x8a>
 8005542:	680d      	ldr	r5, [r1, #0]
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	1d08      	adds	r0, r1, #4
 8005548:	6018      	str	r0, [r3, #0]
 800554a:	062e      	lsls	r6, r5, #24
 800554c:	d501      	bpl.n	8005552 <_printf_i+0xba>
 800554e:	680d      	ldr	r5, [r1, #0]
 8005550:	e003      	b.n	800555a <_printf_i+0xc2>
 8005552:	066d      	lsls	r5, r5, #25
 8005554:	d5fb      	bpl.n	800554e <_printf_i+0xb6>
 8005556:	680d      	ldr	r5, [r1, #0]
 8005558:	b2ad      	uxth	r5, r5
 800555a:	4b56      	ldr	r3, [pc, #344]	; (80056b4 <_printf_i+0x21c>)
 800555c:	2708      	movs	r7, #8
 800555e:	9303      	str	r3, [sp, #12]
 8005560:	2a6f      	cmp	r2, #111	; 0x6f
 8005562:	d000      	beq.n	8005566 <_printf_i+0xce>
 8005564:	3702      	adds	r7, #2
 8005566:	0023      	movs	r3, r4
 8005568:	2200      	movs	r2, #0
 800556a:	3343      	adds	r3, #67	; 0x43
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	6863      	ldr	r3, [r4, #4]
 8005570:	60a3      	str	r3, [r4, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	db03      	blt.n	800557e <_printf_i+0xe6>
 8005576:	2204      	movs	r2, #4
 8005578:	6821      	ldr	r1, [r4, #0]
 800557a:	4391      	bics	r1, r2
 800557c:	6021      	str	r1, [r4, #0]
 800557e:	2d00      	cmp	r5, #0
 8005580:	d102      	bne.n	8005588 <_printf_i+0xf0>
 8005582:	9e04      	ldr	r6, [sp, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00c      	beq.n	80055a2 <_printf_i+0x10a>
 8005588:	9e04      	ldr	r6, [sp, #16]
 800558a:	0028      	movs	r0, r5
 800558c:	0039      	movs	r1, r7
 800558e:	f7fa fe4b 	bl	8000228 <__aeabi_uidivmod>
 8005592:	9b03      	ldr	r3, [sp, #12]
 8005594:	3e01      	subs	r6, #1
 8005596:	5c5b      	ldrb	r3, [r3, r1]
 8005598:	7033      	strb	r3, [r6, #0]
 800559a:	002b      	movs	r3, r5
 800559c:	0005      	movs	r5, r0
 800559e:	429f      	cmp	r7, r3
 80055a0:	d9f3      	bls.n	800558a <_printf_i+0xf2>
 80055a2:	2f08      	cmp	r7, #8
 80055a4:	d109      	bne.n	80055ba <_printf_i+0x122>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	07db      	lsls	r3, r3, #31
 80055aa:	d506      	bpl.n	80055ba <_printf_i+0x122>
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	6922      	ldr	r2, [r4, #16]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	dc02      	bgt.n	80055ba <_printf_i+0x122>
 80055b4:	2330      	movs	r3, #48	; 0x30
 80055b6:	3e01      	subs	r6, #1
 80055b8:	7033      	strb	r3, [r6, #0]
 80055ba:	9b04      	ldr	r3, [sp, #16]
 80055bc:	1b9b      	subs	r3, r3, r6
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	9b07      	ldr	r3, [sp, #28]
 80055c2:	0021      	movs	r1, r4
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	9805      	ldr	r0, [sp, #20]
 80055c8:	9b06      	ldr	r3, [sp, #24]
 80055ca:	aa09      	add	r2, sp, #36	; 0x24
 80055cc:	f7ff fef4 	bl	80053b8 <_printf_common>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d14c      	bne.n	800566e <_printf_i+0x1d6>
 80055d4:	2001      	movs	r0, #1
 80055d6:	4240      	negs	r0, r0
 80055d8:	b00b      	add	sp, #44	; 0x2c
 80055da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055dc:	3145      	adds	r1, #69	; 0x45
 80055de:	700a      	strb	r2, [r1, #0]
 80055e0:	4a34      	ldr	r2, [pc, #208]	; (80056b4 <_printf_i+0x21c>)
 80055e2:	9203      	str	r2, [sp, #12]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	6821      	ldr	r1, [r4, #0]
 80055e8:	ca20      	ldmia	r2!, {r5}
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	0608      	lsls	r0, r1, #24
 80055ee:	d516      	bpl.n	800561e <_printf_i+0x186>
 80055f0:	07cb      	lsls	r3, r1, #31
 80055f2:	d502      	bpl.n	80055fa <_printf_i+0x162>
 80055f4:	2320      	movs	r3, #32
 80055f6:	4319      	orrs	r1, r3
 80055f8:	6021      	str	r1, [r4, #0]
 80055fa:	2710      	movs	r7, #16
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	d1b2      	bne.n	8005566 <_printf_i+0xce>
 8005600:	2320      	movs	r3, #32
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	439a      	bics	r2, r3
 8005606:	6022      	str	r2, [r4, #0]
 8005608:	e7ad      	b.n	8005566 <_printf_i+0xce>
 800560a:	2220      	movs	r2, #32
 800560c:	6809      	ldr	r1, [r1, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	6022      	str	r2, [r4, #0]
 8005612:	0022      	movs	r2, r4
 8005614:	2178      	movs	r1, #120	; 0x78
 8005616:	3245      	adds	r2, #69	; 0x45
 8005618:	7011      	strb	r1, [r2, #0]
 800561a:	4a27      	ldr	r2, [pc, #156]	; (80056b8 <_printf_i+0x220>)
 800561c:	e7e1      	b.n	80055e2 <_printf_i+0x14a>
 800561e:	0648      	lsls	r0, r1, #25
 8005620:	d5e6      	bpl.n	80055f0 <_printf_i+0x158>
 8005622:	b2ad      	uxth	r5, r5
 8005624:	e7e4      	b.n	80055f0 <_printf_i+0x158>
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	680d      	ldr	r5, [r1, #0]
 800562a:	1d10      	adds	r0, r2, #4
 800562c:	6949      	ldr	r1, [r1, #20]
 800562e:	6018      	str	r0, [r3, #0]
 8005630:	6813      	ldr	r3, [r2, #0]
 8005632:	062e      	lsls	r6, r5, #24
 8005634:	d501      	bpl.n	800563a <_printf_i+0x1a2>
 8005636:	6019      	str	r1, [r3, #0]
 8005638:	e002      	b.n	8005640 <_printf_i+0x1a8>
 800563a:	066d      	lsls	r5, r5, #25
 800563c:	d5fb      	bpl.n	8005636 <_printf_i+0x19e>
 800563e:	8019      	strh	r1, [r3, #0]
 8005640:	2300      	movs	r3, #0
 8005642:	9e04      	ldr	r6, [sp, #16]
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	e7bb      	b.n	80055c0 <_printf_i+0x128>
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	1d11      	adds	r1, r2, #4
 800564c:	6019      	str	r1, [r3, #0]
 800564e:	6816      	ldr	r6, [r2, #0]
 8005650:	2100      	movs	r1, #0
 8005652:	0030      	movs	r0, r6
 8005654:	6862      	ldr	r2, [r4, #4]
 8005656:	f000 f831 	bl	80056bc <memchr>
 800565a:	2800      	cmp	r0, #0
 800565c:	d001      	beq.n	8005662 <_printf_i+0x1ca>
 800565e:	1b80      	subs	r0, r0, r6
 8005660:	6060      	str	r0, [r4, #4]
 8005662:	6863      	ldr	r3, [r4, #4]
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	2300      	movs	r3, #0
 8005668:	9a04      	ldr	r2, [sp, #16]
 800566a:	7013      	strb	r3, [r2, #0]
 800566c:	e7a8      	b.n	80055c0 <_printf_i+0x128>
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	0032      	movs	r2, r6
 8005672:	9906      	ldr	r1, [sp, #24]
 8005674:	9805      	ldr	r0, [sp, #20]
 8005676:	9d07      	ldr	r5, [sp, #28]
 8005678:	47a8      	blx	r5
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	d0aa      	beq.n	80055d4 <_printf_i+0x13c>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	079b      	lsls	r3, r3, #30
 8005682:	d415      	bmi.n	80056b0 <_printf_i+0x218>
 8005684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005686:	68e0      	ldr	r0, [r4, #12]
 8005688:	4298      	cmp	r0, r3
 800568a:	daa5      	bge.n	80055d8 <_printf_i+0x140>
 800568c:	0018      	movs	r0, r3
 800568e:	e7a3      	b.n	80055d8 <_printf_i+0x140>
 8005690:	0022      	movs	r2, r4
 8005692:	2301      	movs	r3, #1
 8005694:	9906      	ldr	r1, [sp, #24]
 8005696:	9805      	ldr	r0, [sp, #20]
 8005698:	9e07      	ldr	r6, [sp, #28]
 800569a:	3219      	adds	r2, #25
 800569c:	47b0      	blx	r6
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d098      	beq.n	80055d4 <_printf_i+0x13c>
 80056a2:	3501      	adds	r5, #1
 80056a4:	68e3      	ldr	r3, [r4, #12]
 80056a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	42ab      	cmp	r3, r5
 80056ac:	dcf0      	bgt.n	8005690 <_printf_i+0x1f8>
 80056ae:	e7e9      	b.n	8005684 <_printf_i+0x1ec>
 80056b0:	2500      	movs	r5, #0
 80056b2:	e7f7      	b.n	80056a4 <_printf_i+0x20c>
 80056b4:	08005d45 	.word	0x08005d45
 80056b8:	08005d56 	.word	0x08005d56

080056bc <memchr>:
 80056bc:	b2c9      	uxtb	r1, r1
 80056be:	1882      	adds	r2, r0, r2
 80056c0:	4290      	cmp	r0, r2
 80056c2:	d101      	bne.n	80056c8 <memchr+0xc>
 80056c4:	2000      	movs	r0, #0
 80056c6:	4770      	bx	lr
 80056c8:	7803      	ldrb	r3, [r0, #0]
 80056ca:	428b      	cmp	r3, r1
 80056cc:	d0fb      	beq.n	80056c6 <memchr+0xa>
 80056ce:	3001      	adds	r0, #1
 80056d0:	e7f6      	b.n	80056c0 <memchr+0x4>

080056d2 <memcpy>:
 80056d2:	2300      	movs	r3, #0
 80056d4:	b510      	push	{r4, lr}
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d100      	bne.n	80056dc <memcpy+0xa>
 80056da:	bd10      	pop	{r4, pc}
 80056dc:	5ccc      	ldrb	r4, [r1, r3]
 80056de:	54c4      	strb	r4, [r0, r3]
 80056e0:	3301      	adds	r3, #1
 80056e2:	e7f8      	b.n	80056d6 <memcpy+0x4>

080056e4 <memmove>:
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4288      	cmp	r0, r1
 80056e8:	d902      	bls.n	80056f0 <memmove+0xc>
 80056ea:	188b      	adds	r3, r1, r2
 80056ec:	4298      	cmp	r0, r3
 80056ee:	d303      	bcc.n	80056f8 <memmove+0x14>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e007      	b.n	8005704 <memmove+0x20>
 80056f4:	5c8b      	ldrb	r3, [r1, r2]
 80056f6:	5483      	strb	r3, [r0, r2]
 80056f8:	3a01      	subs	r2, #1
 80056fa:	d2fb      	bcs.n	80056f4 <memmove+0x10>
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	5ccc      	ldrb	r4, [r1, r3]
 8005700:	54c4      	strb	r4, [r0, r3]
 8005702:	3301      	adds	r3, #1
 8005704:	429a      	cmp	r2, r3
 8005706:	d1fa      	bne.n	80056fe <memmove+0x1a>
 8005708:	e7f8      	b.n	80056fc <memmove+0x18>
	...

0800570c <_free_r>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	0005      	movs	r5, r0
 8005710:	2900      	cmp	r1, #0
 8005712:	d010      	beq.n	8005736 <_free_r+0x2a>
 8005714:	1f0c      	subs	r4, r1, #4
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	da00      	bge.n	800571e <_free_r+0x12>
 800571c:	18e4      	adds	r4, r4, r3
 800571e:	0028      	movs	r0, r5
 8005720:	f000 f918 	bl	8005954 <__malloc_lock>
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <_free_r+0x90>)
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d105      	bne.n	8005738 <_free_r+0x2c>
 800572c:	6063      	str	r3, [r4, #4]
 800572e:	6014      	str	r4, [r2, #0]
 8005730:	0028      	movs	r0, r5
 8005732:	f000 f917 	bl	8005964 <__malloc_unlock>
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	42a3      	cmp	r3, r4
 800573a:	d908      	bls.n	800574e <_free_r+0x42>
 800573c:	6821      	ldr	r1, [r4, #0]
 800573e:	1860      	adds	r0, r4, r1
 8005740:	4283      	cmp	r3, r0
 8005742:	d1f3      	bne.n	800572c <_free_r+0x20>
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	1841      	adds	r1, r0, r1
 800574a:	6021      	str	r1, [r4, #0]
 800574c:	e7ee      	b.n	800572c <_free_r+0x20>
 800574e:	001a      	movs	r2, r3
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <_free_r+0x4e>
 8005756:	42a3      	cmp	r3, r4
 8005758:	d9f9      	bls.n	800574e <_free_r+0x42>
 800575a:	6811      	ldr	r1, [r2, #0]
 800575c:	1850      	adds	r0, r2, r1
 800575e:	42a0      	cmp	r0, r4
 8005760:	d10b      	bne.n	800577a <_free_r+0x6e>
 8005762:	6820      	ldr	r0, [r4, #0]
 8005764:	1809      	adds	r1, r1, r0
 8005766:	1850      	adds	r0, r2, r1
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	4283      	cmp	r3, r0
 800576c:	d1e0      	bne.n	8005730 <_free_r+0x24>
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	1841      	adds	r1, r0, r1
 8005774:	6011      	str	r1, [r2, #0]
 8005776:	6053      	str	r3, [r2, #4]
 8005778:	e7da      	b.n	8005730 <_free_r+0x24>
 800577a:	42a0      	cmp	r0, r4
 800577c:	d902      	bls.n	8005784 <_free_r+0x78>
 800577e:	230c      	movs	r3, #12
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	e7d5      	b.n	8005730 <_free_r+0x24>
 8005784:	6821      	ldr	r1, [r4, #0]
 8005786:	1860      	adds	r0, r4, r1
 8005788:	4283      	cmp	r3, r0
 800578a:	d103      	bne.n	8005794 <_free_r+0x88>
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	1841      	adds	r1, r0, r1
 8005792:	6021      	str	r1, [r4, #0]
 8005794:	6063      	str	r3, [r4, #4]
 8005796:	6054      	str	r4, [r2, #4]
 8005798:	e7ca      	b.n	8005730 <_free_r+0x24>
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	2000024c 	.word	0x2000024c

080057a0 <sbrk_aligned>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	4e0f      	ldr	r6, [pc, #60]	; (80057e0 <sbrk_aligned+0x40>)
 80057a4:	000d      	movs	r5, r1
 80057a6:	6831      	ldr	r1, [r6, #0]
 80057a8:	0004      	movs	r4, r0
 80057aa:	2900      	cmp	r1, #0
 80057ac:	d102      	bne.n	80057b4 <sbrk_aligned+0x14>
 80057ae:	f000 f8bf 	bl	8005930 <_sbrk_r>
 80057b2:	6030      	str	r0, [r6, #0]
 80057b4:	0029      	movs	r1, r5
 80057b6:	0020      	movs	r0, r4
 80057b8:	f000 f8ba 	bl	8005930 <_sbrk_r>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d00a      	beq.n	80057d6 <sbrk_aligned+0x36>
 80057c0:	2303      	movs	r3, #3
 80057c2:	1cc5      	adds	r5, r0, #3
 80057c4:	439d      	bics	r5, r3
 80057c6:	42a8      	cmp	r0, r5
 80057c8:	d007      	beq.n	80057da <sbrk_aligned+0x3a>
 80057ca:	1a29      	subs	r1, r5, r0
 80057cc:	0020      	movs	r0, r4
 80057ce:	f000 f8af 	bl	8005930 <_sbrk_r>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	d101      	bne.n	80057da <sbrk_aligned+0x3a>
 80057d6:	2501      	movs	r5, #1
 80057d8:	426d      	negs	r5, r5
 80057da:	0028      	movs	r0, r5
 80057dc:	bd70      	pop	{r4, r5, r6, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	20000250 	.word	0x20000250

080057e4 <_malloc_r>:
 80057e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e6:	2203      	movs	r2, #3
 80057e8:	1ccb      	adds	r3, r1, #3
 80057ea:	4393      	bics	r3, r2
 80057ec:	3308      	adds	r3, #8
 80057ee:	0006      	movs	r6, r0
 80057f0:	001f      	movs	r7, r3
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	d232      	bcs.n	800585c <_malloc_r+0x78>
 80057f6:	270c      	movs	r7, #12
 80057f8:	42b9      	cmp	r1, r7
 80057fa:	d831      	bhi.n	8005860 <_malloc_r+0x7c>
 80057fc:	0030      	movs	r0, r6
 80057fe:	f000 f8a9 	bl	8005954 <__malloc_lock>
 8005802:	4d32      	ldr	r5, [pc, #200]	; (80058cc <_malloc_r+0xe8>)
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	001c      	movs	r4, r3
 8005808:	2c00      	cmp	r4, #0
 800580a:	d12e      	bne.n	800586a <_malloc_r+0x86>
 800580c:	0039      	movs	r1, r7
 800580e:	0030      	movs	r0, r6
 8005810:	f7ff ffc6 	bl	80057a0 <sbrk_aligned>
 8005814:	0004      	movs	r4, r0
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	d11e      	bne.n	8005858 <_malloc_r+0x74>
 800581a:	682c      	ldr	r4, [r5, #0]
 800581c:	0025      	movs	r5, r4
 800581e:	2d00      	cmp	r5, #0
 8005820:	d14a      	bne.n	80058b8 <_malloc_r+0xd4>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	0029      	movs	r1, r5
 8005826:	18e3      	adds	r3, r4, r3
 8005828:	0030      	movs	r0, r6
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	f000 f880 	bl	8005930 <_sbrk_r>
 8005830:	9b01      	ldr	r3, [sp, #4]
 8005832:	4283      	cmp	r3, r0
 8005834:	d143      	bne.n	80058be <_malloc_r+0xda>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	3703      	adds	r7, #3
 800583a:	1aff      	subs	r7, r7, r3
 800583c:	2303      	movs	r3, #3
 800583e:	439f      	bics	r7, r3
 8005840:	3708      	adds	r7, #8
 8005842:	2f0c      	cmp	r7, #12
 8005844:	d200      	bcs.n	8005848 <_malloc_r+0x64>
 8005846:	270c      	movs	r7, #12
 8005848:	0039      	movs	r1, r7
 800584a:	0030      	movs	r0, r6
 800584c:	f7ff ffa8 	bl	80057a0 <sbrk_aligned>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d034      	beq.n	80058be <_malloc_r+0xda>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	19df      	adds	r7, r3, r7
 8005858:	6027      	str	r7, [r4, #0]
 800585a:	e013      	b.n	8005884 <_malloc_r+0xa0>
 800585c:	2b00      	cmp	r3, #0
 800585e:	dacb      	bge.n	80057f8 <_malloc_r+0x14>
 8005860:	230c      	movs	r3, #12
 8005862:	2500      	movs	r5, #0
 8005864:	6033      	str	r3, [r6, #0]
 8005866:	0028      	movs	r0, r5
 8005868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	1bd1      	subs	r1, r2, r7
 800586e:	d420      	bmi.n	80058b2 <_malloc_r+0xce>
 8005870:	290b      	cmp	r1, #11
 8005872:	d917      	bls.n	80058a4 <_malloc_r+0xc0>
 8005874:	19e2      	adds	r2, r4, r7
 8005876:	6027      	str	r7, [r4, #0]
 8005878:	42a3      	cmp	r3, r4
 800587a:	d111      	bne.n	80058a0 <_malloc_r+0xbc>
 800587c:	602a      	str	r2, [r5, #0]
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	6011      	str	r1, [r2, #0]
 8005882:	6053      	str	r3, [r2, #4]
 8005884:	0030      	movs	r0, r6
 8005886:	0025      	movs	r5, r4
 8005888:	f000 f86c 	bl	8005964 <__malloc_unlock>
 800588c:	2207      	movs	r2, #7
 800588e:	350b      	adds	r5, #11
 8005890:	1d23      	adds	r3, r4, #4
 8005892:	4395      	bics	r5, r2
 8005894:	1aea      	subs	r2, r5, r3
 8005896:	429d      	cmp	r5, r3
 8005898:	d0e5      	beq.n	8005866 <_malloc_r+0x82>
 800589a:	1b5b      	subs	r3, r3, r5
 800589c:	50a3      	str	r3, [r4, r2]
 800589e:	e7e2      	b.n	8005866 <_malloc_r+0x82>
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	e7ec      	b.n	800587e <_malloc_r+0x9a>
 80058a4:	6862      	ldr	r2, [r4, #4]
 80058a6:	42a3      	cmp	r3, r4
 80058a8:	d101      	bne.n	80058ae <_malloc_r+0xca>
 80058aa:	602a      	str	r2, [r5, #0]
 80058ac:	e7ea      	b.n	8005884 <_malloc_r+0xa0>
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	e7e8      	b.n	8005884 <_malloc_r+0xa0>
 80058b2:	0023      	movs	r3, r4
 80058b4:	6864      	ldr	r4, [r4, #4]
 80058b6:	e7a7      	b.n	8005808 <_malloc_r+0x24>
 80058b8:	002c      	movs	r4, r5
 80058ba:	686d      	ldr	r5, [r5, #4]
 80058bc:	e7af      	b.n	800581e <_malloc_r+0x3a>
 80058be:	230c      	movs	r3, #12
 80058c0:	0030      	movs	r0, r6
 80058c2:	6033      	str	r3, [r6, #0]
 80058c4:	f000 f84e 	bl	8005964 <__malloc_unlock>
 80058c8:	e7cd      	b.n	8005866 <_malloc_r+0x82>
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	2000024c 	.word	0x2000024c

080058d0 <_realloc_r>:
 80058d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058d2:	0007      	movs	r7, r0
 80058d4:	000e      	movs	r6, r1
 80058d6:	0014      	movs	r4, r2
 80058d8:	2900      	cmp	r1, #0
 80058da:	d105      	bne.n	80058e8 <_realloc_r+0x18>
 80058dc:	0011      	movs	r1, r2
 80058de:	f7ff ff81 	bl	80057e4 <_malloc_r>
 80058e2:	0005      	movs	r5, r0
 80058e4:	0028      	movs	r0, r5
 80058e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	d103      	bne.n	80058f4 <_realloc_r+0x24>
 80058ec:	f7ff ff0e 	bl	800570c <_free_r>
 80058f0:	0025      	movs	r5, r4
 80058f2:	e7f7      	b.n	80058e4 <_realloc_r+0x14>
 80058f4:	f000 f83e 	bl	8005974 <_malloc_usable_size_r>
 80058f8:	9001      	str	r0, [sp, #4]
 80058fa:	4284      	cmp	r4, r0
 80058fc:	d803      	bhi.n	8005906 <_realloc_r+0x36>
 80058fe:	0035      	movs	r5, r6
 8005900:	0843      	lsrs	r3, r0, #1
 8005902:	42a3      	cmp	r3, r4
 8005904:	d3ee      	bcc.n	80058e4 <_realloc_r+0x14>
 8005906:	0021      	movs	r1, r4
 8005908:	0038      	movs	r0, r7
 800590a:	f7ff ff6b 	bl	80057e4 <_malloc_r>
 800590e:	1e05      	subs	r5, r0, #0
 8005910:	d0e8      	beq.n	80058e4 <_realloc_r+0x14>
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	0022      	movs	r2, r4
 8005916:	429c      	cmp	r4, r3
 8005918:	d900      	bls.n	800591c <_realloc_r+0x4c>
 800591a:	001a      	movs	r2, r3
 800591c:	0031      	movs	r1, r6
 800591e:	0028      	movs	r0, r5
 8005920:	f7ff fed7 	bl	80056d2 <memcpy>
 8005924:	0031      	movs	r1, r6
 8005926:	0038      	movs	r0, r7
 8005928:	f7ff fef0 	bl	800570c <_free_r>
 800592c:	e7da      	b.n	80058e4 <_realloc_r+0x14>
	...

08005930 <_sbrk_r>:
 8005930:	2300      	movs	r3, #0
 8005932:	b570      	push	{r4, r5, r6, lr}
 8005934:	4d06      	ldr	r5, [pc, #24]	; (8005950 <_sbrk_r+0x20>)
 8005936:	0004      	movs	r4, r0
 8005938:	0008      	movs	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fb fec8 	bl	80016d0 <_sbrk>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d103      	bne.n	800594c <_sbrk_r+0x1c>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d000      	beq.n	800594c <_sbrk_r+0x1c>
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	20000254 	.word	0x20000254

08005954 <__malloc_lock>:
 8005954:	b510      	push	{r4, lr}
 8005956:	4802      	ldr	r0, [pc, #8]	; (8005960 <__malloc_lock+0xc>)
 8005958:	f000 f814 	bl	8005984 <__retarget_lock_acquire_recursive>
 800595c:	bd10      	pop	{r4, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	20000258 	.word	0x20000258

08005964 <__malloc_unlock>:
 8005964:	b510      	push	{r4, lr}
 8005966:	4802      	ldr	r0, [pc, #8]	; (8005970 <__malloc_unlock+0xc>)
 8005968:	f000 f80d 	bl	8005986 <__retarget_lock_release_recursive>
 800596c:	bd10      	pop	{r4, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	20000258 	.word	0x20000258

08005974 <_malloc_usable_size_r>:
 8005974:	1f0b      	subs	r3, r1, #4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	1f18      	subs	r0, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	da01      	bge.n	8005982 <_malloc_usable_size_r+0xe>
 800597e:	580b      	ldr	r3, [r1, r0]
 8005980:	18c0      	adds	r0, r0, r3
 8005982:	4770      	bx	lr

08005984 <__retarget_lock_acquire_recursive>:
 8005984:	4770      	bx	lr

08005986 <__retarget_lock_release_recursive>:
 8005986:	4770      	bx	lr

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
